
uart_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cb4  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08009f80  08009f80  0000af80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009fc8  08009fc8  0000afc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009fd0  08009fd0  0000afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009fd4  08009fd4  0000afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009fd8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dcc  24000010  08009fe8  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000ddc  08009fe8  0000bddc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017d8f  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e23  00000000  00000000  00022dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001290  00000000  00000000  00025bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e7e  00000000  00000000  00026e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033561  00000000  00000000  00027cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001905b  00000000  00000000  0005b25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cc13  00000000  00000000  000742ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c0ecd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004eac  00000000  00000000  001c0f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001c5dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009f68 	.word	0x08009f68

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08009f68 	.word	0x08009f68

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800032c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000330:	f000 b96a 	b.w	8000608 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	460c      	mov	r4, r1
 8000354:	2b00      	cmp	r3, #0
 8000356:	d14e      	bne.n	80003f6 <__udivmoddi4+0xaa>
 8000358:	4694      	mov	ip, r2
 800035a:	458c      	cmp	ip, r1
 800035c:	4686      	mov	lr, r0
 800035e:	fab2 f282 	clz	r2, r2
 8000362:	d962      	bls.n	800042a <__udivmoddi4+0xde>
 8000364:	b14a      	cbz	r2, 800037a <__udivmoddi4+0x2e>
 8000366:	f1c2 0320 	rsb	r3, r2, #32
 800036a:	4091      	lsls	r1, r2
 800036c:	fa20 f303 	lsr.w	r3, r0, r3
 8000370:	fa0c fc02 	lsl.w	ip, ip, r2
 8000374:	4319      	orrs	r1, r3
 8000376:	fa00 fe02 	lsl.w	lr, r0, r2
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f f68c 	uxth.w	r6, ip
 8000382:	fbb1 f4f7 	udiv	r4, r1, r7
 8000386:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038a:	fb07 1114 	mls	r1, r7, r4, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb04 f106 	mul.w	r1, r4, r6
 8000396:	4299      	cmp	r1, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x64>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003a2:	f080 8112 	bcs.w	80005ca <__udivmoddi4+0x27e>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 810f 	bls.w	80005ca <__udivmoddi4+0x27e>
 80003ac:	3c02      	subs	r4, #2
 80003ae:	4463      	add	r3, ip
 80003b0:	1a59      	subs	r1, r3, r1
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ba:	fb07 1110 	mls	r1, r7, r0, r1
 80003be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c2:	fb00 f606 	mul.w	r6, r0, r6
 80003c6:	429e      	cmp	r6, r3
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x94>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003d2:	f080 80fc 	bcs.w	80005ce <__udivmoddi4+0x282>
 80003d6:	429e      	cmp	r6, r3
 80003d8:	f240 80f9 	bls.w	80005ce <__udivmoddi4+0x282>
 80003dc:	4463      	add	r3, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	1b9b      	subs	r3, r3, r6
 80003e2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11d      	cbz	r5, 80003f2 <__udivmoddi4+0xa6>
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	2200      	movs	r2, #0
 80003ee:	e9c5 3200 	strd	r3, r2, [r5]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d905      	bls.n	8000406 <__udivmoddi4+0xba>
 80003fa:	b10d      	cbz	r5, 8000400 <__udivmoddi4+0xb4>
 80003fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	4608      	mov	r0, r1
 8000404:	e7f5      	b.n	80003f2 <__udivmoddi4+0xa6>
 8000406:	fab3 f183 	clz	r1, r3
 800040a:	2900      	cmp	r1, #0
 800040c:	d146      	bne.n	800049c <__udivmoddi4+0x150>
 800040e:	42a3      	cmp	r3, r4
 8000410:	d302      	bcc.n	8000418 <__udivmoddi4+0xcc>
 8000412:	4290      	cmp	r0, r2
 8000414:	f0c0 80f0 	bcc.w	80005f8 <__udivmoddi4+0x2ac>
 8000418:	1a86      	subs	r6, r0, r2
 800041a:	eb64 0303 	sbc.w	r3, r4, r3
 800041e:	2001      	movs	r0, #1
 8000420:	2d00      	cmp	r5, #0
 8000422:	d0e6      	beq.n	80003f2 <__udivmoddi4+0xa6>
 8000424:	e9c5 6300 	strd	r6, r3, [r5]
 8000428:	e7e3      	b.n	80003f2 <__udivmoddi4+0xa6>
 800042a:	2a00      	cmp	r2, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x204>
 8000430:	eba1 040c 	sub.w	r4, r1, ip
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	2101      	movs	r1, #1
 800043e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000442:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000446:	fb08 4416 	mls	r4, r8, r6, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb07 f006 	mul.w	r0, r7, r6
 8000452:	4298      	cmp	r0, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x11c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x11a>
 8000460:	4298      	cmp	r0, r3
 8000462:	f200 80cd 	bhi.w	8000600 <__udivmoddi4+0x2b4>
 8000466:	4626      	mov	r6, r4
 8000468:	1a1c      	subs	r4, r3, r0
 800046a:	fa1f f38e 	uxth.w	r3, lr
 800046e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000472:	fb08 4410 	mls	r4, r8, r0, r4
 8000476:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047a:	fb00 f707 	mul.w	r7, r0, r7
 800047e:	429f      	cmp	r7, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x148>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x146>
 800048c:	429f      	cmp	r7, r3
 800048e:	f200 80b0 	bhi.w	80005f2 <__udivmoddi4+0x2a6>
 8000492:	4620      	mov	r0, r4
 8000494:	1bdb      	subs	r3, r3, r7
 8000496:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049a:	e7a5      	b.n	80003e8 <__udivmoddi4+0x9c>
 800049c:	f1c1 0620 	rsb	r6, r1, #32
 80004a0:	408b      	lsls	r3, r1
 80004a2:	fa22 f706 	lsr.w	r7, r2, r6
 80004a6:	431f      	orrs	r7, r3
 80004a8:	fa20 fc06 	lsr.w	ip, r0, r6
 80004ac:	fa04 f301 	lsl.w	r3, r4, r1
 80004b0:	ea43 030c 	orr.w	r3, r3, ip
 80004b4:	40f4      	lsrs	r4, r6
 80004b6:	fa00 f801 	lsl.w	r8, r0, r1
 80004ba:	0c38      	lsrs	r0, r7, #16
 80004bc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c0:	fbb4 fef0 	udiv	lr, r4, r0
 80004c4:	fa1f fc87 	uxth.w	ip, r7
 80004c8:	fb00 441e 	mls	r4, r0, lr, r4
 80004cc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d0:	fb0e f90c 	mul.w	r9, lr, ip
 80004d4:	45a1      	cmp	r9, r4
 80004d6:	fa02 f201 	lsl.w	r2, r2, r1
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x1a6>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004e2:	f080 8084 	bcs.w	80005ee <__udivmoddi4+0x2a2>
 80004e6:	45a1      	cmp	r9, r4
 80004e8:	f240 8081 	bls.w	80005ee <__udivmoddi4+0x2a2>
 80004ec:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	eba4 0409 	sub.w	r4, r4, r9
 80004f6:	fa1f f983 	uxth.w	r9, r3
 80004fa:	fbb4 f3f0 	udiv	r3, r4, r0
 80004fe:	fb00 4413 	mls	r4, r0, r3, r4
 8000502:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000506:	fb03 fc0c 	mul.w	ip, r3, ip
 800050a:	45a4      	cmp	ip, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x1d2>
 800050e:	193c      	adds	r4, r7, r4
 8000510:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000514:	d267      	bcs.n	80005e6 <__udivmoddi4+0x29a>
 8000516:	45a4      	cmp	ip, r4
 8000518:	d965      	bls.n	80005e6 <__udivmoddi4+0x29a>
 800051a:	3b02      	subs	r3, #2
 800051c:	443c      	add	r4, r7
 800051e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000522:	fba0 9302 	umull	r9, r3, r0, r2
 8000526:	eba4 040c 	sub.w	r4, r4, ip
 800052a:	429c      	cmp	r4, r3
 800052c:	46ce      	mov	lr, r9
 800052e:	469c      	mov	ip, r3
 8000530:	d351      	bcc.n	80005d6 <__udivmoddi4+0x28a>
 8000532:	d04e      	beq.n	80005d2 <__udivmoddi4+0x286>
 8000534:	b155      	cbz	r5, 800054c <__udivmoddi4+0x200>
 8000536:	ebb8 030e 	subs.w	r3, r8, lr
 800053a:	eb64 040c 	sbc.w	r4, r4, ip
 800053e:	fa04 f606 	lsl.w	r6, r4, r6
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431e      	orrs	r6, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	e9c5 6400 	strd	r6, r4, [r5]
 800054c:	2100      	movs	r1, #0
 800054e:	e750      	b.n	80003f2 <__udivmoddi4+0xa6>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f103 	lsr.w	r1, r0, r3
 8000558:	fa0c fc02 	lsl.w	ip, ip, r2
 800055c:	fa24 f303 	lsr.w	r3, r4, r3
 8000560:	4094      	lsls	r4, r2
 8000562:	430c      	orrs	r4, r1
 8000564:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000568:	fa00 fe02 	lsl.w	lr, r0, r2
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	fbb3 f0f8 	udiv	r0, r3, r8
 8000574:	fb08 3110 	mls	r1, r8, r0, r3
 8000578:	0c23      	lsrs	r3, r4, #16
 800057a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057e:	fb00 f107 	mul.w	r1, r0, r7
 8000582:	4299      	cmp	r1, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x24c>
 8000586:	eb1c 0303 	adds.w	r3, ip, r3
 800058a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800058e:	d22c      	bcs.n	80005ea <__udivmoddi4+0x29e>
 8000590:	4299      	cmp	r1, r3
 8000592:	d92a      	bls.n	80005ea <__udivmoddi4+0x29e>
 8000594:	3802      	subs	r0, #2
 8000596:	4463      	add	r3, ip
 8000598:	1a5b      	subs	r3, r3, r1
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a0:	fb08 3311 	mls	r3, r8, r1, r3
 80005a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005a8:	fb01 f307 	mul.w	r3, r1, r7
 80005ac:	42a3      	cmp	r3, r4
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x276>
 80005b0:	eb1c 0404 	adds.w	r4, ip, r4
 80005b4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005b8:	d213      	bcs.n	80005e2 <__udivmoddi4+0x296>
 80005ba:	42a3      	cmp	r3, r4
 80005bc:	d911      	bls.n	80005e2 <__udivmoddi4+0x296>
 80005be:	3902      	subs	r1, #2
 80005c0:	4464      	add	r4, ip
 80005c2:	1ae4      	subs	r4, r4, r3
 80005c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005c8:	e739      	b.n	800043e <__udivmoddi4+0xf2>
 80005ca:	4604      	mov	r4, r0
 80005cc:	e6f0      	b.n	80003b0 <__udivmoddi4+0x64>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e706      	b.n	80003e0 <__udivmoddi4+0x94>
 80005d2:	45c8      	cmp	r8, r9
 80005d4:	d2ae      	bcs.n	8000534 <__udivmoddi4+0x1e8>
 80005d6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005da:	eb63 0c07 	sbc.w	ip, r3, r7
 80005de:	3801      	subs	r0, #1
 80005e0:	e7a8      	b.n	8000534 <__udivmoddi4+0x1e8>
 80005e2:	4631      	mov	r1, r6
 80005e4:	e7ed      	b.n	80005c2 <__udivmoddi4+0x276>
 80005e6:	4603      	mov	r3, r0
 80005e8:	e799      	b.n	800051e <__udivmoddi4+0x1d2>
 80005ea:	4630      	mov	r0, r6
 80005ec:	e7d4      	b.n	8000598 <__udivmoddi4+0x24c>
 80005ee:	46d6      	mov	lr, sl
 80005f0:	e77f      	b.n	80004f2 <__udivmoddi4+0x1a6>
 80005f2:	4463      	add	r3, ip
 80005f4:	3802      	subs	r0, #2
 80005f6:	e74d      	b.n	8000494 <__udivmoddi4+0x148>
 80005f8:	4606      	mov	r6, r0
 80005fa:	4623      	mov	r3, r4
 80005fc:	4608      	mov	r0, r1
 80005fe:	e70f      	b.n	8000420 <__udivmoddi4+0xd4>
 8000600:	3e02      	subs	r6, #2
 8000602:	4463      	add	r3, ip
 8000604:	e730      	b.n	8000468 <__udivmoddi4+0x11c>
 8000606:	bf00      	nop

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <GetSector>:
// There are 2 BANKS available for H745, BANK 1 (0x0800 0000 - 0x080F FFFF) and BANK 2 (0x0810 0000 - 0x080F FFFF)
// Both of them have Sectors 0 to 7.
// We will define the sectors in normal way (like Defined below), and later the BANK will be taken care by the HAL

static uint32_t GetSector(uint32_t Address)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]

  /* BANK 1 */
  if((Address >= 0x08000000) && (Address < 0x08020000))
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800061e:	d306      	bcc.n	800062e <GetSector+0x22>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a2c      	ldr	r2, [pc, #176]	@ (80006d4 <GetSector+0xc8>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d802      	bhi.n	800062e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e04b      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x08020000) && (Address < 0x08040000))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a28      	ldr	r2, [pc, #160]	@ (80006d4 <GetSector+0xc8>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d906      	bls.n	8000644 <GetSector+0x38>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <GetSector+0xcc>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d802      	bhi.n	8000644 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800063e:	2301      	movs	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e040      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x08040000) && (Address < 0x08060000))
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <GetSector+0xcc>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d906      	bls.n	800065a <GetSector+0x4e>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a23      	ldr	r2, [pc, #140]	@ (80006dc <GetSector+0xd0>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d802      	bhi.n	800065a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000654:	2302      	movs	r3, #2
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	e035      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x08060000) && (Address < 0x08080000))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <GetSector+0xd0>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d906      	bls.n	8000670 <GetSector+0x64>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a1e      	ldr	r2, [pc, #120]	@ (80006e0 <GetSector+0xd4>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d802      	bhi.n	8000670 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800066a:	2303      	movs	r3, #3
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	e02a      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x08080000) && (Address < 0x080A0000))
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <GetSector+0xd4>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d906      	bls.n	8000686 <GetSector+0x7a>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a1a      	ldr	r2, [pc, #104]	@ (80006e4 <GetSector+0xd8>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d802      	bhi.n	8000686 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000680:	2304      	movs	r3, #4
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e01f      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x080A0000) && (Address < 0x080C0000))
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <GetSector+0xd8>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d906      	bls.n	800069c <GetSector+0x90>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a15      	ldr	r2, [pc, #84]	@ (80006e8 <GetSector+0xdc>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d802      	bhi.n	800069c <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000696:	2305      	movs	r3, #5
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e014      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x080C0000) && (Address < 0x080E0000))
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <GetSector+0xdc>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d906      	bls.n	80006b2 <GetSector+0xa6>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a11      	ldr	r2, [pc, #68]	@ (80006ec <GetSector+0xe0>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d802      	bhi.n	80006b2 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80006ac:	2306      	movs	r3, #6
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e009      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x080E0000) && (Address < 0x08100000))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <GetSector+0xe0>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d905      	bls.n	80006c6 <GetSector+0xba>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80006c0:	d201      	bcs.n	80006c6 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80006c2:	2307      	movs	r3, #7
 80006c4:	60fb      	str	r3, [r7, #12]
  else if((Address >= 0x081E0000) && (Address < 0x08200000))
  {
    sector = FLASH_SECTOR_7;
  } */

  return sector;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	0801ffff 	.word	0x0801ffff
 80006d8:	0803ffff 	.word	0x0803ffff
 80006dc:	0805ffff 	.word	0x0805ffff
 80006e0:	0807ffff 	.word	0x0807ffff
 80006e4:	0809ffff 	.word	0x0809ffff
 80006e8:	080bffff 	.word	0x080bffff
 80006ec:	080dffff 	.word	0x080dffff

080006f0 <Flash_Write_Data>:
*          - 256 bits for STM32H72x/3X devices (8x 32bits words)
*
*/

uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *data, uint16_t numberofwords)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	4613      	mov	r3, r2
 80006fc:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24

	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8000702:	f003 ff69 	bl	80045d8 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f7ff ff80 	bl	800060c <GetSector>
 800070c:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 800071a:	69f8      	ldr	r0, [r7, #28]
 800071c:	f7ff ff76 	bl	800060c <GetSector>
 8000720:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000722:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <Flash_Write_Data+0xbc>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000728:	4b20      	ldr	r3, [pc, #128]	@ (80007ac <Flash_Write_Data+0xbc>)
 800072a:	2220      	movs	r2, #32
 800072c:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800072e:	4a1f      	ldr	r2, [pc, #124]	@ (80007ac <Flash_Write_Data+0xbc>)
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	6093      	str	r3, [r2, #8]

	  // The the proper BANK to erase the Sector
	  if (StartSectorAddress < 0x08100000)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800073a:	d202      	bcs.n	8000742 <Flash_Write_Data+0x52>
		  EraseInitStruct.Banks     = FLASH_BANK_1;
 800073c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ac <Flash_Write_Data+0xbc>)
 800073e:	2201      	movs	r2, #1
 8000740:	605a      	str	r2, [r3, #4]
//	  else EraseInitStruct.Banks    = FLASH_BANK_2;

	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8000742:	69ba      	ldr	r2, [r7, #24]
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	3301      	adds	r3, #1
 800074a:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <Flash_Write_Data+0xbc>)
 800074c:	60d3      	str	r3, [r2, #12]


	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4815      	ldr	r0, [pc, #84]	@ (80007ac <Flash_Write_Data+0xbc>)
 8000756:	f003 ffdb 	bl	8004710 <HAL_FLASHEx_Erase>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d01a      	beq.n	8000796 <Flash_Write_Data+0xa6>
	  {
		  return HAL_FLASH_GetError();
 8000760:	f003 ff74 	bl	800464c <HAL_FLASH_GetError>
 8000764:	4603      	mov	r3, r0
 8000766:	e01d      	b.n	80007a4 <Flash_Write_Data+0xb4>
	  /* Program the user Flash area 8 WORDS at a time
	   * (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, StartSectorAddress, (uint32_t ) &data[sofar]) == HAL_OK)
 8000768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	68ba      	ldr	r2, [r7, #8]
 800076e:	4413      	add	r3, r2
 8000770:	461a      	mov	r2, r3
 8000772:	68f9      	ldr	r1, [r7, #12]
 8000774:	2001      	movs	r0, #1
 8000776:	f003 febf 	bl	80044f8 <HAL_FLASH_Program>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d106      	bne.n	800078e <Flash_Write_Data+0x9e>
	     {
	    	 StartSectorAddress += 4*FLASHWORD;  //
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3320      	adds	r3, #32
 8000784:	60fb      	str	r3, [r7, #12]
	    	 sofar+=FLASHWORD;
 8000786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000788:	3308      	adds	r3, #8
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
 800078c:	e003      	b.n	8000796 <Flash_Write_Data+0xa6>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800078e:	f003 ff5d 	bl	800464c <HAL_FLASH_GetError>
 8000792:	4603      	mov	r3, r0
 8000794:	e006      	b.n	80007a4 <Flash_Write_Data+0xb4>
	   while (sofar<numberofwords)
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800079a:	429a      	cmp	r2, r3
 800079c:	dbe4      	blt.n	8000768 <Flash_Write_Data+0x78>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800079e:	f003 ff3d 	bl	800461c <HAL_FLASH_Lock>

	   return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3728      	adds	r7, #40	@ 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2400002c 	.word	0x2400002c

080007b0 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *data, uint16_t numberofwords)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	4613      	mov	r3, r2
 80007bc:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		*data = *(__IO uint32_t *)StartSectorAddress;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3304      	adds	r3, #4
 80007ca:	60fb      	str	r3, [r7, #12]
		data++;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	3304      	adds	r3, #4
 80007d0:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	80fa      	strh	r2, [r7, #6]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d000      	beq.n	80007de <Flash_Read_Data+0x2e>
		*data = *(__IO uint32_t *)StartSectorAddress;
 80007dc:	e7ef      	b.n	80007be <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <Convert_To_Str>:

int Convert_To_Str (uint32_t *Data, char *Buf)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)Data)/4) + ((strlen((char *)Data) % 4) != 0)) *4;
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff fd88 	bl	800030c <strlen>
 80007fc:	4603      	mov	r3, r0
 80007fe:	089c      	lsrs	r4, r3, #2
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fd83 	bl	800030c <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4423      	add	r3, r4
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	e01b      	b.n	800085a <Convert_To_Str+0x6e>
	{
		Buf[i] = Data[i/4]>>(8*(i%4));
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2b00      	cmp	r3, #0
 8000826:	da00      	bge.n	800082a <Convert_To_Str+0x3e>
 8000828:	3303      	adds	r3, #3
 800082a:	109b      	asrs	r3, r3, #2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4259      	negs	r1, r3
 8000838:	f003 0303 	and.w	r3, r3, #3
 800083c:	f001 0103 	and.w	r1, r1, #3
 8000840:	bf58      	it	pl
 8000842:	424b      	negpl	r3, r1
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	fa22 f103 	lsr.w	r1, r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	4413      	add	r3, r2
 8000850:	b2ca      	uxtb	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3301      	adds	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	429a      	cmp	r2, r3
 8000860:	dbdf      	blt.n	8000822 <Convert_To_Str+0x36>
	}

	return numberofbytes;
 8000862:	68bb      	ldr	r3, [r7, #8]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}

0800086c <HAL_UARTEx_RxEventCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	807b      	strh	r3, [r7, #2]
	UNUSED(Size);

	/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
	 */
	temp = Size;
 8000878:	887b      	ldrh	r3, [r7, #2]
 800087a:	4a07      	ldr	r2, [pc, #28]	@ (8000898 <HAL_UARTEx_RxEventCallback+0x2c>)
 800087c:	6013      	str	r3, [r2, #0]

	if(Size != BUFFER_SIZE)
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000884:	d002      	beq.n	800088c <HAL_UARTEx_RxEventCallback+0x20>
		data_reception_complete = 1;
 8000886:	4b05      	ldr	r3, [pc, #20]	@ (800089c <HAL_UARTEx_RxEventCallback+0x30>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
//	else if(Size == BUFFER_SIZE)
//		buf_overflow = 1;
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	24000d60 	.word	0x24000d60
 800089c:	24000d4f 	.word	0x24000d4f

080008a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008a6:	f000 fe8f 	bl	80015c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008aa:	f000 fa3d 	bl	8000d28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008ae:	f000 fb17 	bl	8000ee0 <MX_GPIO_Init>
	MX_DMA_Init();
 80008b2:	f000 faf5 	bl	8000ea0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80008b6:	f000 faa7 	bl	8000e08 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 80008ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008be:	f000 fedf 	bl	8001680 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"Start\n", 6, 100);
 80008c2:	2364      	movs	r3, #100	@ 0x64
 80008c4:	2206      	movs	r2, #6
 80008c6:	4990      	ldr	r1, [pc, #576]	@ (8000b08 <main+0x268>)
 80008c8:	4890      	ldr	r0, [pc, #576]	@ (8000b0c <main+0x26c>)
 80008ca:	f007 fa93 	bl	8007df4 <HAL_UART_Transmit>
	/* USER CODE BEGIN WHILE */



	// Set array to NULL
	memset(received_data, '\0', BUFFER_SIZE);
 80008ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008d2:	2100      	movs	r1, #0
 80008d4:	488e      	ldr	r0, [pc, #568]	@ (8000b10 <main+0x270>)
 80008d6:	f009 fb1b 	bl	8009f10 <memset>
	memset(tx_data, '\0', STRING_BUFFER_SIZE);
 80008da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008de:	2100      	movs	r1, #0
 80008e0:	488c      	ldr	r0, [pc, #560]	@ (8000b14 <main+0x274>)
 80008e2:	f009 fb15 	bl	8009f10 <memset>

	// Trigger Receive DMA
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, received_data, BUFFER_SIZE);
 80008e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008ea:	4989      	ldr	r1, [pc, #548]	@ (8000b10 <main+0x270>)
 80008ec:	4887      	ldr	r0, [pc, #540]	@ (8000b0c <main+0x26c>)
 80008ee:	f009 fa6c 	bl	8009dca <HAL_UARTEx_ReceiveToIdle_DMA>
	// Disable half transfer complete IRQ
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80008f2:	4b89      	ldr	r3, [pc, #548]	@ (8000b18 <main+0x278>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a89      	ldr	r2, [pc, #548]	@ (8000b1c <main+0x27c>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d04a      	beq.n	8000992 <main+0xf2>
 80008fc:	4b86      	ldr	r3, [pc, #536]	@ (8000b18 <main+0x278>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a87      	ldr	r2, [pc, #540]	@ (8000b20 <main+0x280>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d045      	beq.n	8000992 <main+0xf2>
 8000906:	4b84      	ldr	r3, [pc, #528]	@ (8000b18 <main+0x278>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a86      	ldr	r2, [pc, #536]	@ (8000b24 <main+0x284>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d040      	beq.n	8000992 <main+0xf2>
 8000910:	4b81      	ldr	r3, [pc, #516]	@ (8000b18 <main+0x278>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a84      	ldr	r2, [pc, #528]	@ (8000b28 <main+0x288>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d03b      	beq.n	8000992 <main+0xf2>
 800091a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b18 <main+0x278>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a83      	ldr	r2, [pc, #524]	@ (8000b2c <main+0x28c>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d036      	beq.n	8000992 <main+0xf2>
 8000924:	4b7c      	ldr	r3, [pc, #496]	@ (8000b18 <main+0x278>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a81      	ldr	r2, [pc, #516]	@ (8000b30 <main+0x290>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d031      	beq.n	8000992 <main+0xf2>
 800092e:	4b7a      	ldr	r3, [pc, #488]	@ (8000b18 <main+0x278>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a80      	ldr	r2, [pc, #512]	@ (8000b34 <main+0x294>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d02c      	beq.n	8000992 <main+0xf2>
 8000938:	4b77      	ldr	r3, [pc, #476]	@ (8000b18 <main+0x278>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a7e      	ldr	r2, [pc, #504]	@ (8000b38 <main+0x298>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d027      	beq.n	8000992 <main+0xf2>
 8000942:	4b75      	ldr	r3, [pc, #468]	@ (8000b18 <main+0x278>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a7d      	ldr	r2, [pc, #500]	@ (8000b3c <main+0x29c>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d022      	beq.n	8000992 <main+0xf2>
 800094c:	4b72      	ldr	r3, [pc, #456]	@ (8000b18 <main+0x278>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a7b      	ldr	r2, [pc, #492]	@ (8000b40 <main+0x2a0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d01d      	beq.n	8000992 <main+0xf2>
 8000956:	4b70      	ldr	r3, [pc, #448]	@ (8000b18 <main+0x278>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a7a      	ldr	r2, [pc, #488]	@ (8000b44 <main+0x2a4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d018      	beq.n	8000992 <main+0xf2>
 8000960:	4b6d      	ldr	r3, [pc, #436]	@ (8000b18 <main+0x278>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a78      	ldr	r2, [pc, #480]	@ (8000b48 <main+0x2a8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d013      	beq.n	8000992 <main+0xf2>
 800096a:	4b6b      	ldr	r3, [pc, #428]	@ (8000b18 <main+0x278>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a77      	ldr	r2, [pc, #476]	@ (8000b4c <main+0x2ac>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d00e      	beq.n	8000992 <main+0xf2>
 8000974:	4b68      	ldr	r3, [pc, #416]	@ (8000b18 <main+0x278>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a75      	ldr	r2, [pc, #468]	@ (8000b50 <main+0x2b0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d009      	beq.n	8000992 <main+0xf2>
 800097e:	4b66      	ldr	r3, [pc, #408]	@ (8000b18 <main+0x278>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a74      	ldr	r2, [pc, #464]	@ (8000b54 <main+0x2b4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d004      	beq.n	8000992 <main+0xf2>
 8000988:	4b63      	ldr	r3, [pc, #396]	@ (8000b18 <main+0x278>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a72      	ldr	r2, [pc, #456]	@ (8000b58 <main+0x2b8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d108      	bne.n	80009a4 <main+0x104>
 8000992:	4b61      	ldr	r3, [pc, #388]	@ (8000b18 <main+0x278>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b5f      	ldr	r3, [pc, #380]	@ (8000b18 <main+0x278>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f022 0208 	bic.w	r2, r2, #8
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	e007      	b.n	80009b4 <main+0x114>
 80009a4:	4b5c      	ldr	r3, [pc, #368]	@ (8000b18 <main+0x278>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b5b      	ldr	r3, [pc, #364]	@ (8000b18 <main+0x278>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f022 0204 	bic.w	r2, r2, #4
 80009b2:	601a      	str	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		while((received_data[receive_buffer_index + previous_received_data_size] != '\0') && ((receive_buffer_index + previous_received_data_size) < BUFFER_SIZE))
 80009b4:	e045      	b.n	8000a42 <main+0x1a2>
		{
			// Save received uint8_t character in uint32_t variable
			flash_tx_data |= (uint32_t)received_data[receive_buffer_index + previous_received_data_size] << (8 * local_count);
 80009b6:	4b69      	ldr	r3, [pc, #420]	@ (8000b5c <main+0x2bc>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b69      	ldr	r3, [pc, #420]	@ (8000b60 <main+0x2c0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a53      	ldr	r2, [pc, #332]	@ (8000b10 <main+0x270>)
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b67      	ldr	r3, [pc, #412]	@ (8000b64 <main+0x2c4>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	409a      	lsls	r2, r3
 80009ce:	4b66      	ldr	r3, [pc, #408]	@ (8000b68 <main+0x2c8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	4a64      	ldr	r2, [pc, #400]	@ (8000b68 <main+0x2c8>)
 80009d6:	6013      	str	r3, [r2, #0]

			if(local_count == 3)
 80009d8:	4b62      	ldr	r3, [pc, #392]	@ (8000b64 <main+0x2c4>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d125      	bne.n	8000a2c <main+0x18c>
			{
				local_count = 0;
 80009e0:	4b60      	ldr	r3, [pc, #384]	@ (8000b64 <main+0x2c4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]

				// Read data from FLASH
				Flash_Read_Data(0x08060000, flash_rx_data, total_number_of_words);
 80009e6:	4b61      	ldr	r3, [pc, #388]	@ (8000b6c <main+0x2cc>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a61      	ldr	r2, [pc, #388]	@ (8000b70 <main+0x2d0>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	4619      	mov	r1, r3
 80009f0:	4860      	ldr	r0, [pc, #384]	@ (8000b74 <main+0x2d4>)
 80009f2:	f7ff fedd 	bl	80007b0 <Flash_Read_Data>

				*(flash_rx_data + total_number_of_words) = flash_tx_data;
 80009f6:	4b5d      	ldr	r3, [pc, #372]	@ (8000b6c <main+0x2cc>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4b5d      	ldr	r3, [pc, #372]	@ (8000b70 <main+0x2d0>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	4a59      	ldr	r2, [pc, #356]	@ (8000b68 <main+0x2c8>)
 8000a04:	6812      	ldr	r2, [r2, #0]
 8000a06:	601a      	str	r2, [r3, #0]
				total_number_of_words++;
 8000a08:	4b59      	ldr	r3, [pc, #356]	@ (8000b70 <main+0x2d0>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4b57      	ldr	r3, [pc, #348]	@ (8000b70 <main+0x2d0>)
 8000a12:	801a      	strh	r2, [r3, #0]

				// Write data into FLASH
				Flash_Write_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000a14:	4b55      	ldr	r3, [pc, #340]	@ (8000b6c <main+0x2cc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a55      	ldr	r2, [pc, #340]	@ (8000b70 <main+0x2d0>)
 8000a1a:	8812      	ldrh	r2, [r2, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4855      	ldr	r0, [pc, #340]	@ (8000b74 <main+0x2d4>)
 8000a20:	f7ff fe66 	bl	80006f0 <Flash_Write_Data>



				flash_tx_data = 0;
 8000a24:	4b50      	ldr	r3, [pc, #320]	@ (8000b68 <main+0x2c8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	e005      	b.n	8000a38 <main+0x198>
			}
			else
				local_count++;
 8000a2c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b64 <main+0x2c4>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b4b      	ldr	r3, [pc, #300]	@ (8000b64 <main+0x2c4>)
 8000a36:	701a      	strb	r2, [r3, #0]

			// Increment receive_buffer_index
//			receive_buffer_index++;

			receive_buffer_index++;
 8000a38:	4b48      	ldr	r3, [pc, #288]	@ (8000b5c <main+0x2bc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	4a47      	ldr	r2, [pc, #284]	@ (8000b5c <main+0x2bc>)
 8000a40:	6013      	str	r3, [r2, #0]
		while((received_data[receive_buffer_index + previous_received_data_size] != '\0') && ((receive_buffer_index + previous_received_data_size) < BUFFER_SIZE))
 8000a42:	4b46      	ldr	r3, [pc, #280]	@ (8000b5c <main+0x2bc>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4b46      	ldr	r3, [pc, #280]	@ (8000b60 <main+0x2c0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a30      	ldr	r2, [pc, #192]	@ (8000b10 <main+0x270>)
 8000a4e:	5cd3      	ldrb	r3, [r2, r3]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d007      	beq.n	8000a64 <main+0x1c4>
 8000a54:	4b41      	ldr	r3, [pc, #260]	@ (8000b5c <main+0x2bc>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b41      	ldr	r3, [pc, #260]	@ (8000b60 <main+0x2c0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000a62:	d3a8      	bcc.n	80009b6 <main+0x116>
//			main_buffer_index++;
		}

		if(flash_tx_data != 0)
 8000a64:	4b40      	ldr	r3, [pc, #256]	@ (8000b68 <main+0x2c8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d021      	beq.n	8000ab0 <main+0x210>
		{
//			local_count = 0;

			// Read data from FLASH
			Flash_Read_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000a6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b6c <main+0x2cc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a3f      	ldr	r2, [pc, #252]	@ (8000b70 <main+0x2d0>)
 8000a72:	8812      	ldrh	r2, [r2, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	483f      	ldr	r0, [pc, #252]	@ (8000b74 <main+0x2d4>)
 8000a78:	f7ff fe9a 	bl	80007b0 <Flash_Read_Data>

			*(flash_rx_data + total_number_of_words) = flash_tx_data;
 8000a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b6c <main+0x2cc>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <main+0x2d0>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	4a37      	ldr	r2, [pc, #220]	@ (8000b68 <main+0x2c8>)
 8000a8a:	6812      	ldr	r2, [r2, #0]
 8000a8c:	601a      	str	r2, [r3, #0]
			total_number_of_words++;
 8000a8e:	4b38      	ldr	r3, [pc, #224]	@ (8000b70 <main+0x2d0>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b36      	ldr	r3, [pc, #216]	@ (8000b70 <main+0x2d0>)
 8000a98:	801a      	strh	r2, [r3, #0]

			// Write data into FLASH
			Flash_Write_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000a9a:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <main+0x2cc>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a34      	ldr	r2, [pc, #208]	@ (8000b70 <main+0x2d0>)
 8000aa0:	8812      	ldrh	r2, [r2, #0]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4833      	ldr	r0, [pc, #204]	@ (8000b74 <main+0x2d4>)
 8000aa6:	f7ff fe23 	bl	80006f0 <Flash_Write_Data>

			flash_tx_data = 0;
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8000b68 <main+0x2c8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
		}

		if(data_reception_complete)
 8000ab0:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <main+0x2d8>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 80d7 	beq.w	8000c6a <main+0x3ca>
		{
			data_reception_complete = 0;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b78 <main+0x2d8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]

			data_copying_complete = 1;
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b7c <main+0x2dc>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
			received_data_length = receive_buffer_index;
 8000ac8:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <main+0x2bc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a2c      	ldr	r2, [pc, #176]	@ (8000b80 <main+0x2e0>)
 8000ace:	6013      	str	r3, [r2, #0]

			receive_buffer_index = 0;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <main+0x2bc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
			main_buffer_index = 0;
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <main+0x2e4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]

			memset(received_data, '\0', BUFFER_SIZE);
 8000adc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	480b      	ldr	r0, [pc, #44]	@ (8000b10 <main+0x270>)
 8000ae4:	f009 fa14 	bl	8009f10 <memset>
//			memset(buffer, '\0', BUFFER_SIZE);

			previous_received_data_size = temp;
 8000ae8:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <main+0x2e8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1c      	ldr	r2, [pc, #112]	@ (8000b60 <main+0x2c0>)
 8000aee:	6013      	str	r3, [r2, #0]
			if(previous_received_data_size > BUFFER_SIZE)
 8000af0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <main+0x2c0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000af8:	d948      	bls.n	8000b8c <main+0x2ec>
				previous_received_data_size = previous_received_data_size - BUFFER_SIZE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <main+0x2c0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b02:	4a17      	ldr	r2, [pc, #92]	@ (8000b60 <main+0x2c0>)
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	e049      	b.n	8000b9c <main+0x2fc>
 8000b08:	08009f80 	.word	0x08009f80
 8000b0c:	24000040 	.word	0x24000040
 8000b10:	2400014c 	.word	0x2400014c
 8000b14:	2400094c 	.word	0x2400094c
 8000b18:	240000d4 	.word	0x240000d4
 8000b1c:	40020010 	.word	0x40020010
 8000b20:	40020028 	.word	0x40020028
 8000b24:	40020040 	.word	0x40020040
 8000b28:	40020058 	.word	0x40020058
 8000b2c:	40020070 	.word	0x40020070
 8000b30:	40020088 	.word	0x40020088
 8000b34:	400200a0 	.word	0x400200a0
 8000b38:	400200b8 	.word	0x400200b8
 8000b3c:	40020410 	.word	0x40020410
 8000b40:	40020428 	.word	0x40020428
 8000b44:	40020440 	.word	0x40020440
 8000b48:	40020458 	.word	0x40020458
 8000b4c:	40020470 	.word	0x40020470
 8000b50:	40020488 	.word	0x40020488
 8000b54:	400204a0 	.word	0x400204a0
 8000b58:	400204b8 	.word	0x400204b8
 8000b5c:	24000d54 	.word	0x24000d54
 8000b60:	24000d5c 	.word	0x24000d5c
 8000b64:	24000d4e 	.word	0x24000d4e
 8000b68:	24000d68 	.word	0x24000d68
 8000b6c:	24000d6c 	.word	0x24000d6c
 8000b70:	24000d4c 	.word	0x24000d4c
 8000b74:	08060000 	.word	0x08060000
 8000b78:	24000d4f 	.word	0x24000d4f
 8000b7c:	24000d50 	.word	0x24000d50
 8000b80:	24000d64 	.word	0x24000d64
 8000b84:	24000d58 	.word	0x24000d58
 8000b88:	24000d60 	.word	0x24000d60
			else if(previous_received_data_size == BUFFER_SIZE)
 8000b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc4 <main+0x424>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b94:	d102      	bne.n	8000b9c <main+0x2fc>
				previous_received_data_size = 0;
 8000b96:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc4 <main+0x424>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]

			// Trigger Receive DMA
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, &received_data[0], BUFFER_SIZE);
 8000b9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ba0:	4949      	ldr	r1, [pc, #292]	@ (8000cc8 <main+0x428>)
 8000ba2:	484a      	ldr	r0, [pc, #296]	@ (8000ccc <main+0x42c>)
 8000ba4:	f009 f911 	bl	8009dca <HAL_UARTEx_ReceiveToIdle_DMA>
			// Disable half transfer complete IRQ
			__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000ba8:	4b49      	ldr	r3, [pc, #292]	@ (8000cd0 <main+0x430>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a49      	ldr	r2, [pc, #292]	@ (8000cd4 <main+0x434>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d04a      	beq.n	8000c48 <main+0x3a8>
 8000bb2:	4b47      	ldr	r3, [pc, #284]	@ (8000cd0 <main+0x430>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a48      	ldr	r2, [pc, #288]	@ (8000cd8 <main+0x438>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d045      	beq.n	8000c48 <main+0x3a8>
 8000bbc:	4b44      	ldr	r3, [pc, #272]	@ (8000cd0 <main+0x430>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a46      	ldr	r2, [pc, #280]	@ (8000cdc <main+0x43c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d040      	beq.n	8000c48 <main+0x3a8>
 8000bc6:	4b42      	ldr	r3, [pc, #264]	@ (8000cd0 <main+0x430>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a45      	ldr	r2, [pc, #276]	@ (8000ce0 <main+0x440>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d03b      	beq.n	8000c48 <main+0x3a8>
 8000bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd0 <main+0x430>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a43      	ldr	r2, [pc, #268]	@ (8000ce4 <main+0x444>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d036      	beq.n	8000c48 <main+0x3a8>
 8000bda:	4b3d      	ldr	r3, [pc, #244]	@ (8000cd0 <main+0x430>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a42      	ldr	r2, [pc, #264]	@ (8000ce8 <main+0x448>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d031      	beq.n	8000c48 <main+0x3a8>
 8000be4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd0 <main+0x430>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a40      	ldr	r2, [pc, #256]	@ (8000cec <main+0x44c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d02c      	beq.n	8000c48 <main+0x3a8>
 8000bee:	4b38      	ldr	r3, [pc, #224]	@ (8000cd0 <main+0x430>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a3f      	ldr	r2, [pc, #252]	@ (8000cf0 <main+0x450>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d027      	beq.n	8000c48 <main+0x3a8>
 8000bf8:	4b35      	ldr	r3, [pc, #212]	@ (8000cd0 <main+0x430>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a3d      	ldr	r2, [pc, #244]	@ (8000cf4 <main+0x454>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d022      	beq.n	8000c48 <main+0x3a8>
 8000c02:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <main+0x430>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a3c      	ldr	r2, [pc, #240]	@ (8000cf8 <main+0x458>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d01d      	beq.n	8000c48 <main+0x3a8>
 8000c0c:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <main+0x430>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a3a      	ldr	r2, [pc, #232]	@ (8000cfc <main+0x45c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d018      	beq.n	8000c48 <main+0x3a8>
 8000c16:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <main+0x430>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a39      	ldr	r2, [pc, #228]	@ (8000d00 <main+0x460>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d013      	beq.n	8000c48 <main+0x3a8>
 8000c20:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <main+0x430>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a37      	ldr	r2, [pc, #220]	@ (8000d04 <main+0x464>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d00e      	beq.n	8000c48 <main+0x3a8>
 8000c2a:	4b29      	ldr	r3, [pc, #164]	@ (8000cd0 <main+0x430>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a36      	ldr	r2, [pc, #216]	@ (8000d08 <main+0x468>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d009      	beq.n	8000c48 <main+0x3a8>
 8000c34:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <main+0x430>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a34      	ldr	r2, [pc, #208]	@ (8000d0c <main+0x46c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d004      	beq.n	8000c48 <main+0x3a8>
 8000c3e:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <main+0x430>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a33      	ldr	r2, [pc, #204]	@ (8000d10 <main+0x470>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d108      	bne.n	8000c5a <main+0x3ba>
 8000c48:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <main+0x430>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b20      	ldr	r3, [pc, #128]	@ (8000cd0 <main+0x430>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0208 	bic.w	r2, r2, #8
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e007      	b.n	8000c6a <main+0x3ca>
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <main+0x430>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <main+0x430>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 0204 	bic.w	r2, r2, #4
 8000c68:	601a      	str	r2, [r3, #0]
		}

		if(data_copying_complete)
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <main+0x474>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d024      	beq.n	8000cbc <main+0x41c>
		{
//			uint32_t i = 0;
			int numberofbytes = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]

			data_copying_complete = 0;
 8000c76:	4b27      	ldr	r3, [pc, #156]	@ (8000d14 <main+0x474>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]

			// Read data from FLASH
			Flash_Read_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000c7c:	4b26      	ldr	r3, [pc, #152]	@ (8000d18 <main+0x478>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a26      	ldr	r2, [pc, #152]	@ (8000d1c <main+0x47c>)
 8000c82:	8812      	ldrh	r2, [r2, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	4826      	ldr	r0, [pc, #152]	@ (8000d20 <main+0x480>)
 8000c88:	f7ff fd92 	bl	80007b0 <Flash_Read_Data>

			numberofbytes = Convert_To_Str(flash_rx_data, tx_data);
 8000c8c:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <main+0x478>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4924      	ldr	r1, [pc, #144]	@ (8000d24 <main+0x484>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fdaa 	bl	80007ec <Convert_To_Str>
 8000c98:	6078      	str	r0, [r7, #4]

			HAL_UART_Transmit(&huart2, (uint8_t *)&tx_data[0], numberofbytes, HAL_MAX_DELAY);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca2:	4920      	ldr	r1, [pc, #128]	@ (8000d24 <main+0x484>)
 8000ca4:	4809      	ldr	r0, [pc, #36]	@ (8000ccc <main+0x42c>)
 8000ca6:	f007 f8a5 	bl	8007df4 <HAL_UART_Transmit>

			memset(tx_data, '\0', STRING_BUFFER_SIZE);
 8000caa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cae:	2100      	movs	r1, #0
 8000cb0:	481c      	ldr	r0, [pc, #112]	@ (8000d24 <main+0x484>)
 8000cb2:	f009 f92d 	bl	8009f10 <memset>

			total_number_of_words = 0;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <main+0x47c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	801a      	strh	r2, [r3, #0]
		}

		HAL_Delay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f000 fcdf 	bl	8001680 <HAL_Delay>
		while((received_data[receive_buffer_index + previous_received_data_size] != '\0') && ((receive_buffer_index + previous_received_data_size) < BUFFER_SIZE))
 8000cc2:	e6be      	b.n	8000a42 <main+0x1a2>
 8000cc4:	24000d5c 	.word	0x24000d5c
 8000cc8:	2400014c 	.word	0x2400014c
 8000ccc:	24000040 	.word	0x24000040
 8000cd0:	240000d4 	.word	0x240000d4
 8000cd4:	40020010 	.word	0x40020010
 8000cd8:	40020028 	.word	0x40020028
 8000cdc:	40020040 	.word	0x40020040
 8000ce0:	40020058 	.word	0x40020058
 8000ce4:	40020070 	.word	0x40020070
 8000ce8:	40020088 	.word	0x40020088
 8000cec:	400200a0 	.word	0x400200a0
 8000cf0:	400200b8 	.word	0x400200b8
 8000cf4:	40020410 	.word	0x40020410
 8000cf8:	40020428 	.word	0x40020428
 8000cfc:	40020440 	.word	0x40020440
 8000d00:	40020458 	.word	0x40020458
 8000d04:	40020470 	.word	0x40020470
 8000d08:	40020488 	.word	0x40020488
 8000d0c:	400204a0 	.word	0x400204a0
 8000d10:	400204b8 	.word	0x400204b8
 8000d14:	24000d50 	.word	0x24000d50
 8000d18:	24000d6c 	.word	0x24000d6c
 8000d1c:	24000d4c 	.word	0x24000d4c
 8000d20:	08060000 	.word	0x08060000
 8000d24:	2400094c 	.word	0x2400094c

08000d28 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09c      	sub	sp, #112	@ 0x70
 8000d2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d32:	224c      	movs	r2, #76	@ 0x4c
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f009 f8ea 	bl	8009f10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2220      	movs	r2, #32
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f009 f8e4 	bl	8009f10 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f003 ff77 	bl	8004c3c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b2c      	ldr	r3, [pc, #176]	@ (8000e04 <SystemClock_Config+0xdc>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8000e04 <SystemClock_Config+0xdc>)
 8000d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <SystemClock_Config+0xdc>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d6e:	bf00      	nop
 8000d70:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <SystemClock_Config+0xdc>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d7c:	d1f8      	bne.n	8000d70 <SystemClock_Config+0x48>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8000d86:	2340      	movs	r3, #64	@ 0x40
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d92:	2304      	movs	r3, #4
 8000d94:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000d96:	230c      	movs	r3, #12
 8000d98:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000da6:	230c      	movs	r3, #12
 8000da8:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 ff7a 	bl	8004cb0 <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000dc2:	f000 f9e1 	bl	8001188 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc6:	233f      	movs	r3, #63	@ 0x3f
 8000dc8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dd6:	2340      	movs	r3, #64	@ 0x40
 8000dd8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dda:	2340      	movs	r3, #64	@ 0x40
 8000ddc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000de4:	2340      	movs	r3, #64	@ 0x40
 8000de6:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2101      	movs	r1, #1
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 fb39 	bl	8005464 <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000df8:	f000 f9c6 	bl	8001188 <Error_Handler>
	}
}
 8000dfc:	bf00      	nop
 8000dfe:	3770      	adds	r7, #112	@ 0x70
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58024800 	.word	0x58024800

08000e08 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e0e:	4a23      	ldr	r2, [pc, #140]	@ (8000e9c <MX_USART2_UART_Init+0x94>)
 8000e10:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 2400;
 8000e12:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e14:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000e18:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e50:	4811      	ldr	r0, [pc, #68]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e52:	f006 ff7f 	bl	8007d54 <HAL_UART_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8000e5c:	f000 f994 	bl	8001188 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e64:	f008 ff35 	bl	8009cd2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8000e6e:	f000 f98b 	bl	8001188 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e72:	2100      	movs	r1, #0
 8000e74:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e76:	f008 ff6a 	bl	8009d4e <HAL_UARTEx_SetRxFifoThreshold>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8000e80:	f000 f982 	bl	8001188 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e84:	4804      	ldr	r0, [pc, #16]	@ (8000e98 <MX_USART2_UART_Init+0x90>)
 8000e86:	f008 feeb 	bl	8009c60 <HAL_UARTEx_DisableFifoMode>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8000e90:	f000 f97a 	bl	8001188 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	24000040 	.word	0x24000040
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <MX_DMA_Init+0x3c>)
 8000ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eac:	4a0b      	ldr	r2, [pc, #44]	@ (8000edc <MX_DMA_Init+0x3c>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <MX_DMA_Init+0x3c>)
 8000eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	200b      	movs	r0, #11
 8000eca:	f000 fcb5 	bl	8001838 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ece:	200b      	movs	r0, #11
 8000ed0:	f000 fccc 	bl	800186c <HAL_NVIC_EnableIRQ>

}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	58024400 	.word	0x58024400

08000ee0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08c      	sub	sp, #48	@ 0x30
 8000ee4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	4b94      	ldr	r3, [pc, #592]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	4a92      	ldr	r2, [pc, #584]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f06:	4b90      	ldr	r3, [pc, #576]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f14:	4b8c      	ldr	r3, [pc, #560]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a8b      	ldr	r2, [pc, #556]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b88      	ldr	r3, [pc, #544]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b85      	ldr	r3, [pc, #532]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	4a83      	ldr	r2, [pc, #524]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f42:	4b81      	ldr	r3, [pc, #516]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b7d      	ldr	r3, [pc, #500]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	4a7c      	ldr	r2, [pc, #496]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f60:	4b79      	ldr	r3, [pc, #484]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	4b76      	ldr	r3, [pc, #472]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	4a74      	ldr	r2, [pc, #464]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f76:	f043 0308 	orr.w	r3, r3, #8
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7e:	4b72      	ldr	r3, [pc, #456]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f8c:	4b6e      	ldr	r3, [pc, #440]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	4a6d      	ldr	r2, [pc, #436]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000faa:	4b67      	ldr	r3, [pc, #412]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb0:	4a65      	ldr	r2, [pc, #404]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fba:	4b63      	ldr	r3, [pc, #396]	@ (8001148 <MX_GPIO_Init+0x268>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000fce:	485f      	ldr	r0, [pc, #380]	@ (800114c <MX_GPIO_Init+0x26c>)
 8000fd0:	f003 fe1a 	bl	8004c08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fda:	485d      	ldr	r0, [pc, #372]	@ (8001150 <MX_GPIO_Init+0x270>)
 8000fdc:	f003 fe14 	bl	8004c08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	485b      	ldr	r0, [pc, #364]	@ (8001154 <MX_GPIO_Init+0x274>)
 8000fe6:	f003 fe0f 	bl	8004c08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000fea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4856      	ldr	r0, [pc, #344]	@ (8001158 <MX_GPIO_Init+0x278>)
 8001000:	f003 fc5a 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001004:	2332      	movs	r3, #50	@ 0x32
 8001006:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001014:	230b      	movs	r3, #11
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	484e      	ldr	r0, [pc, #312]	@ (8001158 <MX_GPIO_Init+0x278>)
 8001020:	f003 fc4a 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8001024:	2382      	movs	r3, #130	@ 0x82
 8001026:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001034:	230b      	movs	r3, #11
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	4847      	ldr	r0, [pc, #284]	@ (800115c <MX_GPIO_Init+0x27c>)
 8001040:	f003 fc3a 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001044:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001048:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	483b      	ldr	r0, [pc, #236]	@ (800114c <MX_GPIO_Init+0x26c>)
 800105e:	f003 fc2b 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001062:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001066:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001074:	230b      	movs	r3, #11
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	4833      	ldr	r0, [pc, #204]	@ (800114c <MX_GPIO_Init+0x26c>)
 8001080:	f003 fc1a 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
	GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001084:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001088:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001096:	2307      	movs	r3, #7
 8001098:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	482b      	ldr	r0, [pc, #172]	@ (8001150 <MX_GPIO_Init+0x270>)
 80010a2:	f003 fc09 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80010a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4824      	ldr	r0, [pc, #144]	@ (8001150 <MX_GPIO_Init+0x270>)
 80010c0:	f003 fbfa 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010cc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4821      	ldr	r0, [pc, #132]	@ (8001160 <MX_GPIO_Init+0x280>)
 80010da:	f003 fbed 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_ID_Pin */
	GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80010de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80010f0:	230a      	movs	r3, #10
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4818      	ldr	r0, [pc, #96]	@ (800115c <MX_GPIO_Init+0x27c>)
 80010fc:	f003 fbdc 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001100:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001104:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001112:	230b      	movs	r3, #11
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	4810      	ldr	r0, [pc, #64]	@ (8001160 <MX_GPIO_Init+0x280>)
 800111e:	f003 fbcb 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_YELLOW_Pin */
	GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001122:	2302      	movs	r3, #2
 8001124:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	4806      	ldr	r0, [pc, #24]	@ (8001154 <MX_GPIO_Init+0x274>)
 800113a:	f003 fbbd 	bl	80048b8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800113e:	bf00      	nop
 8001140:	3730      	adds	r7, #48	@ 0x30
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	58024400 	.word	0x58024400
 800114c:	58020400 	.word	0x58020400
 8001150:	58020c00 	.word	0x58020c00
 8001154:	58021000 	.word	0x58021000
 8001158:	58020800 	.word	0x58020800
 800115c:	58020000 	.word	0x58020000
 8001160:	58021800 	.word	0x58021800

08001164 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001176:	f000 fa63 	bl	8001640 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40000800 	.word	0x40000800

08001188 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <Error_Handler+0x8>

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_MspInit+0x30>)
 800119c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011a0:	4a08      	ldr	r2, [pc, #32]	@ (80011c4 <HAL_MspInit+0x30>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_MspInit+0x30>)
 80011ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	58024400 	.word	0x58024400

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0b8      	sub	sp, #224	@ 0xe0
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	22b8      	movs	r2, #184	@ 0xb8
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f008 fe91 	bl	8009f10 <memset>
  if(huart->Instance==USART2)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a42      	ldr	r2, [pc, #264]	@ (80012fc <HAL_UART_MspInit+0x134>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d17c      	bne.n	80012f2 <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011f8:	f04f 0202 	mov.w	r2, #2
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4618      	mov	r0, r3
 8001210:	f004 fcf6 	bl	8005c00 <HAL_RCCEx_PeriphCLKConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800121a:	f7ff ffb5 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800121e:	4b38      	ldr	r3, [pc, #224]	@ (8001300 <HAL_UART_MspInit+0x138>)
 8001220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001224:	4a36      	ldr	r2, [pc, #216]	@ (8001300 <HAL_UART_MspInit+0x138>)
 8001226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800122a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800122e:	4b34      	ldr	r3, [pc, #208]	@ (8001300 <HAL_UART_MspInit+0x138>)
 8001230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123c:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <HAL_UART_MspInit+0x138>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001242:	4a2f      	ldr	r2, [pc, #188]	@ (8001300 <HAL_UART_MspInit+0x138>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124c:	4b2c      	ldr	r3, [pc, #176]	@ (8001300 <HAL_UART_MspInit+0x138>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800125a:	2360      	movs	r3, #96	@ 0x60
 800125c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001272:	2307      	movs	r3, #7
 8001274:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001278:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800127c:	4619      	mov	r1, r3
 800127e:	4821      	ldr	r0, [pc, #132]	@ (8001304 <HAL_UART_MspInit+0x13c>)
 8001280:	f003 fb1a 	bl	80048b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8001284:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <HAL_UART_MspInit+0x140>)
 8001286:	4a21      	ldr	r2, [pc, #132]	@ (800130c <HAL_UART_MspInit+0x144>)
 8001288:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <HAL_UART_MspInit+0x140>)
 800128c:	222b      	movs	r2, #43	@ 0x2b
 800128e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001290:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <HAL_UART_MspInit+0x140>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <HAL_UART_MspInit+0x140>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <HAL_UART_MspInit+0x140>)
 800129e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a4:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <HAL_UART_MspInit+0x140>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012aa:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <HAL_UART_MspInit+0x140>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_UART_MspInit+0x140>)
 80012b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <HAL_UART_MspInit+0x140>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012be:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HAL_UART_MspInit+0x140>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012c4:	4810      	ldr	r0, [pc, #64]	@ (8001308 <HAL_UART_MspInit+0x140>)
 80012c6:	f000 fadf 	bl	8001888 <HAL_DMA_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80012d0:	f7ff ff5a 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001308 <HAL_UART_MspInit+0x140>)
 80012d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80012dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <HAL_UART_MspInit+0x140>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2026      	movs	r0, #38	@ 0x26
 80012e8:	f000 faa6 	bl	8001838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ec:	2026      	movs	r0, #38	@ 0x26
 80012ee:	f000 fabd 	bl	800186c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012f2:	bf00      	nop
 80012f4:	37e0      	adds	r7, #224	@ 0xe0
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004400 	.word	0x40004400
 8001300:	58024400 	.word	0x58024400
 8001304:	58020c00 	.word	0x58020c00
 8001308:	240000d4 	.word	0x240000d4
 800130c:	40020010 	.word	0x40020010

08001310 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b090      	sub	sp, #64	@ 0x40
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	d827      	bhi.n	800136e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800131e:	2200      	movs	r2, #0
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	201e      	movs	r0, #30
 8001324:	f000 fa88 	bl	8001838 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001328:	201e      	movs	r0, #30
 800132a:	f000 fa9f 	bl	800186c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800132e:	4a29      	ldr	r2, [pc, #164]	@ (80013d4 <HAL_InitTick+0xc4>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <HAL_InitTick+0xc8>)
 8001336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800133a:	4a27      	ldr	r2, [pc, #156]	@ (80013d8 <HAL_InitTick+0xc8>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001344:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <HAL_InitTick+0xc8>)
 8001346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001352:	f107 0210 	add.w	r2, r7, #16
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fc0d 	bl	8005b7c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001364:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001368:	2b00      	cmp	r3, #0
 800136a:	d106      	bne.n	800137a <HAL_InitTick+0x6a>
 800136c:	e001      	b.n	8001372 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e02b      	b.n	80013ca <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001372:	f004 fbd7 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 8001376:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001378:	e004      	b.n	8001384 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800137a:	f004 fbd3 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 800137e:	4603      	mov	r3, r0
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001386:	4a15      	ldr	r2, [pc, #84]	@ (80013dc <HAL_InitTick+0xcc>)
 8001388:	fba2 2303 	umull	r2, r3, r2, r3
 800138c:	0c9b      	lsrs	r3, r3, #18
 800138e:	3b01      	subs	r3, #1
 8001390:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <HAL_InitTick+0xd0>)
 8001394:	4a13      	ldr	r2, [pc, #76]	@ (80013e4 <HAL_InitTick+0xd4>)
 8001396:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_InitTick+0xd0>)
 800139a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800139e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80013a0:	4a0f      	ldr	r2, [pc, #60]	@ (80013e0 <HAL_InitTick+0xd0>)
 80013a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a4:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_InitTick+0xd0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <HAL_InitTick+0xd0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80013b2:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <HAL_InitTick+0xd0>)
 80013b4:	f006 f9e6 	bl	8007784 <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d104      	bne.n	80013c8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80013be:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <HAL_InitTick+0xd0>)
 80013c0:	f006 fa42 	bl	8007848 <HAL_TIM_Base_Start_IT>
 80013c4:	4603      	mov	r3, r0
 80013c6:	e000      	b.n	80013ca <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3740      	adds	r7, #64	@ 0x40
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	24000008 	.word	0x24000008
 80013d8:	58024400 	.word	0x58024400
 80013dc:	431bde83 	.word	0x431bde83
 80013e0:	24000d70 	.word	0x24000d70
 80013e4:	40000800 	.word	0x40000800

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <NMI_Handler+0x4>

080013f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <MemManage_Handler+0x4>

08001400 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <UsageFault_Handler+0x4>

08001410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <DMA1_Stream0_IRQHandler+0x10>)
 800144e:	f001 fd41 	bl	8002ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	240000d4 	.word	0x240000d4

0800145c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <TIM4_IRQHandler+0x10>)
 8001462:	f006 fa77 	bl	8007954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	24000d70 	.word	0x24000d70

08001470 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <USART2_IRQHandler+0x10>)
 8001476:	f006 fd4b 	bl	8007f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	24000040 	.word	0x24000040

08001484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001488:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <SystemInit+0xd0>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800148e:	4a31      	ldr	r2, [pc, #196]	@ (8001554 <SystemInit+0xd0>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001498:	4b2f      	ldr	r3, [pc, #188]	@ (8001558 <SystemInit+0xd4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	2b06      	cmp	r3, #6
 80014a2:	d807      	bhi.n	80014b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001558 <SystemInit+0xd4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 030f 	bic.w	r3, r3, #15
 80014ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001558 <SystemInit+0xd4>)
 80014ae:	f043 0307 	orr.w	r3, r3, #7
 80014b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014b4:	4b29      	ldr	r3, [pc, #164]	@ (800155c <SystemInit+0xd8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a28      	ldr	r2, [pc, #160]	@ (800155c <SystemInit+0xd8>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014c0:	4b26      	ldr	r3, [pc, #152]	@ (800155c <SystemInit+0xd8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014c6:	4b25      	ldr	r3, [pc, #148]	@ (800155c <SystemInit+0xd8>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4924      	ldr	r1, [pc, #144]	@ (800155c <SystemInit+0xd8>)
 80014cc:	4b24      	ldr	r3, [pc, #144]	@ (8001560 <SystemInit+0xdc>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <SystemInit+0xd4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014de:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <SystemInit+0xd4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 030f 	bic.w	r3, r3, #15
 80014e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <SystemInit+0xd4>)
 80014e8:	f043 0307 	orr.w	r3, r3, #7
 80014ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014ee:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <SystemInit+0xd8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <SystemInit+0xd8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <SystemInit+0xd8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <SystemInit+0xd8>)
 8001502:	4a18      	ldr	r2, [pc, #96]	@ (8001564 <SystemInit+0xe0>)
 8001504:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <SystemInit+0xd8>)
 8001508:	4a17      	ldr	r2, [pc, #92]	@ (8001568 <SystemInit+0xe4>)
 800150a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <SystemInit+0xd8>)
 800150e:	4a17      	ldr	r2, [pc, #92]	@ (800156c <SystemInit+0xe8>)
 8001510:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001512:	4b12      	ldr	r3, [pc, #72]	@ (800155c <SystemInit+0xd8>)
 8001514:	2200      	movs	r2, #0
 8001516:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001518:	4b10      	ldr	r3, [pc, #64]	@ (800155c <SystemInit+0xd8>)
 800151a:	4a14      	ldr	r2, [pc, #80]	@ (800156c <SystemInit+0xe8>)
 800151c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800151e:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <SystemInit+0xd8>)
 8001520:	2200      	movs	r2, #0
 8001522:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001524:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <SystemInit+0xd8>)
 8001526:	4a11      	ldr	r2, [pc, #68]	@ (800156c <SystemInit+0xe8>)
 8001528:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800152a:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <SystemInit+0xd8>)
 800152c:	2200      	movs	r2, #0
 800152e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001530:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <SystemInit+0xd8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a09      	ldr	r2, [pc, #36]	@ (800155c <SystemInit+0xd8>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800153a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <SystemInit+0xd8>)
 800153e:	2200      	movs	r2, #0
 8001540:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <SystemInit+0xec>)
 8001544:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001548:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00
 8001558:	52002000 	.word	0x52002000
 800155c:	58024400 	.word	0x58024400
 8001560:	eaf6ed7f 	.word	0xeaf6ed7f
 8001564:	02020200 	.word	0x02020200
 8001568:	01ff0000 	.word	0x01ff0000
 800156c:	01010280 	.word	0x01010280
 8001570:	52004000 	.word	0x52004000

08001574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001578:	f7ff ff84 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800157c:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800157e:	490d      	ldr	r1, [pc, #52]	@ (80015b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001580:	4a0d      	ldr	r2, [pc, #52]	@ (80015b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001594:	4c0a      	ldr	r4, [pc, #40]	@ (80015c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a2:	f008 fcbd 	bl	8009f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a6:	f7ff f97b 	bl	80008a0 <main>
  bx  lr
 80015aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80015b8:	08009fd8 	.word	0x08009fd8
  ldr r2, =_sbss
 80015bc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80015c0:	24000ddc 	.word	0x24000ddc

080015c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC3_IRQHandler>
	...

080015c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ce:	2003      	movs	r0, #3
 80015d0:	f000 f927 	bl	8001822 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015d4:	f004 f8fc 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 80015d8:	4602      	mov	r2, r0
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_Init+0x68>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	4913      	ldr	r1, [pc, #76]	@ (8001634 <HAL_Init+0x6c>)
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
 80015f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <HAL_Init+0x68>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001634 <HAL_Init+0x6c>)
 80015fc:	5cd3      	ldrb	r3, [r2, r3]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	4a0b      	ldr	r2, [pc, #44]	@ (8001638 <HAL_Init+0x70>)
 800160a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800160c:	4a0b      	ldr	r2, [pc, #44]	@ (800163c <HAL_Init+0x74>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001612:	200f      	movs	r0, #15
 8001614:	f7ff fe7c 	bl	8001310 <HAL_InitTick>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e002      	b.n	8001628 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001622:	f7ff fdb7 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	58024400 	.word	0x58024400
 8001634:	08009f88 	.word	0x08009f88
 8001638:	24000004 	.word	0x24000004
 800163c:	24000000 	.word	0x24000000

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	2400000c 	.word	0x2400000c
 8001664:	24000dbc 	.word	0x24000dbc

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	@ (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	24000dbc 	.word	0x24000dbc

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff ffee 	bl	8001668 <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_Delay+0x44>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffde 	bl	8001668 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2400000c 	.word	0x2400000c

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	05fa0000 	.word	0x05fa0000

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	@ (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	@ (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	@ (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	@ 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	@ 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff4c 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001846:	f7ff ff63 	bl	8001710 <__NVIC_GetPriorityGrouping>
 800184a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	6978      	ldr	r0, [r7, #20]
 8001852:	f7ff ffb3 	bl	80017bc <NVIC_EncodePriority>
 8001856:	4602      	mov	r2, r0
 8001858:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff82 	bl	8001768 <__NVIC_SetPriority>
}
 8001864:	bf00      	nop
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff56 	bl	800172c <__NVIC_EnableIRQ>
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff feea 	bl	8001668 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e312      	b.n	8001ec6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a66      	ldr	r2, [pc, #408]	@ (8001a40 <HAL_DMA_Init+0x1b8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d04a      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a65      	ldr	r2, [pc, #404]	@ (8001a44 <HAL_DMA_Init+0x1bc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d045      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a63      	ldr	r2, [pc, #396]	@ (8001a48 <HAL_DMA_Init+0x1c0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d040      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a62      	ldr	r2, [pc, #392]	@ (8001a4c <HAL_DMA_Init+0x1c4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d03b      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a60      	ldr	r2, [pc, #384]	@ (8001a50 <HAL_DMA_Init+0x1c8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d036      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001a54 <HAL_DMA_Init+0x1cc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d031      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001a58 <HAL_DMA_Init+0x1d0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d02c      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a5c      	ldr	r2, [pc, #368]	@ (8001a5c <HAL_DMA_Init+0x1d4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d027      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a60 <HAL_DMA_Init+0x1d8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d022      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a59      	ldr	r2, [pc, #356]	@ (8001a64 <HAL_DMA_Init+0x1dc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d01d      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a57      	ldr	r2, [pc, #348]	@ (8001a68 <HAL_DMA_Init+0x1e0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d018      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a56      	ldr	r2, [pc, #344]	@ (8001a6c <HAL_DMA_Init+0x1e4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d013      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a54      	ldr	r2, [pc, #336]	@ (8001a70 <HAL_DMA_Init+0x1e8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00e      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a53      	ldr	r2, [pc, #332]	@ (8001a74 <HAL_DMA_Init+0x1ec>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d009      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a51      	ldr	r2, [pc, #324]	@ (8001a78 <HAL_DMA_Init+0x1f0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d004      	beq.n	8001940 <HAL_DMA_Init+0xb8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a50      	ldr	r2, [pc, #320]	@ (8001a7c <HAL_DMA_Init+0x1f4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_DMA_Init+0xbc>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_DMA_Init+0xbe>
 8001944:	2300      	movs	r3, #0
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 813c 	beq.w	8001bc4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a37      	ldr	r2, [pc, #220]	@ (8001a40 <HAL_DMA_Init+0x1b8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d04a      	beq.n	80019fc <HAL_DMA_Init+0x174>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a36      	ldr	r2, [pc, #216]	@ (8001a44 <HAL_DMA_Init+0x1bc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d045      	beq.n	80019fc <HAL_DMA_Init+0x174>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a34      	ldr	r2, [pc, #208]	@ (8001a48 <HAL_DMA_Init+0x1c0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d040      	beq.n	80019fc <HAL_DMA_Init+0x174>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a33      	ldr	r2, [pc, #204]	@ (8001a4c <HAL_DMA_Init+0x1c4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d03b      	beq.n	80019fc <HAL_DMA_Init+0x174>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a31      	ldr	r2, [pc, #196]	@ (8001a50 <HAL_DMA_Init+0x1c8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d036      	beq.n	80019fc <HAL_DMA_Init+0x174>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a30      	ldr	r2, [pc, #192]	@ (8001a54 <HAL_DMA_Init+0x1cc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d031      	beq.n	80019fc <HAL_DMA_Init+0x174>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2e      	ldr	r2, [pc, #184]	@ (8001a58 <HAL_DMA_Init+0x1d0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d02c      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a5c <HAL_DMA_Init+0x1d4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d027      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a60 <HAL_DMA_Init+0x1d8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d022      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001a64 <HAL_DMA_Init+0x1dc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d01d      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a28      	ldr	r2, [pc, #160]	@ (8001a68 <HAL_DMA_Init+0x1e0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d018      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a27      	ldr	r2, [pc, #156]	@ (8001a6c <HAL_DMA_Init+0x1e4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a25      	ldr	r2, [pc, #148]	@ (8001a70 <HAL_DMA_Init+0x1e8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00e      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a24      	ldr	r2, [pc, #144]	@ (8001a74 <HAL_DMA_Init+0x1ec>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d009      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a22      	ldr	r2, [pc, #136]	@ (8001a78 <HAL_DMA_Init+0x1f0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d004      	beq.n	80019fc <HAL_DMA_Init+0x174>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a21      	ldr	r2, [pc, #132]	@ (8001a7c <HAL_DMA_Init+0x1f4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d108      	bne.n	8001a0e <HAL_DMA_Init+0x186>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e007      	b.n	8001a1e <HAL_DMA_Init+0x196>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0201 	bic.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a1e:	e02f      	b.n	8001a80 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a20:	f7ff fe22 	bl	8001668 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d928      	bls.n	8001a80 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2220      	movs	r2, #32
 8001a32:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2203      	movs	r2, #3
 8001a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e242      	b.n	8001ec6 <HAL_DMA_Init+0x63e>
 8001a40:	40020010 	.word	0x40020010
 8001a44:	40020028 	.word	0x40020028
 8001a48:	40020040 	.word	0x40020040
 8001a4c:	40020058 	.word	0x40020058
 8001a50:	40020070 	.word	0x40020070
 8001a54:	40020088 	.word	0x40020088
 8001a58:	400200a0 	.word	0x400200a0
 8001a5c:	400200b8 	.word	0x400200b8
 8001a60:	40020410 	.word	0x40020410
 8001a64:	40020428 	.word	0x40020428
 8001a68:	40020440 	.word	0x40020440
 8001a6c:	40020458 	.word	0x40020458
 8001a70:	40020470 	.word	0x40020470
 8001a74:	40020488 	.word	0x40020488
 8001a78:	400204a0 	.word	0x400204a0
 8001a7c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1c8      	bne.n	8001a20 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4b83      	ldr	r3, [pc, #524]	@ (8001ca8 <HAL_DMA_Init+0x420>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001aa6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001abe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d107      	bne.n	8001ae4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001adc:	4313      	orrs	r3, r2
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b28      	cmp	r3, #40	@ 0x28
 8001aea:	d903      	bls.n	8001af4 <HAL_DMA_Init+0x26c>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001af2:	d91f      	bls.n	8001b34 <HAL_DMA_Init+0x2ac>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b3e      	cmp	r3, #62	@ 0x3e
 8001afa:	d903      	bls.n	8001b04 <HAL_DMA_Init+0x27c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b42      	cmp	r3, #66	@ 0x42
 8001b02:	d917      	bls.n	8001b34 <HAL_DMA_Init+0x2ac>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b46      	cmp	r3, #70	@ 0x46
 8001b0a:	d903      	bls.n	8001b14 <HAL_DMA_Init+0x28c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b48      	cmp	r3, #72	@ 0x48
 8001b12:	d90f      	bls.n	8001b34 <HAL_DMA_Init+0x2ac>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b4e      	cmp	r3, #78	@ 0x4e
 8001b1a:	d903      	bls.n	8001b24 <HAL_DMA_Init+0x29c>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b52      	cmp	r3, #82	@ 0x52
 8001b22:	d907      	bls.n	8001b34 <HAL_DMA_Init+0x2ac>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b73      	cmp	r3, #115	@ 0x73
 8001b2a:	d905      	bls.n	8001b38 <HAL_DMA_Init+0x2b0>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b77      	cmp	r3, #119	@ 0x77
 8001b32:	d801      	bhi.n	8001b38 <HAL_DMA_Init+0x2b0>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_DMA_Init+0x2b2>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b44:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f023 0307 	bic.w	r3, r3, #7
 8001b5c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d117      	bne.n	8001ba0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00e      	beq.n	8001ba0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f002 fb2e 	bl	80041e4 <DMA_CheckFifoParam>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d008      	beq.n	8001ba0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2240      	movs	r2, #64	@ 0x40
 8001b92:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e192      	b.n	8001ec6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f002 fa69 	bl	8004080 <DMA_CalcBaseAndBitshift>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	223f      	movs	r2, #63	@ 0x3f
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	e0c8      	b.n	8001d56 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a38      	ldr	r2, [pc, #224]	@ (8001cac <HAL_DMA_Init+0x424>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d022      	beq.n	8001c14 <HAL_DMA_Init+0x38c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a37      	ldr	r2, [pc, #220]	@ (8001cb0 <HAL_DMA_Init+0x428>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d01d      	beq.n	8001c14 <HAL_DMA_Init+0x38c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a35      	ldr	r2, [pc, #212]	@ (8001cb4 <HAL_DMA_Init+0x42c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d018      	beq.n	8001c14 <HAL_DMA_Init+0x38c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a34      	ldr	r2, [pc, #208]	@ (8001cb8 <HAL_DMA_Init+0x430>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <HAL_DMA_Init+0x38c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a32      	ldr	r2, [pc, #200]	@ (8001cbc <HAL_DMA_Init+0x434>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00e      	beq.n	8001c14 <HAL_DMA_Init+0x38c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a31      	ldr	r2, [pc, #196]	@ (8001cc0 <HAL_DMA_Init+0x438>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d009      	beq.n	8001c14 <HAL_DMA_Init+0x38c>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2f      	ldr	r2, [pc, #188]	@ (8001cc4 <HAL_DMA_Init+0x43c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d004      	beq.n	8001c14 <HAL_DMA_Init+0x38c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc8 <HAL_DMA_Init+0x440>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d101      	bne.n	8001c18 <HAL_DMA_Init+0x390>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_DMA_Init+0x392>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 8092 	beq.w	8001d44 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a21      	ldr	r2, [pc, #132]	@ (8001cac <HAL_DMA_Init+0x424>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d021      	beq.n	8001c6e <HAL_DMA_Init+0x3e6>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a20      	ldr	r2, [pc, #128]	@ (8001cb0 <HAL_DMA_Init+0x428>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d01c      	beq.n	8001c6e <HAL_DMA_Init+0x3e6>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <HAL_DMA_Init+0x42c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d017      	beq.n	8001c6e <HAL_DMA_Init+0x3e6>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb8 <HAL_DMA_Init+0x430>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d012      	beq.n	8001c6e <HAL_DMA_Init+0x3e6>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cbc <HAL_DMA_Init+0x434>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00d      	beq.n	8001c6e <HAL_DMA_Init+0x3e6>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc0 <HAL_DMA_Init+0x438>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d008      	beq.n	8001c6e <HAL_DMA_Init+0x3e6>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a18      	ldr	r2, [pc, #96]	@ (8001cc4 <HAL_DMA_Init+0x43c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d003      	beq.n	8001c6e <HAL_DMA_Init+0x3e6>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a17      	ldr	r2, [pc, #92]	@ (8001cc8 <HAL_DMA_Init+0x440>)
 8001c6c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2202      	movs	r2, #2
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <HAL_DMA_Init+0x444>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b40      	cmp	r3, #64	@ 0x40
 8001c94:	d01c      	beq.n	8001cd0 <HAL_DMA_Init+0x448>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b80      	cmp	r3, #128	@ 0x80
 8001c9c:	d102      	bne.n	8001ca4 <HAL_DMA_Init+0x41c>
 8001c9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ca2:	e016      	b.n	8001cd2 <HAL_DMA_Init+0x44a>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e014      	b.n	8001cd2 <HAL_DMA_Init+0x44a>
 8001ca8:	fe10803f 	.word	0xfe10803f
 8001cac:	58025408 	.word	0x58025408
 8001cb0:	5802541c 	.word	0x5802541c
 8001cb4:	58025430 	.word	0x58025430
 8001cb8:	58025444 	.word	0x58025444
 8001cbc:	58025458 	.word	0x58025458
 8001cc0:	5802546c 	.word	0x5802546c
 8001cc4:	58025480 	.word	0x58025480
 8001cc8:	58025494 	.word	0x58025494
 8001ccc:	fffe000f 	.word	0xfffe000f
 8001cd0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68d2      	ldr	r2, [r2, #12]
 8001cd6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001cf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d00:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b6e      	ldr	r3, [pc, #440]	@ (8001ed0 <HAL_DMA_Init+0x648>)
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed4 <HAL_DMA_Init+0x64c>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	009a      	lsls	r2, r3, #2
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f002 f9a9 	bl	8004080 <DMA_CalcBaseAndBitshift>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	e008      	b.n	8001d56 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2240      	movs	r2, #64	@ 0x40
 8001d48:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0b7      	b.n	8001ec6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ed8 <HAL_DMA_Init+0x650>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d072      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a5d      	ldr	r2, [pc, #372]	@ (8001edc <HAL_DMA_Init+0x654>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d06d      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ee0 <HAL_DMA_Init+0x658>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d068      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a5a      	ldr	r2, [pc, #360]	@ (8001ee4 <HAL_DMA_Init+0x65c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d063      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a59      	ldr	r2, [pc, #356]	@ (8001ee8 <HAL_DMA_Init+0x660>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d05e      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a57      	ldr	r2, [pc, #348]	@ (8001eec <HAL_DMA_Init+0x664>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d059      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a56      	ldr	r2, [pc, #344]	@ (8001ef0 <HAL_DMA_Init+0x668>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d054      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a54      	ldr	r2, [pc, #336]	@ (8001ef4 <HAL_DMA_Init+0x66c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d04f      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a53      	ldr	r2, [pc, #332]	@ (8001ef8 <HAL_DMA_Init+0x670>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d04a      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a51      	ldr	r2, [pc, #324]	@ (8001efc <HAL_DMA_Init+0x674>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d045      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a50      	ldr	r2, [pc, #320]	@ (8001f00 <HAL_DMA_Init+0x678>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d040      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8001f04 <HAL_DMA_Init+0x67c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d03b      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a4d      	ldr	r2, [pc, #308]	@ (8001f08 <HAL_DMA_Init+0x680>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d036      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8001f0c <HAL_DMA_Init+0x684>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d031      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a4a      	ldr	r2, [pc, #296]	@ (8001f10 <HAL_DMA_Init+0x688>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d02c      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a48      	ldr	r2, [pc, #288]	@ (8001f14 <HAL_DMA_Init+0x68c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d027      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a47      	ldr	r2, [pc, #284]	@ (8001f18 <HAL_DMA_Init+0x690>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d022      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a45      	ldr	r2, [pc, #276]	@ (8001f1c <HAL_DMA_Init+0x694>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01d      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a44      	ldr	r2, [pc, #272]	@ (8001f20 <HAL_DMA_Init+0x698>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d018      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a42      	ldr	r2, [pc, #264]	@ (8001f24 <HAL_DMA_Init+0x69c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a41      	ldr	r2, [pc, #260]	@ (8001f28 <HAL_DMA_Init+0x6a0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00e      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a3f      	ldr	r2, [pc, #252]	@ (8001f2c <HAL_DMA_Init+0x6a4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a3e      	ldr	r2, [pc, #248]	@ (8001f30 <HAL_DMA_Init+0x6a8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_DMA_Init+0x5be>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a3c      	ldr	r2, [pc, #240]	@ (8001f34 <HAL_DMA_Init+0x6ac>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_DMA_Init+0x5c2>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_DMA_Init+0x5c4>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d032      	beq.n	8001eb6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f002 fa43 	bl	80042dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b80      	cmp	r3, #128	@ 0x80
 8001e5c:	d102      	bne.n	8001e64 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d010      	beq.n	8001ea4 <HAL_DMA_Init+0x61c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d80c      	bhi.n	8001ea4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f002 fac0 	bl	8004410 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	e008      	b.n	8001eb6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	a7fdabf8 	.word	0xa7fdabf8
 8001ed4:	cccccccd 	.word	0xcccccccd
 8001ed8:	40020010 	.word	0x40020010
 8001edc:	40020028 	.word	0x40020028
 8001ee0:	40020040 	.word	0x40020040
 8001ee4:	40020058 	.word	0x40020058
 8001ee8:	40020070 	.word	0x40020070
 8001eec:	40020088 	.word	0x40020088
 8001ef0:	400200a0 	.word	0x400200a0
 8001ef4:	400200b8 	.word	0x400200b8
 8001ef8:	40020410 	.word	0x40020410
 8001efc:	40020428 	.word	0x40020428
 8001f00:	40020440 	.word	0x40020440
 8001f04:	40020458 	.word	0x40020458
 8001f08:	40020470 	.word	0x40020470
 8001f0c:	40020488 	.word	0x40020488
 8001f10:	400204a0 	.word	0x400204a0
 8001f14:	400204b8 	.word	0x400204b8
 8001f18:	58025408 	.word	0x58025408
 8001f1c:	5802541c 	.word	0x5802541c
 8001f20:	58025430 	.word	0x58025430
 8001f24:	58025444 	.word	0x58025444
 8001f28:	58025458 	.word	0x58025458
 8001f2c:	5802546c 	.word	0x5802546c
 8001f30:	58025480 	.word	0x58025480
 8001f34:	58025494 	.word	0x58025494

08001f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e226      	b.n	80023a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_DMA_Start_IT+0x2a>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e21f      	b.n	80023a2 <HAL_DMA_Start_IT+0x46a>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	f040 820a 	bne.w	800238c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a68      	ldr	r2, [pc, #416]	@ (800212c <HAL_DMA_Start_IT+0x1f4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d04a      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a66      	ldr	r2, [pc, #408]	@ (8002130 <HAL_DMA_Start_IT+0x1f8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d045      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a65      	ldr	r2, [pc, #404]	@ (8002134 <HAL_DMA_Start_IT+0x1fc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d040      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a63      	ldr	r2, [pc, #396]	@ (8002138 <HAL_DMA_Start_IT+0x200>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d03b      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a62      	ldr	r2, [pc, #392]	@ (800213c <HAL_DMA_Start_IT+0x204>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d036      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a60      	ldr	r2, [pc, #384]	@ (8002140 <HAL_DMA_Start_IT+0x208>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002144 <HAL_DMA_Start_IT+0x20c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d02c      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002148 <HAL_DMA_Start_IT+0x210>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d027      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a5c      	ldr	r2, [pc, #368]	@ (800214c <HAL_DMA_Start_IT+0x214>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8002150 <HAL_DMA_Start_IT+0x218>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a59      	ldr	r2, [pc, #356]	@ (8002154 <HAL_DMA_Start_IT+0x21c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a57      	ldr	r2, [pc, #348]	@ (8002158 <HAL_DMA_Start_IT+0x220>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a56      	ldr	r2, [pc, #344]	@ (800215c <HAL_DMA_Start_IT+0x224>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a54      	ldr	r2, [pc, #336]	@ (8002160 <HAL_DMA_Start_IT+0x228>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a53      	ldr	r2, [pc, #332]	@ (8002164 <HAL_DMA_Start_IT+0x22c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <HAL_DMA_Start_IT+0xee>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a51      	ldr	r2, [pc, #324]	@ (8002168 <HAL_DMA_Start_IT+0x230>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d108      	bne.n	8002038 <HAL_DMA_Start_IT+0x100>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e007      	b.n	8002048 <HAL_DMA_Start_IT+0x110>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f001 fe6a 	bl	8003d28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a34      	ldr	r2, [pc, #208]	@ (800212c <HAL_DMA_Start_IT+0x1f4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d04a      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a33      	ldr	r2, [pc, #204]	@ (8002130 <HAL_DMA_Start_IT+0x1f8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d045      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a31      	ldr	r2, [pc, #196]	@ (8002134 <HAL_DMA_Start_IT+0x1fc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d040      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a30      	ldr	r2, [pc, #192]	@ (8002138 <HAL_DMA_Start_IT+0x200>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d03b      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2e      	ldr	r2, [pc, #184]	@ (800213c <HAL_DMA_Start_IT+0x204>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d036      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a2d      	ldr	r2, [pc, #180]	@ (8002140 <HAL_DMA_Start_IT+0x208>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d031      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a2b      	ldr	r2, [pc, #172]	@ (8002144 <HAL_DMA_Start_IT+0x20c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02c      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a2a      	ldr	r2, [pc, #168]	@ (8002148 <HAL_DMA_Start_IT+0x210>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d027      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a28      	ldr	r2, [pc, #160]	@ (800214c <HAL_DMA_Start_IT+0x214>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d022      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a27      	ldr	r2, [pc, #156]	@ (8002150 <HAL_DMA_Start_IT+0x218>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d01d      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a25      	ldr	r2, [pc, #148]	@ (8002154 <HAL_DMA_Start_IT+0x21c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d018      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a24      	ldr	r2, [pc, #144]	@ (8002158 <HAL_DMA_Start_IT+0x220>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d013      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a22      	ldr	r2, [pc, #136]	@ (800215c <HAL_DMA_Start_IT+0x224>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00e      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a21      	ldr	r2, [pc, #132]	@ (8002160 <HAL_DMA_Start_IT+0x228>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d009      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002164 <HAL_DMA_Start_IT+0x22c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d004      	beq.n	80020f4 <HAL_DMA_Start_IT+0x1bc>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002168 <HAL_DMA_Start_IT+0x230>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d101      	bne.n	80020f8 <HAL_DMA_Start_IT+0x1c0>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_DMA_Start_IT+0x1c2>
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d036      	beq.n	800216c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 021e 	bic.w	r2, r3, #30
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0216 	orr.w	r2, r2, #22
 8002110:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d03e      	beq.n	8002198 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0208 	orr.w	r2, r2, #8
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e035      	b.n	8002198 <HAL_DMA_Start_IT+0x260>
 800212c:	40020010 	.word	0x40020010
 8002130:	40020028 	.word	0x40020028
 8002134:	40020040 	.word	0x40020040
 8002138:	40020058 	.word	0x40020058
 800213c:	40020070 	.word	0x40020070
 8002140:	40020088 	.word	0x40020088
 8002144:	400200a0 	.word	0x400200a0
 8002148:	400200b8 	.word	0x400200b8
 800214c:	40020410 	.word	0x40020410
 8002150:	40020428 	.word	0x40020428
 8002154:	40020440 	.word	0x40020440
 8002158:	40020458 	.word	0x40020458
 800215c:	40020470 	.word	0x40020470
 8002160:	40020488 	.word	0x40020488
 8002164:	400204a0 	.word	0x400204a0
 8002168:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 020e 	bic.w	r2, r3, #14
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 020a 	orr.w	r2, r2, #10
 800217e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0204 	orr.w	r2, r2, #4
 8002196:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a83      	ldr	r2, [pc, #524]	@ (80023ac <HAL_DMA_Start_IT+0x474>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d072      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a82      	ldr	r2, [pc, #520]	@ (80023b0 <HAL_DMA_Start_IT+0x478>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d06d      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a80      	ldr	r2, [pc, #512]	@ (80023b4 <HAL_DMA_Start_IT+0x47c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d068      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7f      	ldr	r2, [pc, #508]	@ (80023b8 <HAL_DMA_Start_IT+0x480>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d063      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a7d      	ldr	r2, [pc, #500]	@ (80023bc <HAL_DMA_Start_IT+0x484>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d05e      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a7c      	ldr	r2, [pc, #496]	@ (80023c0 <HAL_DMA_Start_IT+0x488>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d059      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a7a      	ldr	r2, [pc, #488]	@ (80023c4 <HAL_DMA_Start_IT+0x48c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d054      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a79      	ldr	r2, [pc, #484]	@ (80023c8 <HAL_DMA_Start_IT+0x490>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d04f      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a77      	ldr	r2, [pc, #476]	@ (80023cc <HAL_DMA_Start_IT+0x494>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d04a      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a76      	ldr	r2, [pc, #472]	@ (80023d0 <HAL_DMA_Start_IT+0x498>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d045      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a74      	ldr	r2, [pc, #464]	@ (80023d4 <HAL_DMA_Start_IT+0x49c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d040      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a73      	ldr	r2, [pc, #460]	@ (80023d8 <HAL_DMA_Start_IT+0x4a0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d03b      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a71      	ldr	r2, [pc, #452]	@ (80023dc <HAL_DMA_Start_IT+0x4a4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d036      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a70      	ldr	r2, [pc, #448]	@ (80023e0 <HAL_DMA_Start_IT+0x4a8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d031      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a6e      	ldr	r2, [pc, #440]	@ (80023e4 <HAL_DMA_Start_IT+0x4ac>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d02c      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a6d      	ldr	r2, [pc, #436]	@ (80023e8 <HAL_DMA_Start_IT+0x4b0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d027      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a6b      	ldr	r2, [pc, #428]	@ (80023ec <HAL_DMA_Start_IT+0x4b4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d022      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a6a      	ldr	r2, [pc, #424]	@ (80023f0 <HAL_DMA_Start_IT+0x4b8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d01d      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a68      	ldr	r2, [pc, #416]	@ (80023f4 <HAL_DMA_Start_IT+0x4bc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d018      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a67      	ldr	r2, [pc, #412]	@ (80023f8 <HAL_DMA_Start_IT+0x4c0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d013      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a65      	ldr	r2, [pc, #404]	@ (80023fc <HAL_DMA_Start_IT+0x4c4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00e      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a64      	ldr	r2, [pc, #400]	@ (8002400 <HAL_DMA_Start_IT+0x4c8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d009      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a62      	ldr	r2, [pc, #392]	@ (8002404 <HAL_DMA_Start_IT+0x4cc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d004      	beq.n	8002288 <HAL_DMA_Start_IT+0x350>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a61      	ldr	r2, [pc, #388]	@ (8002408 <HAL_DMA_Start_IT+0x4d0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_DMA_Start_IT+0x354>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_DMA_Start_IT+0x356>
 800228c:	2300      	movs	r3, #0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01a      	beq.n	80022c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a37      	ldr	r2, [pc, #220]	@ (80023ac <HAL_DMA_Start_IT+0x474>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d04a      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a36      	ldr	r2, [pc, #216]	@ (80023b0 <HAL_DMA_Start_IT+0x478>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d045      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a34      	ldr	r2, [pc, #208]	@ (80023b4 <HAL_DMA_Start_IT+0x47c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d040      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a33      	ldr	r2, [pc, #204]	@ (80023b8 <HAL_DMA_Start_IT+0x480>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d03b      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a31      	ldr	r2, [pc, #196]	@ (80023bc <HAL_DMA_Start_IT+0x484>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d036      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a30      	ldr	r2, [pc, #192]	@ (80023c0 <HAL_DMA_Start_IT+0x488>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d031      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2e      	ldr	r2, [pc, #184]	@ (80023c4 <HAL_DMA_Start_IT+0x48c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d02c      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2d      	ldr	r2, [pc, #180]	@ (80023c8 <HAL_DMA_Start_IT+0x490>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d027      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2b      	ldr	r2, [pc, #172]	@ (80023cc <HAL_DMA_Start_IT+0x494>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d022      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a2a      	ldr	r2, [pc, #168]	@ (80023d0 <HAL_DMA_Start_IT+0x498>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d01d      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a28      	ldr	r2, [pc, #160]	@ (80023d4 <HAL_DMA_Start_IT+0x49c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d018      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a27      	ldr	r2, [pc, #156]	@ (80023d8 <HAL_DMA_Start_IT+0x4a0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a25      	ldr	r2, [pc, #148]	@ (80023dc <HAL_DMA_Start_IT+0x4a4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00e      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a24      	ldr	r2, [pc, #144]	@ (80023e0 <HAL_DMA_Start_IT+0x4a8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d009      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a22      	ldr	r2, [pc, #136]	@ (80023e4 <HAL_DMA_Start_IT+0x4ac>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d004      	beq.n	8002368 <HAL_DMA_Start_IT+0x430>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a21      	ldr	r2, [pc, #132]	@ (80023e8 <HAL_DMA_Start_IT+0x4b0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d108      	bne.n	800237a <HAL_DMA_Start_IT+0x442>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e012      	b.n	80023a0 <HAL_DMA_Start_IT+0x468>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e009      	b.n	80023a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002392:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40020010 	.word	0x40020010
 80023b0:	40020028 	.word	0x40020028
 80023b4:	40020040 	.word	0x40020040
 80023b8:	40020058 	.word	0x40020058
 80023bc:	40020070 	.word	0x40020070
 80023c0:	40020088 	.word	0x40020088
 80023c4:	400200a0 	.word	0x400200a0
 80023c8:	400200b8 	.word	0x400200b8
 80023cc:	40020410 	.word	0x40020410
 80023d0:	40020428 	.word	0x40020428
 80023d4:	40020440 	.word	0x40020440
 80023d8:	40020458 	.word	0x40020458
 80023dc:	40020470 	.word	0x40020470
 80023e0:	40020488 	.word	0x40020488
 80023e4:	400204a0 	.word	0x400204a0
 80023e8:	400204b8 	.word	0x400204b8
 80023ec:	58025408 	.word	0x58025408
 80023f0:	5802541c 	.word	0x5802541c
 80023f4:	58025430 	.word	0x58025430
 80023f8:	58025444 	.word	0x58025444
 80023fc:	58025458 	.word	0x58025458
 8002400:	5802546c 	.word	0x5802546c
 8002404:	58025480 	.word	0x58025480
 8002408:	58025494 	.word	0x58025494

0800240c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff f928 	bl	8001668 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e2dc      	b.n	80029de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d008      	beq.n	8002442 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2280      	movs	r2, #128	@ 0x80
 8002434:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e2cd      	b.n	80029de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a76      	ldr	r2, [pc, #472]	@ (8002620 <HAL_DMA_Abort+0x214>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d04a      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a74      	ldr	r2, [pc, #464]	@ (8002624 <HAL_DMA_Abort+0x218>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d045      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a73      	ldr	r2, [pc, #460]	@ (8002628 <HAL_DMA_Abort+0x21c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d040      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a71      	ldr	r2, [pc, #452]	@ (800262c <HAL_DMA_Abort+0x220>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d03b      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a70      	ldr	r2, [pc, #448]	@ (8002630 <HAL_DMA_Abort+0x224>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d036      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6e      	ldr	r2, [pc, #440]	@ (8002634 <HAL_DMA_Abort+0x228>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d031      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6d      	ldr	r2, [pc, #436]	@ (8002638 <HAL_DMA_Abort+0x22c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d02c      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6b      	ldr	r2, [pc, #428]	@ (800263c <HAL_DMA_Abort+0x230>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d027      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6a      	ldr	r2, [pc, #424]	@ (8002640 <HAL_DMA_Abort+0x234>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d022      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a68      	ldr	r2, [pc, #416]	@ (8002644 <HAL_DMA_Abort+0x238>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01d      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a67      	ldr	r2, [pc, #412]	@ (8002648 <HAL_DMA_Abort+0x23c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d018      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a65      	ldr	r2, [pc, #404]	@ (800264c <HAL_DMA_Abort+0x240>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a64      	ldr	r2, [pc, #400]	@ (8002650 <HAL_DMA_Abort+0x244>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00e      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a62      	ldr	r2, [pc, #392]	@ (8002654 <HAL_DMA_Abort+0x248>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a61      	ldr	r2, [pc, #388]	@ (8002658 <HAL_DMA_Abort+0x24c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d004      	beq.n	80024e2 <HAL_DMA_Abort+0xd6>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5f      	ldr	r2, [pc, #380]	@ (800265c <HAL_DMA_Abort+0x250>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <HAL_DMA_Abort+0xda>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_DMA_Abort+0xdc>
 80024e6:	2300      	movs	r3, #0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 021e 	bic.w	r2, r2, #30
 80024fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800250a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	e00a      	b.n	800252a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 020e 	bic.w	r2, r2, #14
 8002522:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a3c      	ldr	r2, [pc, #240]	@ (8002620 <HAL_DMA_Abort+0x214>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d072      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a3a      	ldr	r2, [pc, #232]	@ (8002624 <HAL_DMA_Abort+0x218>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d06d      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a39      	ldr	r2, [pc, #228]	@ (8002628 <HAL_DMA_Abort+0x21c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d068      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a37      	ldr	r2, [pc, #220]	@ (800262c <HAL_DMA_Abort+0x220>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d063      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a36      	ldr	r2, [pc, #216]	@ (8002630 <HAL_DMA_Abort+0x224>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d05e      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a34      	ldr	r2, [pc, #208]	@ (8002634 <HAL_DMA_Abort+0x228>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d059      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a33      	ldr	r2, [pc, #204]	@ (8002638 <HAL_DMA_Abort+0x22c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d054      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a31      	ldr	r2, [pc, #196]	@ (800263c <HAL_DMA_Abort+0x230>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d04f      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a30      	ldr	r2, [pc, #192]	@ (8002640 <HAL_DMA_Abort+0x234>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d04a      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2e      	ldr	r2, [pc, #184]	@ (8002644 <HAL_DMA_Abort+0x238>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d045      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2d      	ldr	r2, [pc, #180]	@ (8002648 <HAL_DMA_Abort+0x23c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d040      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2b      	ldr	r2, [pc, #172]	@ (800264c <HAL_DMA_Abort+0x240>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d03b      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002650 <HAL_DMA_Abort+0x244>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d036      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a28      	ldr	r2, [pc, #160]	@ (8002654 <HAL_DMA_Abort+0x248>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d031      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a27      	ldr	r2, [pc, #156]	@ (8002658 <HAL_DMA_Abort+0x24c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d02c      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a25      	ldr	r2, [pc, #148]	@ (800265c <HAL_DMA_Abort+0x250>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d027      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a24      	ldr	r2, [pc, #144]	@ (8002660 <HAL_DMA_Abort+0x254>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d022      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a22      	ldr	r2, [pc, #136]	@ (8002664 <HAL_DMA_Abort+0x258>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01d      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a21      	ldr	r2, [pc, #132]	@ (8002668 <HAL_DMA_Abort+0x25c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d018      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1f      	ldr	r2, [pc, #124]	@ (800266c <HAL_DMA_Abort+0x260>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002670 <HAL_DMA_Abort+0x264>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00e      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1c      	ldr	r2, [pc, #112]	@ (8002674 <HAL_DMA_Abort+0x268>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <HAL_DMA_Abort+0x26c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d004      	beq.n	800261a <HAL_DMA_Abort+0x20e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a19      	ldr	r2, [pc, #100]	@ (800267c <HAL_DMA_Abort+0x270>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d132      	bne.n	8002680 <HAL_DMA_Abort+0x274>
 800261a:	2301      	movs	r3, #1
 800261c:	e031      	b.n	8002682 <HAL_DMA_Abort+0x276>
 800261e:	bf00      	nop
 8002620:	40020010 	.word	0x40020010
 8002624:	40020028 	.word	0x40020028
 8002628:	40020040 	.word	0x40020040
 800262c:	40020058 	.word	0x40020058
 8002630:	40020070 	.word	0x40020070
 8002634:	40020088 	.word	0x40020088
 8002638:	400200a0 	.word	0x400200a0
 800263c:	400200b8 	.word	0x400200b8
 8002640:	40020410 	.word	0x40020410
 8002644:	40020428 	.word	0x40020428
 8002648:	40020440 	.word	0x40020440
 800264c:	40020458 	.word	0x40020458
 8002650:	40020470 	.word	0x40020470
 8002654:	40020488 	.word	0x40020488
 8002658:	400204a0 	.word	0x400204a0
 800265c:	400204b8 	.word	0x400204b8
 8002660:	58025408 	.word	0x58025408
 8002664:	5802541c 	.word	0x5802541c
 8002668:	58025430 	.word	0x58025430
 800266c:	58025444 	.word	0x58025444
 8002670:	58025458 	.word	0x58025458
 8002674:	5802546c 	.word	0x5802546c
 8002678:	58025480 	.word	0x58025480
 800267c:	58025494 	.word	0x58025494
 8002680:	2300      	movs	r3, #0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002690:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002694:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6d      	ldr	r2, [pc, #436]	@ (8002850 <HAL_DMA_Abort+0x444>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d04a      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002854 <HAL_DMA_Abort+0x448>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d045      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6a      	ldr	r2, [pc, #424]	@ (8002858 <HAL_DMA_Abort+0x44c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d040      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a68      	ldr	r2, [pc, #416]	@ (800285c <HAL_DMA_Abort+0x450>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d03b      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a67      	ldr	r2, [pc, #412]	@ (8002860 <HAL_DMA_Abort+0x454>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d036      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a65      	ldr	r2, [pc, #404]	@ (8002864 <HAL_DMA_Abort+0x458>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d031      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a64      	ldr	r2, [pc, #400]	@ (8002868 <HAL_DMA_Abort+0x45c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d02c      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a62      	ldr	r2, [pc, #392]	@ (800286c <HAL_DMA_Abort+0x460>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d027      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a61      	ldr	r2, [pc, #388]	@ (8002870 <HAL_DMA_Abort+0x464>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d022      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a5f      	ldr	r2, [pc, #380]	@ (8002874 <HAL_DMA_Abort+0x468>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01d      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002878 <HAL_DMA_Abort+0x46c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d018      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a5c      	ldr	r2, [pc, #368]	@ (800287c <HAL_DMA_Abort+0x470>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a5b      	ldr	r2, [pc, #364]	@ (8002880 <HAL_DMA_Abort+0x474>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00e      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a59      	ldr	r2, [pc, #356]	@ (8002884 <HAL_DMA_Abort+0x478>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a58      	ldr	r2, [pc, #352]	@ (8002888 <HAL_DMA_Abort+0x47c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d004      	beq.n	8002736 <HAL_DMA_Abort+0x32a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a56      	ldr	r2, [pc, #344]	@ (800288c <HAL_DMA_Abort+0x480>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d108      	bne.n	8002748 <HAL_DMA_Abort+0x33c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e007      	b.n	8002758 <HAL_DMA_Abort+0x34c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002758:	e013      	b.n	8002782 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800275a:	f7fe ff85 	bl	8001668 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b05      	cmp	r3, #5
 8002766:	d90c      	bls.n	8002782 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2203      	movs	r2, #3
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e12d      	b.n	80029de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e5      	bne.n	800275a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2f      	ldr	r2, [pc, #188]	@ (8002850 <HAL_DMA_Abort+0x444>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d04a      	beq.n	800282e <HAL_DMA_Abort+0x422>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2d      	ldr	r2, [pc, #180]	@ (8002854 <HAL_DMA_Abort+0x448>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d045      	beq.n	800282e <HAL_DMA_Abort+0x422>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002858 <HAL_DMA_Abort+0x44c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d040      	beq.n	800282e <HAL_DMA_Abort+0x422>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	@ (800285c <HAL_DMA_Abort+0x450>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d03b      	beq.n	800282e <HAL_DMA_Abort+0x422>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a29      	ldr	r2, [pc, #164]	@ (8002860 <HAL_DMA_Abort+0x454>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d036      	beq.n	800282e <HAL_DMA_Abort+0x422>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a27      	ldr	r2, [pc, #156]	@ (8002864 <HAL_DMA_Abort+0x458>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d031      	beq.n	800282e <HAL_DMA_Abort+0x422>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a26      	ldr	r2, [pc, #152]	@ (8002868 <HAL_DMA_Abort+0x45c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d02c      	beq.n	800282e <HAL_DMA_Abort+0x422>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a24      	ldr	r2, [pc, #144]	@ (800286c <HAL_DMA_Abort+0x460>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d027      	beq.n	800282e <HAL_DMA_Abort+0x422>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a23      	ldr	r2, [pc, #140]	@ (8002870 <HAL_DMA_Abort+0x464>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <HAL_DMA_Abort+0x422>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a21      	ldr	r2, [pc, #132]	@ (8002874 <HAL_DMA_Abort+0x468>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01d      	beq.n	800282e <HAL_DMA_Abort+0x422>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a20      	ldr	r2, [pc, #128]	@ (8002878 <HAL_DMA_Abort+0x46c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d018      	beq.n	800282e <HAL_DMA_Abort+0x422>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1e      	ldr	r2, [pc, #120]	@ (800287c <HAL_DMA_Abort+0x470>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_DMA_Abort+0x422>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1d      	ldr	r2, [pc, #116]	@ (8002880 <HAL_DMA_Abort+0x474>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00e      	beq.n	800282e <HAL_DMA_Abort+0x422>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1b      	ldr	r2, [pc, #108]	@ (8002884 <HAL_DMA_Abort+0x478>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_DMA_Abort+0x422>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1a      	ldr	r2, [pc, #104]	@ (8002888 <HAL_DMA_Abort+0x47c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_DMA_Abort+0x422>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a18      	ldr	r2, [pc, #96]	@ (800288c <HAL_DMA_Abort+0x480>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_DMA_Abort+0x426>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_DMA_Abort+0x428>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02b      	beq.n	8002890 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	223f      	movs	r2, #63	@ 0x3f
 8002848:	409a      	lsls	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	e02a      	b.n	80028a6 <HAL_DMA_Abort+0x49a>
 8002850:	40020010 	.word	0x40020010
 8002854:	40020028 	.word	0x40020028
 8002858:	40020040 	.word	0x40020040
 800285c:	40020058 	.word	0x40020058
 8002860:	40020070 	.word	0x40020070
 8002864:	40020088 	.word	0x40020088
 8002868:	400200a0 	.word	0x400200a0
 800286c:	400200b8 	.word	0x400200b8
 8002870:	40020410 	.word	0x40020410
 8002874:	40020428 	.word	0x40020428
 8002878:	40020440 	.word	0x40020440
 800287c:	40020458 	.word	0x40020458
 8002880:	40020470 	.word	0x40020470
 8002884:	40020488 	.word	0x40020488
 8002888:	400204a0 	.word	0x400204a0
 800288c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	2201      	movs	r2, #1
 80028a0:	409a      	lsls	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a4f      	ldr	r2, [pc, #316]	@ (80029e8 <HAL_DMA_Abort+0x5dc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d072      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a4d      	ldr	r2, [pc, #308]	@ (80029ec <HAL_DMA_Abort+0x5e0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d06d      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a4c      	ldr	r2, [pc, #304]	@ (80029f0 <HAL_DMA_Abort+0x5e4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d068      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a4a      	ldr	r2, [pc, #296]	@ (80029f4 <HAL_DMA_Abort+0x5e8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d063      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a49      	ldr	r2, [pc, #292]	@ (80029f8 <HAL_DMA_Abort+0x5ec>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d05e      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a47      	ldr	r2, [pc, #284]	@ (80029fc <HAL_DMA_Abort+0x5f0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d059      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a46      	ldr	r2, [pc, #280]	@ (8002a00 <HAL_DMA_Abort+0x5f4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d054      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a44      	ldr	r2, [pc, #272]	@ (8002a04 <HAL_DMA_Abort+0x5f8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d04f      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a43      	ldr	r2, [pc, #268]	@ (8002a08 <HAL_DMA_Abort+0x5fc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d04a      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a41      	ldr	r2, [pc, #260]	@ (8002a0c <HAL_DMA_Abort+0x600>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d045      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a40      	ldr	r2, [pc, #256]	@ (8002a10 <HAL_DMA_Abort+0x604>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d040      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a3e      	ldr	r2, [pc, #248]	@ (8002a14 <HAL_DMA_Abort+0x608>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d03b      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a3d      	ldr	r2, [pc, #244]	@ (8002a18 <HAL_DMA_Abort+0x60c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d036      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a1c <HAL_DMA_Abort+0x610>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d031      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3a      	ldr	r2, [pc, #232]	@ (8002a20 <HAL_DMA_Abort+0x614>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d02c      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a38      	ldr	r2, [pc, #224]	@ (8002a24 <HAL_DMA_Abort+0x618>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d027      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a37      	ldr	r2, [pc, #220]	@ (8002a28 <HAL_DMA_Abort+0x61c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d022      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a35      	ldr	r2, [pc, #212]	@ (8002a2c <HAL_DMA_Abort+0x620>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01d      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a34      	ldr	r2, [pc, #208]	@ (8002a30 <HAL_DMA_Abort+0x624>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d018      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a32      	ldr	r2, [pc, #200]	@ (8002a34 <HAL_DMA_Abort+0x628>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d013      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a31      	ldr	r2, [pc, #196]	@ (8002a38 <HAL_DMA_Abort+0x62c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00e      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2f      	ldr	r2, [pc, #188]	@ (8002a3c <HAL_DMA_Abort+0x630>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d009      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a2e      	ldr	r2, [pc, #184]	@ (8002a40 <HAL_DMA_Abort+0x634>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d004      	beq.n	8002996 <HAL_DMA_Abort+0x58a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2c      	ldr	r2, [pc, #176]	@ (8002a44 <HAL_DMA_Abort+0x638>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_DMA_Abort+0x58e>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_DMA_Abort+0x590>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40020010 	.word	0x40020010
 80029ec:	40020028 	.word	0x40020028
 80029f0:	40020040 	.word	0x40020040
 80029f4:	40020058 	.word	0x40020058
 80029f8:	40020070 	.word	0x40020070
 80029fc:	40020088 	.word	0x40020088
 8002a00:	400200a0 	.word	0x400200a0
 8002a04:	400200b8 	.word	0x400200b8
 8002a08:	40020410 	.word	0x40020410
 8002a0c:	40020428 	.word	0x40020428
 8002a10:	40020440 	.word	0x40020440
 8002a14:	40020458 	.word	0x40020458
 8002a18:	40020470 	.word	0x40020470
 8002a1c:	40020488 	.word	0x40020488
 8002a20:	400204a0 	.word	0x400204a0
 8002a24:	400204b8 	.word	0x400204b8
 8002a28:	58025408 	.word	0x58025408
 8002a2c:	5802541c 	.word	0x5802541c
 8002a30:	58025430 	.word	0x58025430
 8002a34:	58025444 	.word	0x58025444
 8002a38:	58025458 	.word	0x58025458
 8002a3c:	5802546c 	.word	0x5802546c
 8002a40:	58025480 	.word	0x58025480
 8002a44:	58025494 	.word	0x58025494

08002a48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e237      	b.n	8002eca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d004      	beq.n	8002a70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2280      	movs	r2, #128	@ 0x80
 8002a6a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e22c      	b.n	8002eca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a5c      	ldr	r2, [pc, #368]	@ (8002be8 <HAL_DMA_Abort_IT+0x1a0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d04a      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bec <HAL_DMA_Abort_IT+0x1a4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d045      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a59      	ldr	r2, [pc, #356]	@ (8002bf0 <HAL_DMA_Abort_IT+0x1a8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d040      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a58      	ldr	r2, [pc, #352]	@ (8002bf4 <HAL_DMA_Abort_IT+0x1ac>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d03b      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a56      	ldr	r2, [pc, #344]	@ (8002bf8 <HAL_DMA_Abort_IT+0x1b0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d036      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a55      	ldr	r2, [pc, #340]	@ (8002bfc <HAL_DMA_Abort_IT+0x1b4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d031      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a53      	ldr	r2, [pc, #332]	@ (8002c00 <HAL_DMA_Abort_IT+0x1b8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d02c      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a52      	ldr	r2, [pc, #328]	@ (8002c04 <HAL_DMA_Abort_IT+0x1bc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d027      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a50      	ldr	r2, [pc, #320]	@ (8002c08 <HAL_DMA_Abort_IT+0x1c0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d022      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a4f      	ldr	r2, [pc, #316]	@ (8002c0c <HAL_DMA_Abort_IT+0x1c4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d01d      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a4d      	ldr	r2, [pc, #308]	@ (8002c10 <HAL_DMA_Abort_IT+0x1c8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d018      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a4c      	ldr	r2, [pc, #304]	@ (8002c14 <HAL_DMA_Abort_IT+0x1cc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d013      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a4a      	ldr	r2, [pc, #296]	@ (8002c18 <HAL_DMA_Abort_IT+0x1d0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00e      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a49      	ldr	r2, [pc, #292]	@ (8002c1c <HAL_DMA_Abort_IT+0x1d4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d009      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a47      	ldr	r2, [pc, #284]	@ (8002c20 <HAL_DMA_Abort_IT+0x1d8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d004      	beq.n	8002b10 <HAL_DMA_Abort_IT+0xc8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a46      	ldr	r2, [pc, #280]	@ (8002c24 <HAL_DMA_Abort_IT+0x1dc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_DMA_Abort_IT+0xcc>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_DMA_Abort_IT+0xce>
 8002b14:	2300      	movs	r3, #0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8086 	beq.w	8002c28 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2204      	movs	r2, #4
 8002b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2f      	ldr	r2, [pc, #188]	@ (8002be8 <HAL_DMA_Abort_IT+0x1a0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d04a      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a2e      	ldr	r2, [pc, #184]	@ (8002bec <HAL_DMA_Abort_IT+0x1a4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d045      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf0 <HAL_DMA_Abort_IT+0x1a8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d040      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf4 <HAL_DMA_Abort_IT+0x1ac>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d03b      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a29      	ldr	r2, [pc, #164]	@ (8002bf8 <HAL_DMA_Abort_IT+0x1b0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d036      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a28      	ldr	r2, [pc, #160]	@ (8002bfc <HAL_DMA_Abort_IT+0x1b4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d031      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <HAL_DMA_Abort_IT+0x1b8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d02c      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a25      	ldr	r2, [pc, #148]	@ (8002c04 <HAL_DMA_Abort_IT+0x1bc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d027      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a23      	ldr	r2, [pc, #140]	@ (8002c08 <HAL_DMA_Abort_IT+0x1c0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d022      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a22      	ldr	r2, [pc, #136]	@ (8002c0c <HAL_DMA_Abort_IT+0x1c4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d01d      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a20      	ldr	r2, [pc, #128]	@ (8002c10 <HAL_DMA_Abort_IT+0x1c8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d018      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1f      	ldr	r2, [pc, #124]	@ (8002c14 <HAL_DMA_Abort_IT+0x1cc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d013      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c18 <HAL_DMA_Abort_IT+0x1d0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1c      	ldr	r2, [pc, #112]	@ (8002c1c <HAL_DMA_Abort_IT+0x1d4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d009      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c20 <HAL_DMA_Abort_IT+0x1d8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d004      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x17c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a19      	ldr	r2, [pc, #100]	@ (8002c24 <HAL_DMA_Abort_IT+0x1dc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d108      	bne.n	8002bd6 <HAL_DMA_Abort_IT+0x18e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e178      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x480>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e16f      	b.n	8002ec8 <HAL_DMA_Abort_IT+0x480>
 8002be8:	40020010 	.word	0x40020010
 8002bec:	40020028 	.word	0x40020028
 8002bf0:	40020040 	.word	0x40020040
 8002bf4:	40020058 	.word	0x40020058
 8002bf8:	40020070 	.word	0x40020070
 8002bfc:	40020088 	.word	0x40020088
 8002c00:	400200a0 	.word	0x400200a0
 8002c04:	400200b8 	.word	0x400200b8
 8002c08:	40020410 	.word	0x40020410
 8002c0c:	40020428 	.word	0x40020428
 8002c10:	40020440 	.word	0x40020440
 8002c14:	40020458 	.word	0x40020458
 8002c18:	40020470 	.word	0x40020470
 8002c1c:	40020488 	.word	0x40020488
 8002c20:	400204a0 	.word	0x400204a0
 8002c24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 020e 	bic.w	r2, r2, #14
 8002c36:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6c      	ldr	r2, [pc, #432]	@ (8002df0 <HAL_DMA_Abort_IT+0x3a8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d04a      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6b      	ldr	r2, [pc, #428]	@ (8002df4 <HAL_DMA_Abort_IT+0x3ac>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d045      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a69      	ldr	r2, [pc, #420]	@ (8002df8 <HAL_DMA_Abort_IT+0x3b0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d040      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a68      	ldr	r2, [pc, #416]	@ (8002dfc <HAL_DMA_Abort_IT+0x3b4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d03b      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a66      	ldr	r2, [pc, #408]	@ (8002e00 <HAL_DMA_Abort_IT+0x3b8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d036      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a65      	ldr	r2, [pc, #404]	@ (8002e04 <HAL_DMA_Abort_IT+0x3bc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d031      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a63      	ldr	r2, [pc, #396]	@ (8002e08 <HAL_DMA_Abort_IT+0x3c0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d02c      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a62      	ldr	r2, [pc, #392]	@ (8002e0c <HAL_DMA_Abort_IT+0x3c4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d027      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a60      	ldr	r2, [pc, #384]	@ (8002e10 <HAL_DMA_Abort_IT+0x3c8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d022      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a5f      	ldr	r2, [pc, #380]	@ (8002e14 <HAL_DMA_Abort_IT+0x3cc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d01d      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8002e18 <HAL_DMA_Abort_IT+0x3d0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d018      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a5c      	ldr	r2, [pc, #368]	@ (8002e1c <HAL_DMA_Abort_IT+0x3d4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a5a      	ldr	r2, [pc, #360]	@ (8002e20 <HAL_DMA_Abort_IT+0x3d8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <HAL_DMA_Abort_IT+0x3dc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d009      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a57      	ldr	r2, [pc, #348]	@ (8002e28 <HAL_DMA_Abort_IT+0x3e0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d004      	beq.n	8002cd8 <HAL_DMA_Abort_IT+0x290>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a56      	ldr	r2, [pc, #344]	@ (8002e2c <HAL_DMA_Abort_IT+0x3e4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d108      	bne.n	8002cea <HAL_DMA_Abort_IT+0x2a2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e007      	b.n	8002cfa <HAL_DMA_Abort_IT+0x2b2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3c      	ldr	r2, [pc, #240]	@ (8002df0 <HAL_DMA_Abort_IT+0x3a8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d072      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a3a      	ldr	r2, [pc, #232]	@ (8002df4 <HAL_DMA_Abort_IT+0x3ac>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d06d      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a39      	ldr	r2, [pc, #228]	@ (8002df8 <HAL_DMA_Abort_IT+0x3b0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d068      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a37      	ldr	r2, [pc, #220]	@ (8002dfc <HAL_DMA_Abort_IT+0x3b4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d063      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a36      	ldr	r2, [pc, #216]	@ (8002e00 <HAL_DMA_Abort_IT+0x3b8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d05e      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a34      	ldr	r2, [pc, #208]	@ (8002e04 <HAL_DMA_Abort_IT+0x3bc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d059      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a33      	ldr	r2, [pc, #204]	@ (8002e08 <HAL_DMA_Abort_IT+0x3c0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d054      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a31      	ldr	r2, [pc, #196]	@ (8002e0c <HAL_DMA_Abort_IT+0x3c4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d04f      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a30      	ldr	r2, [pc, #192]	@ (8002e10 <HAL_DMA_Abort_IT+0x3c8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d04a      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a2e      	ldr	r2, [pc, #184]	@ (8002e14 <HAL_DMA_Abort_IT+0x3cc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d045      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a2d      	ldr	r2, [pc, #180]	@ (8002e18 <HAL_DMA_Abort_IT+0x3d0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d040      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002e1c <HAL_DMA_Abort_IT+0x3d4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d03b      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a2a      	ldr	r2, [pc, #168]	@ (8002e20 <HAL_DMA_Abort_IT+0x3d8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d036      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a28      	ldr	r2, [pc, #160]	@ (8002e24 <HAL_DMA_Abort_IT+0x3dc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d031      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a27      	ldr	r2, [pc, #156]	@ (8002e28 <HAL_DMA_Abort_IT+0x3e0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d02c      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a25      	ldr	r2, [pc, #148]	@ (8002e2c <HAL_DMA_Abort_IT+0x3e4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d027      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a24      	ldr	r2, [pc, #144]	@ (8002e30 <HAL_DMA_Abort_IT+0x3e8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d022      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a22      	ldr	r2, [pc, #136]	@ (8002e34 <HAL_DMA_Abort_IT+0x3ec>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01d      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a21      	ldr	r2, [pc, #132]	@ (8002e38 <HAL_DMA_Abort_IT+0x3f0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d018      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8002e3c <HAL_DMA_Abort_IT+0x3f4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e40 <HAL_DMA_Abort_IT+0x3f8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00e      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e44 <HAL_DMA_Abort_IT+0x3fc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d009      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1b      	ldr	r2, [pc, #108]	@ (8002e48 <HAL_DMA_Abort_IT+0x400>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_DMA_Abort_IT+0x3a2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a19      	ldr	r2, [pc, #100]	@ (8002e4c <HAL_DMA_Abort_IT+0x404>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d132      	bne.n	8002e50 <HAL_DMA_Abort_IT+0x408>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e031      	b.n	8002e52 <HAL_DMA_Abort_IT+0x40a>
 8002dee:	bf00      	nop
 8002df0:	40020010 	.word	0x40020010
 8002df4:	40020028 	.word	0x40020028
 8002df8:	40020040 	.word	0x40020040
 8002dfc:	40020058 	.word	0x40020058
 8002e00:	40020070 	.word	0x40020070
 8002e04:	40020088 	.word	0x40020088
 8002e08:	400200a0 	.word	0x400200a0
 8002e0c:	400200b8 	.word	0x400200b8
 8002e10:	40020410 	.word	0x40020410
 8002e14:	40020428 	.word	0x40020428
 8002e18:	40020440 	.word	0x40020440
 8002e1c:	40020458 	.word	0x40020458
 8002e20:	40020470 	.word	0x40020470
 8002e24:	40020488 	.word	0x40020488
 8002e28:	400204a0 	.word	0x400204a0
 8002e2c:	400204b8 	.word	0x400204b8
 8002e30:	58025408 	.word	0x58025408
 8002e34:	5802541c 	.word	0x5802541c
 8002e38:	58025430 	.word	0x58025430
 8002e3c:	58025444 	.word	0x58025444
 8002e40:	58025458 	.word	0x58025458
 8002e44:	5802546c 	.word	0x5802546c
 8002e48:	58025480 	.word	0x58025480
 8002e4c:	58025494 	.word	0x58025494
 8002e50:	2300      	movs	r3, #0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d028      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e64:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	2201      	movs	r2, #1
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e84:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e9c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ea6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop

08002ed4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	@ 0x28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ee0:	4b67      	ldr	r3, [pc, #412]	@ (8003080 <HAL_DMA_IRQHandler+0x1ac>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a67      	ldr	r2, [pc, #412]	@ (8003084 <HAL_DMA_IRQHandler+0x1b0>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0a9b      	lsrs	r3, r3, #10
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003088 <HAL_DMA_IRQHandler+0x1b4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d04a      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a5d      	ldr	r2, [pc, #372]	@ (800308c <HAL_DMA_IRQHandler+0x1b8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d045      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003090 <HAL_DMA_IRQHandler+0x1bc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d040      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a5a      	ldr	r2, [pc, #360]	@ (8003094 <HAL_DMA_IRQHandler+0x1c0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d03b      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a59      	ldr	r2, [pc, #356]	@ (8003098 <HAL_DMA_IRQHandler+0x1c4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d036      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a57      	ldr	r2, [pc, #348]	@ (800309c <HAL_DMA_IRQHandler+0x1c8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d031      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a56      	ldr	r2, [pc, #344]	@ (80030a0 <HAL_DMA_IRQHandler+0x1cc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d02c      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a54      	ldr	r2, [pc, #336]	@ (80030a4 <HAL_DMA_IRQHandler+0x1d0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d027      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a53      	ldr	r2, [pc, #332]	@ (80030a8 <HAL_DMA_IRQHandler+0x1d4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a51      	ldr	r2, [pc, #324]	@ (80030ac <HAL_DMA_IRQHandler+0x1d8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01d      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a50      	ldr	r2, [pc, #320]	@ (80030b0 <HAL_DMA_IRQHandler+0x1dc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d018      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a4e      	ldr	r2, [pc, #312]	@ (80030b4 <HAL_DMA_IRQHandler+0x1e0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a4d      	ldr	r2, [pc, #308]	@ (80030b8 <HAL_DMA_IRQHandler+0x1e4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a4b      	ldr	r2, [pc, #300]	@ (80030bc <HAL_DMA_IRQHandler+0x1e8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a4a      	ldr	r2, [pc, #296]	@ (80030c0 <HAL_DMA_IRQHandler+0x1ec>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0xd2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a48      	ldr	r2, [pc, #288]	@ (80030c4 <HAL_DMA_IRQHandler+0x1f0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_DMA_IRQHandler+0xd6>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_DMA_IRQHandler+0xd8>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 842b 	beq.w	8003808 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	2208      	movs	r2, #8
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80a2 	beq.w	800310c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8003088 <HAL_DMA_IRQHandler+0x1b4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d04a      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800308c <HAL_DMA_IRQHandler+0x1b8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d045      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8003090 <HAL_DMA_IRQHandler+0x1bc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d040      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2a      	ldr	r2, [pc, #168]	@ (8003094 <HAL_DMA_IRQHandler+0x1c0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d03b      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a28      	ldr	r2, [pc, #160]	@ (8003098 <HAL_DMA_IRQHandler+0x1c4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d036      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a27      	ldr	r2, [pc, #156]	@ (800309c <HAL_DMA_IRQHandler+0x1c8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d031      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a25      	ldr	r2, [pc, #148]	@ (80030a0 <HAL_DMA_IRQHandler+0x1cc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d02c      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a24      	ldr	r2, [pc, #144]	@ (80030a4 <HAL_DMA_IRQHandler+0x1d0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d027      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a22      	ldr	r2, [pc, #136]	@ (80030a8 <HAL_DMA_IRQHandler+0x1d4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d022      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a21      	ldr	r2, [pc, #132]	@ (80030ac <HAL_DMA_IRQHandler+0x1d8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d01d      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1f      	ldr	r2, [pc, #124]	@ (80030b0 <HAL_DMA_IRQHandler+0x1dc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d018      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1e      	ldr	r2, [pc, #120]	@ (80030b4 <HAL_DMA_IRQHandler+0x1e0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1c      	ldr	r2, [pc, #112]	@ (80030b8 <HAL_DMA_IRQHandler+0x1e4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00e      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1b      	ldr	r2, [pc, #108]	@ (80030bc <HAL_DMA_IRQHandler+0x1e8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a19      	ldr	r2, [pc, #100]	@ (80030c0 <HAL_DMA_IRQHandler+0x1ec>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_DMA_IRQHandler+0x194>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a18      	ldr	r2, [pc, #96]	@ (80030c4 <HAL_DMA_IRQHandler+0x1f0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d12f      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x1f4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	e02e      	b.n	80030dc <HAL_DMA_IRQHandler+0x208>
 800307e:	bf00      	nop
 8003080:	24000000 	.word	0x24000000
 8003084:	1b4e81b5 	.word	0x1b4e81b5
 8003088:	40020010 	.word	0x40020010
 800308c:	40020028 	.word	0x40020028
 8003090:	40020040 	.word	0x40020040
 8003094:	40020058 	.word	0x40020058
 8003098:	40020070 	.word	0x40020070
 800309c:	40020088 	.word	0x40020088
 80030a0:	400200a0 	.word	0x400200a0
 80030a4:	400200b8 	.word	0x400200b8
 80030a8:	40020410 	.word	0x40020410
 80030ac:	40020428 	.word	0x40020428
 80030b0:	40020440 	.word	0x40020440
 80030b4:	40020458 	.word	0x40020458
 80030b8:	40020470 	.word	0x40020470
 80030bc:	40020488 	.word	0x40020488
 80030c0:	400204a0 	.word	0x400204a0
 80030c4:	400204b8 	.word	0x400204b8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d015      	beq.n	800310c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0204 	bic.w	r2, r2, #4
 80030ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	2208      	movs	r2, #8
 80030fa:	409a      	lsls	r2, r3
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003104:	f043 0201 	orr.w	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d06e      	beq.n	8003200 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a69      	ldr	r2, [pc, #420]	@ (80032cc <HAL_DMA_IRQHandler+0x3f8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d04a      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a67      	ldr	r2, [pc, #412]	@ (80032d0 <HAL_DMA_IRQHandler+0x3fc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d045      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a66      	ldr	r2, [pc, #408]	@ (80032d4 <HAL_DMA_IRQHandler+0x400>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d040      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a64      	ldr	r2, [pc, #400]	@ (80032d8 <HAL_DMA_IRQHandler+0x404>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d03b      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a63      	ldr	r2, [pc, #396]	@ (80032dc <HAL_DMA_IRQHandler+0x408>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d036      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a61      	ldr	r2, [pc, #388]	@ (80032e0 <HAL_DMA_IRQHandler+0x40c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d031      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a60      	ldr	r2, [pc, #384]	@ (80032e4 <HAL_DMA_IRQHandler+0x410>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d02c      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5e      	ldr	r2, [pc, #376]	@ (80032e8 <HAL_DMA_IRQHandler+0x414>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d027      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5d      	ldr	r2, [pc, #372]	@ (80032ec <HAL_DMA_IRQHandler+0x418>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5b      	ldr	r2, [pc, #364]	@ (80032f0 <HAL_DMA_IRQHandler+0x41c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01d      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a5a      	ldr	r2, [pc, #360]	@ (80032f4 <HAL_DMA_IRQHandler+0x420>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d018      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a58      	ldr	r2, [pc, #352]	@ (80032f8 <HAL_DMA_IRQHandler+0x424>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a57      	ldr	r2, [pc, #348]	@ (80032fc <HAL_DMA_IRQHandler+0x428>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00e      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a55      	ldr	r2, [pc, #340]	@ (8003300 <HAL_DMA_IRQHandler+0x42c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a54      	ldr	r2, [pc, #336]	@ (8003304 <HAL_DMA_IRQHandler+0x430>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2ee>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a52      	ldr	r2, [pc, #328]	@ (8003308 <HAL_DMA_IRQHandler+0x434>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10a      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x304>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e003      	b.n	80031e0 <HAL_DMA_IRQHandler+0x30c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2300      	movs	r3, #0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00d      	beq.n	8003200 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	2201      	movs	r2, #1
 80031ee:	409a      	lsls	r2, r3
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f8:	f043 0202 	orr.w	r2, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2204      	movs	r2, #4
 800320a:	409a      	lsls	r2, r3
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 808f 	beq.w	8003334 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2c      	ldr	r2, [pc, #176]	@ (80032cc <HAL_DMA_IRQHandler+0x3f8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d04a      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2a      	ldr	r2, [pc, #168]	@ (80032d0 <HAL_DMA_IRQHandler+0x3fc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d045      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a29      	ldr	r2, [pc, #164]	@ (80032d4 <HAL_DMA_IRQHandler+0x400>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d040      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a27      	ldr	r2, [pc, #156]	@ (80032d8 <HAL_DMA_IRQHandler+0x404>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d03b      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a26      	ldr	r2, [pc, #152]	@ (80032dc <HAL_DMA_IRQHandler+0x408>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d036      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a24      	ldr	r2, [pc, #144]	@ (80032e0 <HAL_DMA_IRQHandler+0x40c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d031      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a23      	ldr	r2, [pc, #140]	@ (80032e4 <HAL_DMA_IRQHandler+0x410>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d02c      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a21      	ldr	r2, [pc, #132]	@ (80032e8 <HAL_DMA_IRQHandler+0x414>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d027      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a20      	ldr	r2, [pc, #128]	@ (80032ec <HAL_DMA_IRQHandler+0x418>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1e      	ldr	r2, [pc, #120]	@ (80032f0 <HAL_DMA_IRQHandler+0x41c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01d      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1d      	ldr	r2, [pc, #116]	@ (80032f4 <HAL_DMA_IRQHandler+0x420>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d018      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1b      	ldr	r2, [pc, #108]	@ (80032f8 <HAL_DMA_IRQHandler+0x424>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1a      	ldr	r2, [pc, #104]	@ (80032fc <HAL_DMA_IRQHandler+0x428>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a18      	ldr	r2, [pc, #96]	@ (8003300 <HAL_DMA_IRQHandler+0x42c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a17      	ldr	r2, [pc, #92]	@ (8003304 <HAL_DMA_IRQHandler+0x430>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x3e2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a15      	ldr	r2, [pc, #84]	@ (8003308 <HAL_DMA_IRQHandler+0x434>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d12a      	bne.n	800330c <HAL_DMA_IRQHandler+0x438>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e023      	b.n	8003314 <HAL_DMA_IRQHandler+0x440>
 80032cc:	40020010 	.word	0x40020010
 80032d0:	40020028 	.word	0x40020028
 80032d4:	40020040 	.word	0x40020040
 80032d8:	40020058 	.word	0x40020058
 80032dc:	40020070 	.word	0x40020070
 80032e0:	40020088 	.word	0x40020088
 80032e4:	400200a0 	.word	0x400200a0
 80032e8:	400200b8 	.word	0x400200b8
 80032ec:	40020410 	.word	0x40020410
 80032f0:	40020428 	.word	0x40020428
 80032f4:	40020440 	.word	0x40020440
 80032f8:	40020458 	.word	0x40020458
 80032fc:	40020470 	.word	0x40020470
 8003300:	40020488 	.word	0x40020488
 8003304:	400204a0 	.word	0x400204a0
 8003308:	400204b8 	.word	0x400204b8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2300      	movs	r3, #0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2204      	movs	r2, #4
 8003322:	409a      	lsls	r2, r3
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332c:	f043 0204 	orr.w	r2, r3, #4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2210      	movs	r2, #16
 800333e:	409a      	lsls	r2, r3
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80a6 	beq.w	8003496 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a85      	ldr	r2, [pc, #532]	@ (8003564 <HAL_DMA_IRQHandler+0x690>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d04a      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a83      	ldr	r2, [pc, #524]	@ (8003568 <HAL_DMA_IRQHandler+0x694>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d045      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a82      	ldr	r2, [pc, #520]	@ (800356c <HAL_DMA_IRQHandler+0x698>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d040      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a80      	ldr	r2, [pc, #512]	@ (8003570 <HAL_DMA_IRQHandler+0x69c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d03b      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7f      	ldr	r2, [pc, #508]	@ (8003574 <HAL_DMA_IRQHandler+0x6a0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d036      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a7d      	ldr	r2, [pc, #500]	@ (8003578 <HAL_DMA_IRQHandler+0x6a4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d031      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7c      	ldr	r2, [pc, #496]	@ (800357c <HAL_DMA_IRQHandler+0x6a8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d02c      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a7a      	ldr	r2, [pc, #488]	@ (8003580 <HAL_DMA_IRQHandler+0x6ac>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d027      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a79      	ldr	r2, [pc, #484]	@ (8003584 <HAL_DMA_IRQHandler+0x6b0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d022      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a77      	ldr	r2, [pc, #476]	@ (8003588 <HAL_DMA_IRQHandler+0x6b4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d01d      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a76      	ldr	r2, [pc, #472]	@ (800358c <HAL_DMA_IRQHandler+0x6b8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d018      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a74      	ldr	r2, [pc, #464]	@ (8003590 <HAL_DMA_IRQHandler+0x6bc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d013      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a73      	ldr	r2, [pc, #460]	@ (8003594 <HAL_DMA_IRQHandler+0x6c0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00e      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a71      	ldr	r2, [pc, #452]	@ (8003598 <HAL_DMA_IRQHandler+0x6c4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d009      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a70      	ldr	r2, [pc, #448]	@ (800359c <HAL_DMA_IRQHandler+0x6c8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d004      	beq.n	80033ea <HAL_DMA_IRQHandler+0x516>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a6e      	ldr	r2, [pc, #440]	@ (80035a0 <HAL_DMA_IRQHandler+0x6cc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d10a      	bne.n	8003400 <HAL_DMA_IRQHandler+0x52c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e009      	b.n	8003414 <HAL_DMA_IRQHandler+0x540>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d03e      	beq.n	8003496 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2210      	movs	r2, #16
 8003422:	409a      	lsls	r2, r3
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d018      	beq.n	8003468 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d108      	bne.n	8003456 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d024      	beq.n	8003496 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
 8003454:	e01f      	b.n	8003496 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01b      	beq.n	8003496 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
 8003466:	e016      	b.n	8003496 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d107      	bne.n	8003486 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0208 	bic.w	r2, r2, #8
 8003484:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	2220      	movs	r2, #32
 80034a0:	409a      	lsls	r2, r3
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8110 	beq.w	80036cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003564 <HAL_DMA_IRQHandler+0x690>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d04a      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003568 <HAL_DMA_IRQHandler+0x694>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d045      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a29      	ldr	r2, [pc, #164]	@ (800356c <HAL_DMA_IRQHandler+0x698>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d040      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a28      	ldr	r2, [pc, #160]	@ (8003570 <HAL_DMA_IRQHandler+0x69c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d03b      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a26      	ldr	r2, [pc, #152]	@ (8003574 <HAL_DMA_IRQHandler+0x6a0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d036      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a25      	ldr	r2, [pc, #148]	@ (8003578 <HAL_DMA_IRQHandler+0x6a4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d031      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a23      	ldr	r2, [pc, #140]	@ (800357c <HAL_DMA_IRQHandler+0x6a8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d02c      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a22      	ldr	r2, [pc, #136]	@ (8003580 <HAL_DMA_IRQHandler+0x6ac>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d027      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a20      	ldr	r2, [pc, #128]	@ (8003584 <HAL_DMA_IRQHandler+0x6b0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d022      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1f      	ldr	r2, [pc, #124]	@ (8003588 <HAL_DMA_IRQHandler+0x6b4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d01d      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1d      	ldr	r2, [pc, #116]	@ (800358c <HAL_DMA_IRQHandler+0x6b8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d018      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1c      	ldr	r2, [pc, #112]	@ (8003590 <HAL_DMA_IRQHandler+0x6bc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1a      	ldr	r2, [pc, #104]	@ (8003594 <HAL_DMA_IRQHandler+0x6c0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00e      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a19      	ldr	r2, [pc, #100]	@ (8003598 <HAL_DMA_IRQHandler+0x6c4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a17      	ldr	r2, [pc, #92]	@ (800359c <HAL_DMA_IRQHandler+0x6c8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_DMA_IRQHandler+0x678>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a16      	ldr	r2, [pc, #88]	@ (80035a0 <HAL_DMA_IRQHandler+0x6cc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d12b      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x6d0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	bf14      	ite	ne
 800355a:	2301      	movne	r3, #1
 800355c:	2300      	moveq	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	e02a      	b.n	80035b8 <HAL_DMA_IRQHandler+0x6e4>
 8003562:	bf00      	nop
 8003564:	40020010 	.word	0x40020010
 8003568:	40020028 	.word	0x40020028
 800356c:	40020040 	.word	0x40020040
 8003570:	40020058 	.word	0x40020058
 8003574:	40020070 	.word	0x40020070
 8003578:	40020088 	.word	0x40020088
 800357c:	400200a0 	.word	0x400200a0
 8003580:	400200b8 	.word	0x400200b8
 8003584:	40020410 	.word	0x40020410
 8003588:	40020428 	.word	0x40020428
 800358c:	40020440 	.word	0x40020440
 8003590:	40020458 	.word	0x40020458
 8003594:	40020470 	.word	0x40020470
 8003598:	40020488 	.word	0x40020488
 800359c:	400204a0 	.word	0x400204a0
 80035a0:	400204b8 	.word	0x400204b8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf14      	ite	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	2300      	moveq	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8087 	beq.w	80036cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2220      	movs	r2, #32
 80035c8:	409a      	lsls	r2, r3
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d139      	bne.n	800364e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0216 	bic.w	r2, r2, #22
 80035e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d103      	bne.n	800360a <HAL_DMA_IRQHandler+0x736>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0208 	bic.w	r2, r2, #8
 8003618:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	223f      	movs	r2, #63	@ 0x3f
 8003624:	409a      	lsls	r2, r3
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 834a 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4798      	blx	r3
          }
          return;
 800364c:	e344      	b.n	8003cd8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d018      	beq.n	800368e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d108      	bne.n	800367c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	2b00      	cmp	r3, #0
 8003670:	d02c      	beq.n	80036cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
 800367a:	e027      	b.n	80036cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d023      	beq.n	80036cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
 800368c:	e01e      	b.n	80036cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10f      	bne.n	80036bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0210 	bic.w	r2, r2, #16
 80036aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8306 	beq.w	8003ce2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8088 	beq.w	80037f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2204      	movs	r2, #4
 80036e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a7a      	ldr	r2, [pc, #488]	@ (80038dc <HAL_DMA_IRQHandler+0xa08>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d04a      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a79      	ldr	r2, [pc, #484]	@ (80038e0 <HAL_DMA_IRQHandler+0xa0c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d045      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a77      	ldr	r2, [pc, #476]	@ (80038e4 <HAL_DMA_IRQHandler+0xa10>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d040      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a76      	ldr	r2, [pc, #472]	@ (80038e8 <HAL_DMA_IRQHandler+0xa14>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d03b      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a74      	ldr	r2, [pc, #464]	@ (80038ec <HAL_DMA_IRQHandler+0xa18>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d036      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a73      	ldr	r2, [pc, #460]	@ (80038f0 <HAL_DMA_IRQHandler+0xa1c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d031      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a71      	ldr	r2, [pc, #452]	@ (80038f4 <HAL_DMA_IRQHandler+0xa20>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d02c      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a70      	ldr	r2, [pc, #448]	@ (80038f8 <HAL_DMA_IRQHandler+0xa24>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d027      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a6e      	ldr	r2, [pc, #440]	@ (80038fc <HAL_DMA_IRQHandler+0xa28>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d022      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a6d      	ldr	r2, [pc, #436]	@ (8003900 <HAL_DMA_IRQHandler+0xa2c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d01d      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a6b      	ldr	r2, [pc, #428]	@ (8003904 <HAL_DMA_IRQHandler+0xa30>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d018      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a6a      	ldr	r2, [pc, #424]	@ (8003908 <HAL_DMA_IRQHandler+0xa34>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a68      	ldr	r2, [pc, #416]	@ (800390c <HAL_DMA_IRQHandler+0xa38>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00e      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a67      	ldr	r2, [pc, #412]	@ (8003910 <HAL_DMA_IRQHandler+0xa3c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a65      	ldr	r2, [pc, #404]	@ (8003914 <HAL_DMA_IRQHandler+0xa40>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_DMA_IRQHandler+0x8b8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a64      	ldr	r2, [pc, #400]	@ (8003918 <HAL_DMA_IRQHandler+0xa44>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d108      	bne.n	800379e <HAL_DMA_IRQHandler+0x8ca>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e007      	b.n	80037ae <HAL_DMA_IRQHandler+0x8da>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3301      	adds	r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d307      	bcc.n	80037ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f2      	bne.n	80037ae <HAL_DMA_IRQHandler+0x8da>
 80037c8:	e000      	b.n	80037cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80037ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2203      	movs	r2, #3
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80037e2:	e003      	b.n	80037ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8272 	beq.w	8003ce2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4798      	blx	r3
 8003806:	e26c      	b.n	8003ce2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a43      	ldr	r2, [pc, #268]	@ (800391c <HAL_DMA_IRQHandler+0xa48>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d022      	beq.n	8003858 <HAL_DMA_IRQHandler+0x984>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a42      	ldr	r2, [pc, #264]	@ (8003920 <HAL_DMA_IRQHandler+0xa4c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d01d      	beq.n	8003858 <HAL_DMA_IRQHandler+0x984>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a40      	ldr	r2, [pc, #256]	@ (8003924 <HAL_DMA_IRQHandler+0xa50>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d018      	beq.n	8003858 <HAL_DMA_IRQHandler+0x984>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3f      	ldr	r2, [pc, #252]	@ (8003928 <HAL_DMA_IRQHandler+0xa54>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <HAL_DMA_IRQHandler+0x984>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3d      	ldr	r2, [pc, #244]	@ (800392c <HAL_DMA_IRQHandler+0xa58>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00e      	beq.n	8003858 <HAL_DMA_IRQHandler+0x984>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a3c      	ldr	r2, [pc, #240]	@ (8003930 <HAL_DMA_IRQHandler+0xa5c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_DMA_IRQHandler+0x984>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a3a      	ldr	r2, [pc, #232]	@ (8003934 <HAL_DMA_IRQHandler+0xa60>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <HAL_DMA_IRQHandler+0x984>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a39      	ldr	r2, [pc, #228]	@ (8003938 <HAL_DMA_IRQHandler+0xa64>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <HAL_DMA_IRQHandler+0x988>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_DMA_IRQHandler+0x98a>
 800385c:	2300      	movs	r3, #0
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 823f 	beq.w	8003ce2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2204      	movs	r2, #4
 8003876:	409a      	lsls	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80cd 	beq.w	8003a1c <HAL_DMA_IRQHandler+0xb48>
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80c7 	beq.w	8003a1c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	2204      	movs	r2, #4
 8003898:	409a      	lsls	r2, r3
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d049      	beq.n	800393c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8210 	beq.w	8003cdc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038c4:	e20a      	b.n	8003cdc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8206 	beq.w	8003cdc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d8:	e200      	b.n	8003cdc <HAL_DMA_IRQHandler+0xe08>
 80038da:	bf00      	nop
 80038dc:	40020010 	.word	0x40020010
 80038e0:	40020028 	.word	0x40020028
 80038e4:	40020040 	.word	0x40020040
 80038e8:	40020058 	.word	0x40020058
 80038ec:	40020070 	.word	0x40020070
 80038f0:	40020088 	.word	0x40020088
 80038f4:	400200a0 	.word	0x400200a0
 80038f8:	400200b8 	.word	0x400200b8
 80038fc:	40020410 	.word	0x40020410
 8003900:	40020428 	.word	0x40020428
 8003904:	40020440 	.word	0x40020440
 8003908:	40020458 	.word	0x40020458
 800390c:	40020470 	.word	0x40020470
 8003910:	40020488 	.word	0x40020488
 8003914:	400204a0 	.word	0x400204a0
 8003918:	400204b8 	.word	0x400204b8
 800391c:	58025408 	.word	0x58025408
 8003920:	5802541c 	.word	0x5802541c
 8003924:	58025430 	.word	0x58025430
 8003928:	58025444 	.word	0x58025444
 800392c:	58025458 	.word	0x58025458
 8003930:	5802546c 	.word	0x5802546c
 8003934:	58025480 	.word	0x58025480
 8003938:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d160      	bne.n	8003a08 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7f      	ldr	r2, [pc, #508]	@ (8003b48 <HAL_DMA_IRQHandler+0xc74>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d04a      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7d      	ldr	r2, [pc, #500]	@ (8003b4c <HAL_DMA_IRQHandler+0xc78>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d045      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b50 <HAL_DMA_IRQHandler+0xc7c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d040      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a7a      	ldr	r2, [pc, #488]	@ (8003b54 <HAL_DMA_IRQHandler+0xc80>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d03b      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a79      	ldr	r2, [pc, #484]	@ (8003b58 <HAL_DMA_IRQHandler+0xc84>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d036      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a77      	ldr	r2, [pc, #476]	@ (8003b5c <HAL_DMA_IRQHandler+0xc88>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d031      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a76      	ldr	r2, [pc, #472]	@ (8003b60 <HAL_DMA_IRQHandler+0xc8c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d02c      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a74      	ldr	r2, [pc, #464]	@ (8003b64 <HAL_DMA_IRQHandler+0xc90>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d027      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a73      	ldr	r2, [pc, #460]	@ (8003b68 <HAL_DMA_IRQHandler+0xc94>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a71      	ldr	r2, [pc, #452]	@ (8003b6c <HAL_DMA_IRQHandler+0xc98>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a70      	ldr	r2, [pc, #448]	@ (8003b70 <HAL_DMA_IRQHandler+0xc9c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003b74 <HAL_DMA_IRQHandler+0xca0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a6d      	ldr	r2, [pc, #436]	@ (8003b78 <HAL_DMA_IRQHandler+0xca4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a6b      	ldr	r2, [pc, #428]	@ (8003b7c <HAL_DMA_IRQHandler+0xca8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6a      	ldr	r2, [pc, #424]	@ (8003b80 <HAL_DMA_IRQHandler+0xcac>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xb12>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a68      	ldr	r2, [pc, #416]	@ (8003b84 <HAL_DMA_IRQHandler+0xcb0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <HAL_DMA_IRQHandler+0xb24>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0208 	bic.w	r2, r2, #8
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e007      	b.n	8003a08 <HAL_DMA_IRQHandler+0xb34>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0204 	bic.w	r2, r2, #4
 8003a06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8165 	beq.w	8003cdc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a1a:	e15f      	b.n	8003cdc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2202      	movs	r2, #2
 8003a26:	409a      	lsls	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80c5 	beq.w	8003bbc <HAL_DMA_IRQHandler+0xce8>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80bf 	beq.w	8003bbc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2202      	movs	r2, #2
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 813a 	beq.w	8003ce0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a74:	e134      	b.n	8003ce0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8130 	beq.w	8003ce0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a88:	e12a      	b.n	8003ce0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f040 8089 	bne.w	8003ba8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b48 <HAL_DMA_IRQHandler+0xc74>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d04a      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a29      	ldr	r2, [pc, #164]	@ (8003b4c <HAL_DMA_IRQHandler+0xc78>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d045      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a28      	ldr	r2, [pc, #160]	@ (8003b50 <HAL_DMA_IRQHandler+0xc7c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d040      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a26      	ldr	r2, [pc, #152]	@ (8003b54 <HAL_DMA_IRQHandler+0xc80>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d03b      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a25      	ldr	r2, [pc, #148]	@ (8003b58 <HAL_DMA_IRQHandler+0xc84>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d036      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a23      	ldr	r2, [pc, #140]	@ (8003b5c <HAL_DMA_IRQHandler+0xc88>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d031      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a22      	ldr	r2, [pc, #136]	@ (8003b60 <HAL_DMA_IRQHandler+0xc8c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d02c      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a20      	ldr	r2, [pc, #128]	@ (8003b64 <HAL_DMA_IRQHandler+0xc90>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d027      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1f      	ldr	r2, [pc, #124]	@ (8003b68 <HAL_DMA_IRQHandler+0xc94>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d022      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b6c <HAL_DMA_IRQHandler+0xc98>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01d      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1c      	ldr	r2, [pc, #112]	@ (8003b70 <HAL_DMA_IRQHandler+0xc9c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d018      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1a      	ldr	r2, [pc, #104]	@ (8003b74 <HAL_DMA_IRQHandler+0xca0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a19      	ldr	r2, [pc, #100]	@ (8003b78 <HAL_DMA_IRQHandler+0xca4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	@ (8003b7c <HAL_DMA_IRQHandler+0xca8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d009      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a16      	ldr	r2, [pc, #88]	@ (8003b80 <HAL_DMA_IRQHandler+0xcac>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xc62>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a14      	ldr	r2, [pc, #80]	@ (8003b84 <HAL_DMA_IRQHandler+0xcb0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d128      	bne.n	8003b88 <HAL_DMA_IRQHandler+0xcb4>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0214 	bic.w	r2, r2, #20
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e027      	b.n	8003b98 <HAL_DMA_IRQHandler+0xcc4>
 8003b48:	40020010 	.word	0x40020010
 8003b4c:	40020028 	.word	0x40020028
 8003b50:	40020040 	.word	0x40020040
 8003b54:	40020058 	.word	0x40020058
 8003b58:	40020070 	.word	0x40020070
 8003b5c:	40020088 	.word	0x40020088
 8003b60:	400200a0 	.word	0x400200a0
 8003b64:	400200b8 	.word	0x400200b8
 8003b68:	40020410 	.word	0x40020410
 8003b6c:	40020428 	.word	0x40020428
 8003b70:	40020440 	.word	0x40020440
 8003b74:	40020458 	.word	0x40020458
 8003b78:	40020470 	.word	0x40020470
 8003b7c:	40020488 	.word	0x40020488
 8003b80:	400204a0 	.word	0x400204a0
 8003b84:	400204b8 	.word	0x400204b8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 020a 	bic.w	r2, r2, #10
 8003b96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8097 	beq.w	8003ce0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bba:	e091      	b.n	8003ce0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8088 	beq.w	8003ce2 <HAL_DMA_IRQHandler+0xe0e>
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8082 	beq.w	8003ce2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a41      	ldr	r2, [pc, #260]	@ (8003ce8 <HAL_DMA_IRQHandler+0xe14>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d04a      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3f      	ldr	r2, [pc, #252]	@ (8003cec <HAL_DMA_IRQHandler+0xe18>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d045      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a3e      	ldr	r2, [pc, #248]	@ (8003cf0 <HAL_DMA_IRQHandler+0xe1c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d040      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a3c      	ldr	r2, [pc, #240]	@ (8003cf4 <HAL_DMA_IRQHandler+0xe20>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d03b      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003cf8 <HAL_DMA_IRQHandler+0xe24>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d036      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a39      	ldr	r2, [pc, #228]	@ (8003cfc <HAL_DMA_IRQHandler+0xe28>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d031      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a38      	ldr	r2, [pc, #224]	@ (8003d00 <HAL_DMA_IRQHandler+0xe2c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d02c      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a36      	ldr	r2, [pc, #216]	@ (8003d04 <HAL_DMA_IRQHandler+0xe30>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d027      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a35      	ldr	r2, [pc, #212]	@ (8003d08 <HAL_DMA_IRQHandler+0xe34>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d022      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a33      	ldr	r2, [pc, #204]	@ (8003d0c <HAL_DMA_IRQHandler+0xe38>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01d      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a32      	ldr	r2, [pc, #200]	@ (8003d10 <HAL_DMA_IRQHandler+0xe3c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d018      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a30      	ldr	r2, [pc, #192]	@ (8003d14 <HAL_DMA_IRQHandler+0xe40>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d18 <HAL_DMA_IRQHandler+0xe44>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00e      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2d      	ldr	r2, [pc, #180]	@ (8003d1c <HAL_DMA_IRQHandler+0xe48>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d20 <HAL_DMA_IRQHandler+0xe4c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_DMA_IRQHandler+0xdaa>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a2a      	ldr	r2, [pc, #168]	@ (8003d24 <HAL_DMA_IRQHandler+0xe50>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d108      	bne.n	8003c90 <HAL_DMA_IRQHandler+0xdbc>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 021c 	bic.w	r2, r2, #28
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e007      	b.n	8003ca0 <HAL_DMA_IRQHandler+0xdcc>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 020e 	bic.w	r2, r2, #14
 8003c9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2201      	movs	r2, #1
 8003caa:	409a      	lsls	r2, r3
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
 8003cd6:	e004      	b.n	8003ce2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003cd8:	bf00      	nop
 8003cda:	e002      	b.n	8003ce2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ce2:	3728      	adds	r7, #40	@ 0x28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40020010 	.word	0x40020010
 8003cec:	40020028 	.word	0x40020028
 8003cf0:	40020040 	.word	0x40020040
 8003cf4:	40020058 	.word	0x40020058
 8003cf8:	40020070 	.word	0x40020070
 8003cfc:	40020088 	.word	0x40020088
 8003d00:	400200a0 	.word	0x400200a0
 8003d04:	400200b8 	.word	0x400200b8
 8003d08:	40020410 	.word	0x40020410
 8003d0c:	40020428 	.word	0x40020428
 8003d10:	40020440 	.word	0x40020440
 8003d14:	40020458 	.word	0x40020458
 8003d18:	40020470 	.word	0x40020470
 8003d1c:	40020488 	.word	0x40020488
 8003d20:	400204a0 	.word	0x400204a0
 8003d24:	400204b8 	.word	0x400204b8

08003d28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a7f      	ldr	r2, [pc, #508]	@ (8003f44 <DMA_SetConfig+0x21c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d072      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a7d      	ldr	r2, [pc, #500]	@ (8003f48 <DMA_SetConfig+0x220>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d06d      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f4c <DMA_SetConfig+0x224>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d068      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a7a      	ldr	r2, [pc, #488]	@ (8003f50 <DMA_SetConfig+0x228>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d063      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a79      	ldr	r2, [pc, #484]	@ (8003f54 <DMA_SetConfig+0x22c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d05e      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a77      	ldr	r2, [pc, #476]	@ (8003f58 <DMA_SetConfig+0x230>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d059      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a76      	ldr	r2, [pc, #472]	@ (8003f5c <DMA_SetConfig+0x234>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d054      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a74      	ldr	r2, [pc, #464]	@ (8003f60 <DMA_SetConfig+0x238>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d04f      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a73      	ldr	r2, [pc, #460]	@ (8003f64 <DMA_SetConfig+0x23c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d04a      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a71      	ldr	r2, [pc, #452]	@ (8003f68 <DMA_SetConfig+0x240>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d045      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a70      	ldr	r2, [pc, #448]	@ (8003f6c <DMA_SetConfig+0x244>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d040      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f70 <DMA_SetConfig+0x248>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d03b      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6d      	ldr	r2, [pc, #436]	@ (8003f74 <DMA_SetConfig+0x24c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d036      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f78 <DMA_SetConfig+0x250>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d031      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f7c <DMA_SetConfig+0x254>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d02c      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a68      	ldr	r2, [pc, #416]	@ (8003f80 <DMA_SetConfig+0x258>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d027      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a67      	ldr	r2, [pc, #412]	@ (8003f84 <DMA_SetConfig+0x25c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d022      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a65      	ldr	r2, [pc, #404]	@ (8003f88 <DMA_SetConfig+0x260>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01d      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a64      	ldr	r2, [pc, #400]	@ (8003f8c <DMA_SetConfig+0x264>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d018      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a62      	ldr	r2, [pc, #392]	@ (8003f90 <DMA_SetConfig+0x268>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a61      	ldr	r2, [pc, #388]	@ (8003f94 <DMA_SetConfig+0x26c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d00e      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a5f      	ldr	r2, [pc, #380]	@ (8003f98 <DMA_SetConfig+0x270>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a5e      	ldr	r2, [pc, #376]	@ (8003f9c <DMA_SetConfig+0x274>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d004      	beq.n	8003e32 <DMA_SetConfig+0x10a>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a5c      	ldr	r2, [pc, #368]	@ (8003fa0 <DMA_SetConfig+0x278>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d101      	bne.n	8003e36 <DMA_SetConfig+0x10e>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <DMA_SetConfig+0x110>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a39      	ldr	r2, [pc, #228]	@ (8003f44 <DMA_SetConfig+0x21c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d04a      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a38      	ldr	r2, [pc, #224]	@ (8003f48 <DMA_SetConfig+0x220>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d045      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a36      	ldr	r2, [pc, #216]	@ (8003f4c <DMA_SetConfig+0x224>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d040      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a35      	ldr	r2, [pc, #212]	@ (8003f50 <DMA_SetConfig+0x228>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d03b      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a33      	ldr	r2, [pc, #204]	@ (8003f54 <DMA_SetConfig+0x22c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d036      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a32      	ldr	r2, [pc, #200]	@ (8003f58 <DMA_SetConfig+0x230>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d031      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a30      	ldr	r2, [pc, #192]	@ (8003f5c <DMA_SetConfig+0x234>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02c      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8003f60 <DMA_SetConfig+0x238>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d027      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2d      	ldr	r2, [pc, #180]	@ (8003f64 <DMA_SetConfig+0x23c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d022      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8003f68 <DMA_SetConfig+0x240>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d01d      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f6c <DMA_SetConfig+0x244>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d018      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a29      	ldr	r2, [pc, #164]	@ (8003f70 <DMA_SetConfig+0x248>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d013      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a27      	ldr	r2, [pc, #156]	@ (8003f74 <DMA_SetConfig+0x24c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00e      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a26      	ldr	r2, [pc, #152]	@ (8003f78 <DMA_SetConfig+0x250>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d009      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a24      	ldr	r2, [pc, #144]	@ (8003f7c <DMA_SetConfig+0x254>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d004      	beq.n	8003ef8 <DMA_SetConfig+0x1d0>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a23      	ldr	r2, [pc, #140]	@ (8003f80 <DMA_SetConfig+0x258>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <DMA_SetConfig+0x1d4>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <DMA_SetConfig+0x1d6>
 8003efc:	2300      	movs	r3, #0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d059      	beq.n	8003fb6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	223f      	movs	r2, #63	@ 0x3f
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f20:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b40      	cmp	r3, #64	@ 0x40
 8003f30:	d138      	bne.n	8003fa4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f42:	e086      	b.n	8004052 <DMA_SetConfig+0x32a>
 8003f44:	40020010 	.word	0x40020010
 8003f48:	40020028 	.word	0x40020028
 8003f4c:	40020040 	.word	0x40020040
 8003f50:	40020058 	.word	0x40020058
 8003f54:	40020070 	.word	0x40020070
 8003f58:	40020088 	.word	0x40020088
 8003f5c:	400200a0 	.word	0x400200a0
 8003f60:	400200b8 	.word	0x400200b8
 8003f64:	40020410 	.word	0x40020410
 8003f68:	40020428 	.word	0x40020428
 8003f6c:	40020440 	.word	0x40020440
 8003f70:	40020458 	.word	0x40020458
 8003f74:	40020470 	.word	0x40020470
 8003f78:	40020488 	.word	0x40020488
 8003f7c:	400204a0 	.word	0x400204a0
 8003f80:	400204b8 	.word	0x400204b8
 8003f84:	58025408 	.word	0x58025408
 8003f88:	5802541c 	.word	0x5802541c
 8003f8c:	58025430 	.word	0x58025430
 8003f90:	58025444 	.word	0x58025444
 8003f94:	58025458 	.word	0x58025458
 8003f98:	5802546c 	.word	0x5802546c
 8003f9c:	58025480 	.word	0x58025480
 8003fa0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	60da      	str	r2, [r3, #12]
}
 8003fb4:	e04d      	b.n	8004052 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a29      	ldr	r2, [pc, #164]	@ (8004060 <DMA_SetConfig+0x338>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d022      	beq.n	8004006 <DMA_SetConfig+0x2de>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a27      	ldr	r2, [pc, #156]	@ (8004064 <DMA_SetConfig+0x33c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d01d      	beq.n	8004006 <DMA_SetConfig+0x2de>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a26      	ldr	r2, [pc, #152]	@ (8004068 <DMA_SetConfig+0x340>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d018      	beq.n	8004006 <DMA_SetConfig+0x2de>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a24      	ldr	r2, [pc, #144]	@ (800406c <DMA_SetConfig+0x344>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <DMA_SetConfig+0x2de>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a23      	ldr	r2, [pc, #140]	@ (8004070 <DMA_SetConfig+0x348>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <DMA_SetConfig+0x2de>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a21      	ldr	r2, [pc, #132]	@ (8004074 <DMA_SetConfig+0x34c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <DMA_SetConfig+0x2de>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a20      	ldr	r2, [pc, #128]	@ (8004078 <DMA_SetConfig+0x350>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <DMA_SetConfig+0x2de>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1e      	ldr	r2, [pc, #120]	@ (800407c <DMA_SetConfig+0x354>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d101      	bne.n	800400a <DMA_SetConfig+0x2e2>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <DMA_SetConfig+0x2e4>
 800400a:	2300      	movs	r3, #0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d020      	beq.n	8004052 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2201      	movs	r2, #1
 800401a:	409a      	lsls	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b40      	cmp	r3, #64	@ 0x40
 800402e:	d108      	bne.n	8004042 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	60da      	str	r2, [r3, #12]
}
 8004040:	e007      	b.n	8004052 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	58025408 	.word	0x58025408
 8004064:	5802541c 	.word	0x5802541c
 8004068:	58025430 	.word	0x58025430
 800406c:	58025444 	.word	0x58025444
 8004070:	58025458 	.word	0x58025458
 8004074:	5802546c 	.word	0x5802546c
 8004078:	58025480 	.word	0x58025480
 800407c:	58025494 	.word	0x58025494

08004080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a42      	ldr	r2, [pc, #264]	@ (8004198 <DMA_CalcBaseAndBitshift+0x118>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d04a      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a41      	ldr	r2, [pc, #260]	@ (800419c <DMA_CalcBaseAndBitshift+0x11c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d045      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a3f      	ldr	r2, [pc, #252]	@ (80041a0 <DMA_CalcBaseAndBitshift+0x120>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d040      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a3e      	ldr	r2, [pc, #248]	@ (80041a4 <DMA_CalcBaseAndBitshift+0x124>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d03b      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a3c      	ldr	r2, [pc, #240]	@ (80041a8 <DMA_CalcBaseAndBitshift+0x128>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d036      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a3b      	ldr	r2, [pc, #236]	@ (80041ac <DMA_CalcBaseAndBitshift+0x12c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d031      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a39      	ldr	r2, [pc, #228]	@ (80041b0 <DMA_CalcBaseAndBitshift+0x130>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d02c      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a38      	ldr	r2, [pc, #224]	@ (80041b4 <DMA_CalcBaseAndBitshift+0x134>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d027      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a36      	ldr	r2, [pc, #216]	@ (80041b8 <DMA_CalcBaseAndBitshift+0x138>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d022      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a35      	ldr	r2, [pc, #212]	@ (80041bc <DMA_CalcBaseAndBitshift+0x13c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d01d      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a33      	ldr	r2, [pc, #204]	@ (80041c0 <DMA_CalcBaseAndBitshift+0x140>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d018      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a32      	ldr	r2, [pc, #200]	@ (80041c4 <DMA_CalcBaseAndBitshift+0x144>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a30      	ldr	r2, [pc, #192]	@ (80041c8 <DMA_CalcBaseAndBitshift+0x148>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a2f      	ldr	r2, [pc, #188]	@ (80041cc <DMA_CalcBaseAndBitshift+0x14c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d009      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a2d      	ldr	r2, [pc, #180]	@ (80041d0 <DMA_CalcBaseAndBitshift+0x150>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <DMA_CalcBaseAndBitshift+0xa8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2c      	ldr	r2, [pc, #176]	@ (80041d4 <DMA_CalcBaseAndBitshift+0x154>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d101      	bne.n	800412c <DMA_CalcBaseAndBitshift+0xac>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <DMA_CalcBaseAndBitshift+0xae>
 800412c:	2300      	movs	r3, #0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d024      	beq.n	800417c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	3b10      	subs	r3, #16
 800413a:	4a27      	ldr	r2, [pc, #156]	@ (80041d8 <DMA_CalcBaseAndBitshift+0x158>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	4a24      	ldr	r2, [pc, #144]	@ (80041dc <DMA_CalcBaseAndBitshift+0x15c>)
 800414c:	5cd3      	ldrb	r3, [r2, r3]
 800414e:	461a      	mov	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d908      	bls.n	800416c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	4b1f      	ldr	r3, [pc, #124]	@ (80041e0 <DMA_CalcBaseAndBitshift+0x160>)
 8004162:	4013      	ands	r3, r2
 8004164:	1d1a      	adds	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	659a      	str	r2, [r3, #88]	@ 0x58
 800416a:	e00d      	b.n	8004188 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	4b1b      	ldr	r3, [pc, #108]	@ (80041e0 <DMA_CalcBaseAndBitshift+0x160>)
 8004174:	4013      	ands	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6593      	str	r3, [r2, #88]	@ 0x58
 800417a:	e005      	b.n	8004188 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40020010 	.word	0x40020010
 800419c:	40020028 	.word	0x40020028
 80041a0:	40020040 	.word	0x40020040
 80041a4:	40020058 	.word	0x40020058
 80041a8:	40020070 	.word	0x40020070
 80041ac:	40020088 	.word	0x40020088
 80041b0:	400200a0 	.word	0x400200a0
 80041b4:	400200b8 	.word	0x400200b8
 80041b8:	40020410 	.word	0x40020410
 80041bc:	40020428 	.word	0x40020428
 80041c0:	40020440 	.word	0x40020440
 80041c4:	40020458 	.word	0x40020458
 80041c8:	40020470 	.word	0x40020470
 80041cc:	40020488 	.word	0x40020488
 80041d0:	400204a0 	.word	0x400204a0
 80041d4:	400204b8 	.word	0x400204b8
 80041d8:	aaaaaaab 	.word	0xaaaaaaab
 80041dc:	08009f98 	.word	0x08009f98
 80041e0:	fffffc00 	.word	0xfffffc00

080041e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d120      	bne.n	800423a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d858      	bhi.n	80042b2 <DMA_CheckFifoParam+0xce>
 8004200:	a201      	add	r2, pc, #4	@ (adr r2, 8004208 <DMA_CheckFifoParam+0x24>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	08004219 	.word	0x08004219
 800420c:	0800422b 	.word	0x0800422b
 8004210:	08004219 	.word	0x08004219
 8004214:	080042b3 	.word	0x080042b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d048      	beq.n	80042b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004228:	e045      	b.n	80042b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004232:	d142      	bne.n	80042ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004238:	e03f      	b.n	80042ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004242:	d123      	bne.n	800428c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	2b03      	cmp	r3, #3
 800424a:	d838      	bhi.n	80042be <DMA_CheckFifoParam+0xda>
 800424c:	a201      	add	r2, pc, #4	@ (adr r2, 8004254 <DMA_CheckFifoParam+0x70>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004265 	.word	0x08004265
 8004258:	0800426b 	.word	0x0800426b
 800425c:	08004265 	.word	0x08004265
 8004260:	0800427d 	.word	0x0800427d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
        break;
 8004268:	e030      	b.n	80042cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d025      	beq.n	80042c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800427a:	e022      	b.n	80042c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004284:	d11f      	bne.n	80042c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800428a:	e01c      	b.n	80042c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	2b02      	cmp	r3, #2
 8004292:	d902      	bls.n	800429a <DMA_CheckFifoParam+0xb6>
 8004294:	2b03      	cmp	r3, #3
 8004296:	d003      	beq.n	80042a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004298:	e018      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
        break;
 800429e:	e015      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00e      	beq.n	80042ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
    break;
 80042b0:	e00b      	b.n	80042ca <DMA_CheckFifoParam+0xe6>
        break;
 80042b2:	bf00      	nop
 80042b4:	e00a      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
        break;
 80042b6:	bf00      	nop
 80042b8:	e008      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
        break;
 80042ba:	bf00      	nop
 80042bc:	e006      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
        break;
 80042be:	bf00      	nop
 80042c0:	e004      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
        break;
 80042c2:	bf00      	nop
 80042c4:	e002      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
        break;
 80042c6:	bf00      	nop
 80042c8:	e000      	b.n	80042cc <DMA_CheckFifoParam+0xe8>
    break;
 80042ca:	bf00      	nop
    }
  }

  return status;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop

080042dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a38      	ldr	r2, [pc, #224]	@ (80043d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d022      	beq.n	800433a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a36      	ldr	r2, [pc, #216]	@ (80043d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01d      	beq.n	800433a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a35      	ldr	r2, [pc, #212]	@ (80043d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d018      	beq.n	800433a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a33      	ldr	r2, [pc, #204]	@ (80043dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d013      	beq.n	800433a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a32      	ldr	r2, [pc, #200]	@ (80043e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00e      	beq.n	800433a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a30      	ldr	r2, [pc, #192]	@ (80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d009      	beq.n	800433a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2f      	ldr	r2, [pc, #188]	@ (80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d004      	beq.n	800433a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a2d      	ldr	r2, [pc, #180]	@ (80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800433e:	2300      	movs	r3, #0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01a      	beq.n	800437a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	3b08      	subs	r3, #8
 800434c:	4a28      	ldr	r2, [pc, #160]	@ (80043f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	461a      	mov	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a24      	ldr	r2, [pc, #144]	@ (80043f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004368:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	2201      	movs	r2, #1
 8004372:	409a      	lsls	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004378:	e024      	b.n	80043c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	3b10      	subs	r3, #16
 8004382:	4a1e      	ldr	r2, [pc, #120]	@ (80043fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4a1c      	ldr	r2, [pc, #112]	@ (8004400 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d806      	bhi.n	80043a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4a1b      	ldr	r2, [pc, #108]	@ (8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d902      	bls.n	80043a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3308      	adds	r3, #8
 80043a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4b18      	ldr	r3, [pc, #96]	@ (8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	461a      	mov	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a16      	ldr	r2, [pc, #88]	@ (800440c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80043b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2201      	movs	r2, #1
 80043be:	409a      	lsls	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	58025408 	.word	0x58025408
 80043d4:	5802541c 	.word	0x5802541c
 80043d8:	58025430 	.word	0x58025430
 80043dc:	58025444 	.word	0x58025444
 80043e0:	58025458 	.word	0x58025458
 80043e4:	5802546c 	.word	0x5802546c
 80043e8:	58025480 	.word	0x58025480
 80043ec:	58025494 	.word	0x58025494
 80043f0:	cccccccd 	.word	0xcccccccd
 80043f4:	16009600 	.word	0x16009600
 80043f8:	58025880 	.word	0x58025880
 80043fc:	aaaaaaab 	.word	0xaaaaaaab
 8004400:	400204b8 	.word	0x400204b8
 8004404:	4002040f 	.word	0x4002040f
 8004408:	10008200 	.word	0x10008200
 800440c:	40020880 	.word	0x40020880

08004410 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d04a      	beq.n	80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d847      	bhi.n	80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a25      	ldr	r2, [pc, #148]	@ (80044c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a24      	ldr	r2, [pc, #144]	@ (80044cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d01d      	beq.n	800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a22      	ldr	r2, [pc, #136]	@ (80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a21      	ldr	r2, [pc, #132]	@ (80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1f      	ldr	r2, [pc, #124]	@ (80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1e      	ldr	r2, [pc, #120]	@ (80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1c      	ldr	r2, [pc, #112]	@ (80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1b      	ldr	r2, [pc, #108]	@ (80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4b17      	ldr	r3, [pc, #92]	@ (80044e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	461a      	mov	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a15      	ldr	r2, [pc, #84]	@ (80044ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004498:	671a      	str	r2, [r3, #112]	@ 0x70
 800449a:	e009      	b.n	80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4b14      	ldr	r3, [pc, #80]	@ (80044f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	461a      	mov	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a11      	ldr	r2, [pc, #68]	@ (80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80044ae:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	2201      	movs	r2, #1
 80044b6:	409a      	lsls	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	58025408 	.word	0x58025408
 80044cc:	5802541c 	.word	0x5802541c
 80044d0:	58025430 	.word	0x58025430
 80044d4:	58025444 	.word	0x58025444
 80044d8:	58025458 	.word	0x58025458
 80044dc:	5802546c 	.word	0x5802546c
 80044e0:	58025480 	.word	0x58025480
 80044e4:	58025494 	.word	0x58025494
 80044e8:	1600963f 	.word	0x1600963f
 80044ec:	58025940 	.word	0x58025940
 80044f0:	1000823f 	.word	0x1000823f
 80044f4:	40020940 	.word	0x40020940

080044f8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	@ 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800450c:	2308      	movs	r3, #8
 800450e:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004510:	4b2f      	ldr	r3, [pc, #188]	@ (80045d0 <HAL_FLASH_Program+0xd8>)
 8004512:	7d1b      	ldrb	r3, [r3, #20]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_FLASH_Program+0x24>
 8004518:	2302      	movs	r3, #2
 800451a:	e054      	b.n	80045c6 <HAL_FLASH_Program+0xce>
 800451c:	4b2c      	ldr	r3, [pc, #176]	@ (80045d0 <HAL_FLASH_Program+0xd8>)
 800451e:	2201      	movs	r2, #1
 8004520:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004528:	d316      	bcc.n	8004558 <HAL_FLASH_Program+0x60>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8004530:	d212      	bcs.n	8004558 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8004532:	2301      	movs	r3, #1
 8004534:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8004536:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004538:	4b25      	ldr	r3, [pc, #148]	@ (80045d0 <HAL_FLASH_Program+0xd8>)
 800453a:	2200      	movs	r2, #0
 800453c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800453e:	6979      	ldr	r1, [r7, #20]
 8004540:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004544:	f000 f88e 	bl	8004664 <FLASH_WaitForLastOperation>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800454e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004552:	2b00      	cmp	r3, #0
 8004554:	d132      	bne.n	80045bc <HAL_FLASH_Program+0xc4>
 8004556:	e001      	b.n	800455c <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e034      	b.n	80045c6 <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800455c:	4b1d      	ldr	r3, [pc, #116]	@ (80045d4 <HAL_FLASH_Program+0xdc>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a1c      	ldr	r2, [pc, #112]	@ (80045d4 <HAL_FLASH_Program+0xdc>)
 8004562:	f043 0302 	orr.w	r3, r3, #2
 8004566:	60d3      	str	r3, [r2, #12]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004568:	f3bf 8f6f 	isb	sy
}
 800456c:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800456e:	f3bf 8f4f 	dsb	sy
}
 8004572:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	3304      	adds	r3, #4
 8004580:	623b      	str	r3, [r7, #32]
        src_addr++;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3304      	adds	r3, #4
 8004586:	61fb      	str	r3, [r7, #28]
        row_index--;
 8004588:	7efb      	ldrb	r3, [r7, #27]
 800458a:	3b01      	subs	r3, #1
 800458c:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800458e:	7efb      	ldrb	r3, [r7, #27]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ef      	bne.n	8004574 <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 8004594:	f3bf 8f6f 	isb	sy
}
 8004598:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800459a:	f3bf 8f4f 	dsb	sy
}
 800459e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80045a0:	6979      	ldr	r1, [r7, #20]
 80045a2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80045a6:	f000 f85d 	bl	8004664 <FLASH_WaitForLastOperation>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80045b0:	4b08      	ldr	r3, [pc, #32]	@ (80045d4 <HAL_FLASH_Program+0xdc>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4a07      	ldr	r2, [pc, #28]	@ (80045d4 <HAL_FLASH_Program+0xdc>)
 80045b6:	f023 0302 	bic.w	r3, r3, #2
 80045ba:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80045bc:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <HAL_FLASH_Program+0xd8>)
 80045be:	2200      	movs	r2, #0
 80045c0:	751a      	strb	r2, [r3, #20]

  return status;
 80045c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3728      	adds	r7, #40	@ 0x28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	24000dc0 	.word	0x24000dc0
 80045d4:	52002000 	.word	0x52002000

080045d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80045dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004610 <HAL_FLASH_Unlock+0x38>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80045e8:	4b09      	ldr	r3, [pc, #36]	@ (8004610 <HAL_FLASH_Unlock+0x38>)
 80045ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004614 <HAL_FLASH_Unlock+0x3c>)
 80045ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80045ee:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <HAL_FLASH_Unlock+0x38>)
 80045f0:	4a09      	ldr	r2, [pc, #36]	@ (8004618 <HAL_FLASH_Unlock+0x40>)
 80045f2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80045f4:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <HAL_FLASH_Unlock+0x38>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	52002000 	.word	0x52002000
 8004614:	45670123 	.word	0x45670123
 8004618:	cdef89ab 	.word	0xcdef89ab

0800461c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8004620:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <HAL_FLASH_Lock+0x2c>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4a08      	ldr	r2, [pc, #32]	@ (8004648 <HAL_FLASH_Lock+0x2c>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800462c:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <HAL_FLASH_Lock+0x2c>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	52002000 	.word	0x52002000

0800464c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
  */

uint32_t HAL_FLASH_GetError(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004650:	4b03      	ldr	r3, [pc, #12]	@ (8004660 <HAL_FLASH_GetError+0x14>)
 8004652:	699b      	ldr	r3, [r3, #24]
}
 8004654:	4618      	mov	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	24000dc0 	.word	0x24000dc0

08004664 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800466e:	2304      	movs	r3, #4
 8004670:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004676:	f7fc fff7 	bl	8001668 <HAL_GetTick>
 800467a:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800467c:	e010      	b.n	80046a0 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004684:	d00c      	beq.n	80046a0 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004686:	f7fc ffef 	bl	8001668 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	429a      	cmp	r2, r3
 8004694:	d302      	bcc.n	800469c <FLASH_WaitForLastOperation+0x38>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e02d      	b.n	80046fc <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80046a0:	4b18      	ldr	r3, [pc, #96]	@ (8004704 <FLASH_WaitForLastOperation+0xa0>)
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4013      	ands	r3, r2
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d0e7      	beq.n	800467e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d104      	bne.n	80046be <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80046b4:	4b13      	ldr	r3, [pc, #76]	@ (8004704 <FLASH_WaitForLastOperation+0xa0>)
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	4b13      	ldr	r3, [pc, #76]	@ (8004708 <FLASH_WaitForLastOperation+0xa4>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80046c8:	4b10      	ldr	r3, [pc, #64]	@ (800470c <FLASH_WaitForLastOperation+0xa8>)
 80046ca:	699a      	ldr	r2, [r3, #24]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	4a0e      	ldr	r2, [pc, #56]	@ (800470c <FLASH_WaitForLastOperation+0xa8>)
 80046d2:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80046d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004704 <FLASH_WaitForLastOperation+0xa0>)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e00e      	b.n	80046fc <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d10a      	bne.n	80046fa <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80046e4:	4b07      	ldr	r3, [pc, #28]	@ (8004704 <FLASH_WaitForLastOperation+0xa0>)
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f0:	d103      	bne.n	80046fa <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80046f2:	4b04      	ldr	r3, [pc, #16]	@ (8004704 <FLASH_WaitForLastOperation+0xa0>)
 80046f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80046f8:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	52002000 	.word	0x52002000
 8004708:	17ee0000 	.word	0x17ee0000
 800470c:	24000dc0 	.word	0x24000dc0

08004710 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800471e:	4b3f      	ldr	r3, [pc, #252]	@ (800481c <HAL_FLASHEx_Erase+0x10c>)
 8004720:	7d1b      	ldrb	r3, [r3, #20]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_FLASHEx_Erase+0x1a>
 8004726:	2302      	movs	r3, #2
 8004728:	e074      	b.n	8004814 <HAL_FLASHEx_Erase+0x104>
 800472a:	4b3c      	ldr	r3, [pc, #240]	@ (800481c <HAL_FLASHEx_Erase+0x10c>)
 800472c:	2201      	movs	r2, #1
 800472e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004730:	4b3a      	ldr	r3, [pc, #232]	@ (800481c <HAL_FLASHEx_Erase+0x10c>)
 8004732:	2200      	movs	r2, #0
 8004734:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8004742:	2101      	movs	r1, #1
 8004744:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004748:	f7ff ff8c 	bl	8004664 <FLASH_WaitForLastOperation>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d157      	bne.n	800480c <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d11e      	bne.n	80047a2 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f000 f85a 	bl	8004828 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d045      	beq.n	800480c <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8004780:	2101      	movs	r1, #1
 8004782:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004786:	f7ff ff6d 	bl	8004664 <FLASH_WaitForLastOperation>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8004794:	4b22      	ldr	r3, [pc, #136]	@ (8004820 <HAL_FLASHEx_Erase+0x110>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4a21      	ldr	r2, [pc, #132]	@ (8004820 <HAL_FLASHEx_Erase+0x110>)
 800479a:	f023 0308 	bic.w	r3, r3, #8
 800479e:	60d3      	str	r3, [r2, #12]
 80047a0:	e034      	b.n	800480c <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047a8:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	e024      	b.n	80047fc <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68b8      	ldr	r0, [r7, #8]
 80047be:	f000 f857 	bl	8004870 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80047ce:	2101      	movs	r1, #1
 80047d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80047d4:	f7ff ff46 	bl	8004664 <FLASH_WaitForLastOperation>
 80047d8:	4603      	mov	r3, r0
 80047da:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80047dc:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <HAL_FLASHEx_Erase+0x110>)
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	490f      	ldr	r1, [pc, #60]	@ (8004820 <HAL_FLASHEx_Erase+0x110>)
 80047e2:	4b10      	ldr	r3, [pc, #64]	@ (8004824 <HAL_FLASHEx_Erase+0x114>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	601a      	str	r2, [r3, #0]
          break;
 80047f4:	e00a      	b.n	800480c <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	3301      	adds	r3, #1
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4413      	add	r3, r2
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	429a      	cmp	r2, r3
 800480a:	d3d2      	bcc.n	80047b2 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800480c:	4b03      	ldr	r3, [pc, #12]	@ (800481c <HAL_FLASHEx_Erase+0x10c>)
 800480e:	2200      	movs	r2, #0
 8004810:	751a      	strb	r2, [r3, #20]

  return status;
 8004812:	7bfb      	ldrb	r3, [r7, #15]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	24000dc0 	.word	0x24000dc0
 8004820:	52002000 	.word	0x52002000
 8004824:	fffff8fb 	.word	0xfffff8fb

08004828 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d011      	beq.n	8004860 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800483c:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <FLASH_MassErase+0x44>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a0a      	ldr	r2, [pc, #40]	@ (800486c <FLASH_MassErase+0x44>)
 8004842:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004846:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8004848:	4b08      	ldr	r3, [pc, #32]	@ (800486c <FLASH_MassErase+0x44>)
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	4907      	ldr	r1, [pc, #28]	@ (800486c <FLASH_MassErase+0x44>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4313      	orrs	r3, r2
 8004852:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <FLASH_MassErase+0x44>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4a04      	ldr	r2, [pc, #16]	@ (800486c <FLASH_MassErase+0x44>)
 800485a:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800485e:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	52002000 	.word	0x52002000

08004870 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d010      	beq.n	80048a8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8004886:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <FLASH_Erase_Sector+0x44>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	4a0a      	ldr	r2, [pc, #40]	@ (80048b4 <FLASH_Erase_Sector+0x44>)
 800488c:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8004890:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8004892:	4b08      	ldr	r3, [pc, #32]	@ (80048b4 <FLASH_Erase_Sector+0x44>)
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	0219      	lsls	r1, r3, #8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	430b      	orrs	r3, r1
 800489e:	4313      	orrs	r3, r2
 80048a0:	4a04      	ldr	r2, [pc, #16]	@ (80048b4 <FLASH_Erase_Sector+0x44>)
 80048a2:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80048a6:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	52002000 	.word	0x52002000

080048b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	@ 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048c6:	4b86      	ldr	r3, [pc, #536]	@ (8004ae0 <HAL_GPIO_Init+0x228>)
 80048c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048ca:	e18c      	b.n	8004be6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	2101      	movs	r1, #1
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 817e 	beq.w	8004be0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d005      	beq.n	80048fc <HAL_GPIO_Init+0x44>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d130      	bne.n	800495e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	2203      	movs	r2, #3
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004932:	2201      	movs	r2, #1
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 0201 	and.w	r2, r3, #1
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4313      	orrs	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b03      	cmp	r3, #3
 8004968:	d017      	beq.n	800499a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	2203      	movs	r2, #3
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d123      	bne.n	80049ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	08da      	lsrs	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3208      	adds	r2, #8
 80049ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	220f      	movs	r2, #15
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4013      	ands	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	08da      	lsrs	r2, r3, #3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3208      	adds	r2, #8
 80049e8:	69b9      	ldr	r1, [r7, #24]
 80049ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	2203      	movs	r2, #3
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f003 0203 	and.w	r2, r3, #3
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80d8 	beq.w	8004be0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a30:	4b2c      	ldr	r3, [pc, #176]	@ (8004ae4 <HAL_GPIO_Init+0x22c>)
 8004a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a36:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae4 <HAL_GPIO_Init+0x22c>)
 8004a38:	f043 0302 	orr.w	r3, r3, #2
 8004a3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a40:	4b28      	ldr	r3, [pc, #160]	@ (8004ae4 <HAL_GPIO_Init+0x22c>)
 8004a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a4e:	4a26      	ldr	r2, [pc, #152]	@ (8004ae8 <HAL_GPIO_Init+0x230>)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	3302      	adds	r3, #2
 8004a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	220f      	movs	r2, #15
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1d      	ldr	r2, [pc, #116]	@ (8004aec <HAL_GPIO_Init+0x234>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d04a      	beq.n	8004b10 <HAL_GPIO_Init+0x258>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004af0 <HAL_GPIO_Init+0x238>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02b      	beq.n	8004ada <HAL_GPIO_Init+0x222>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1b      	ldr	r2, [pc, #108]	@ (8004af4 <HAL_GPIO_Init+0x23c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d025      	beq.n	8004ad6 <HAL_GPIO_Init+0x21e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004af8 <HAL_GPIO_Init+0x240>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01f      	beq.n	8004ad2 <HAL_GPIO_Init+0x21a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a19      	ldr	r2, [pc, #100]	@ (8004afc <HAL_GPIO_Init+0x244>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d019      	beq.n	8004ace <HAL_GPIO_Init+0x216>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	@ (8004b00 <HAL_GPIO_Init+0x248>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_GPIO_Init+0x212>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a17      	ldr	r2, [pc, #92]	@ (8004b04 <HAL_GPIO_Init+0x24c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00d      	beq.n	8004ac6 <HAL_GPIO_Init+0x20e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a16      	ldr	r2, [pc, #88]	@ (8004b08 <HAL_GPIO_Init+0x250>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <HAL_GPIO_Init+0x20a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a15      	ldr	r2, [pc, #84]	@ (8004b0c <HAL_GPIO_Init+0x254>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d101      	bne.n	8004abe <HAL_GPIO_Init+0x206>
 8004aba:	2309      	movs	r3, #9
 8004abc:	e029      	b.n	8004b12 <HAL_GPIO_Init+0x25a>
 8004abe:	230a      	movs	r3, #10
 8004ac0:	e027      	b.n	8004b12 <HAL_GPIO_Init+0x25a>
 8004ac2:	2307      	movs	r3, #7
 8004ac4:	e025      	b.n	8004b12 <HAL_GPIO_Init+0x25a>
 8004ac6:	2306      	movs	r3, #6
 8004ac8:	e023      	b.n	8004b12 <HAL_GPIO_Init+0x25a>
 8004aca:	2305      	movs	r3, #5
 8004acc:	e021      	b.n	8004b12 <HAL_GPIO_Init+0x25a>
 8004ace:	2304      	movs	r3, #4
 8004ad0:	e01f      	b.n	8004b12 <HAL_GPIO_Init+0x25a>
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e01d      	b.n	8004b12 <HAL_GPIO_Init+0x25a>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e01b      	b.n	8004b12 <HAL_GPIO_Init+0x25a>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e019      	b.n	8004b12 <HAL_GPIO_Init+0x25a>
 8004ade:	bf00      	nop
 8004ae0:	58000080 	.word	0x58000080
 8004ae4:	58024400 	.word	0x58024400
 8004ae8:	58000400 	.word	0x58000400
 8004aec:	58020000 	.word	0x58020000
 8004af0:	58020400 	.word	0x58020400
 8004af4:	58020800 	.word	0x58020800
 8004af8:	58020c00 	.word	0x58020c00
 8004afc:	58021000 	.word	0x58021000
 8004b00:	58021400 	.word	0x58021400
 8004b04:	58021800 	.word	0x58021800
 8004b08:	58021c00 	.word	0x58021c00
 8004b0c:	58022400 	.word	0x58022400
 8004b10:	2300      	movs	r3, #0
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	f002 0203 	and.w	r2, r2, #3
 8004b18:	0092      	lsls	r2, r2, #2
 8004b1a:	4093      	lsls	r3, r2
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b22:	4938      	ldr	r1, [pc, #224]	@ (8004c04 <HAL_GPIO_Init+0x34c>)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	3302      	adds	r3, #2
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	3301      	adds	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f ae6b 	bne.w	80048cc <HAL_GPIO_Init+0x14>
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	3724      	adds	r7, #36	@ 0x24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	58000400 	.word	0x58000400

08004c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]
 8004c14:	4613      	mov	r3, r2
 8004c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c18:	787b      	ldrb	r3, [r7, #1]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c24:	e003      	b.n	8004c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c26:	887b      	ldrh	r3, [r7, #2]
 8004c28:	041a      	lsls	r2, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	619a      	str	r2, [r3, #24]
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c44:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <HAL_PWREx_ConfigSupply+0x70>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d00a      	beq.n	8004c66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c50:	4b16      	ldr	r3, [pc, #88]	@ (8004cac <HAL_PWREx_ConfigSupply+0x70>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d001      	beq.n	8004c62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e01f      	b.n	8004ca2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	e01d      	b.n	8004ca2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c66:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <HAL_PWREx_ConfigSupply+0x70>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f023 0207 	bic.w	r2, r3, #7
 8004c6e:	490f      	ldr	r1, [pc, #60]	@ (8004cac <HAL_PWREx_ConfigSupply+0x70>)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c76:	f7fc fcf7 	bl	8001668 <HAL_GetTick>
 8004c7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c7c:	e009      	b.n	8004c92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c7e:	f7fc fcf3 	bl	8001668 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c8c:	d901      	bls.n	8004c92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e007      	b.n	8004ca2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <HAL_PWREx_ConfigSupply+0x70>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c9e:	d1ee      	bne.n	8004c7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	58024800 	.word	0x58024800

08004cb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08c      	sub	sp, #48	@ 0x30
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e3c8      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8087 	beq.w	8004dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd0:	4b88      	ldr	r3, [pc, #544]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cda:	4b86      	ldr	r3, [pc, #536]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce2:	2b10      	cmp	r3, #16
 8004ce4:	d007      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x46>
 8004ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce8:	2b18      	cmp	r3, #24
 8004cea:	d110      	bne.n	8004d0e <HAL_RCC_OscConfig+0x5e>
 8004cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d10b      	bne.n	8004d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d06c      	beq.n	8004ddc <HAL_RCC_OscConfig+0x12c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d168      	bne.n	8004ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e3a2      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d16:	d106      	bne.n	8004d26 <HAL_RCC_OscConfig+0x76>
 8004d18:	4b76      	ldr	r3, [pc, #472]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a75      	ldr	r2, [pc, #468]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	e02e      	b.n	8004d84 <HAL_RCC_OscConfig+0xd4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x98>
 8004d2e:	4b71      	ldr	r3, [pc, #452]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a70      	ldr	r2, [pc, #448]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	4b6e      	ldr	r3, [pc, #440]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a6d      	ldr	r2, [pc, #436]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	e01d      	b.n	8004d84 <HAL_RCC_OscConfig+0xd4>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCC_OscConfig+0xbc>
 8004d52:	4b68      	ldr	r3, [pc, #416]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a67      	ldr	r2, [pc, #412]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	4b65      	ldr	r3, [pc, #404]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a64      	ldr	r2, [pc, #400]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e00b      	b.n	8004d84 <HAL_RCC_OscConfig+0xd4>
 8004d6c:	4b61      	ldr	r3, [pc, #388]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a60      	ldr	r2, [pc, #384]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	4b5e      	ldr	r3, [pc, #376]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fc fc6c 	bl	8001668 <HAL_GetTick>
 8004d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d94:	f7fc fc68 	bl	8001668 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	@ 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e356      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004da6:	4b53      	ldr	r3, [pc, #332]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0xe4>
 8004db2:	e014      	b.n	8004dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fc fc58 	bl	8001668 <HAL_GetTick>
 8004db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dbc:	f7fc fc54 	bl	8001668 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	@ 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e342      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dce:	4b49      	ldr	r3, [pc, #292]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x10c>
 8004dda:	e000      	b.n	8004dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 808c 	beq.w	8004f04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dec:	4b41      	ldr	r3, [pc, #260]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004df4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004df6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <HAL_RCC_OscConfig+0x162>
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	2b18      	cmp	r3, #24
 8004e06:	d137      	bne.n	8004e78 <HAL_RCC_OscConfig+0x1c8>
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d132      	bne.n	8004e78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e12:	4b38      	ldr	r3, [pc, #224]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_RCC_OscConfig+0x17a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e314      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e2a:	4b32      	ldr	r3, [pc, #200]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 0219 	bic.w	r2, r3, #25
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	492f      	ldr	r1, [pc, #188]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fc fc14 	bl	8001668 <HAL_GetTick>
 8004e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e44:	f7fc fc10 	bl	8001668 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e2fe      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e56:	4b27      	ldr	r3, [pc, #156]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e62:	4b24      	ldr	r3, [pc, #144]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	061b      	lsls	r3, r3, #24
 8004e70:	4920      	ldr	r1, [pc, #128]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e76:	e045      	b.n	8004f04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d026      	beq.n	8004ece <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e80:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f023 0219 	bic.w	r2, r3, #25
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4919      	ldr	r1, [pc, #100]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fc fbe9 	bl	8001668 <HAL_GetTick>
 8004e96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e9a:	f7fc fbe5 	bl	8001668 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e2d3      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eac:	4b11      	ldr	r3, [pc, #68]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	061b      	lsls	r3, r3, #24
 8004ec6:	490b      	ldr	r1, [pc, #44]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	604b      	str	r3, [r1, #4]
 8004ecc:	e01a      	b.n	8004f04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ece:	4b09      	ldr	r3, [pc, #36]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a08      	ldr	r2, [pc, #32]	@ (8004ef4 <HAL_RCC_OscConfig+0x244>)
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eda:	f7fc fbc5 	bl	8001668 <HAL_GetTick>
 8004ede:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee2:	f7fc fbc1 	bl	8001668 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d903      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e2af      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
 8004ef4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ef8:	4b96      	ldr	r3, [pc, #600]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1ee      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d06a      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f10:	4b90      	ldr	r3, [pc, #576]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f1a:	4b8e      	ldr	r3, [pc, #568]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d007      	beq.n	8004f36 <HAL_RCC_OscConfig+0x286>
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b18      	cmp	r3, #24
 8004f2a:	d11b      	bne.n	8004f64 <HAL_RCC_OscConfig+0x2b4>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d116      	bne.n	8004f64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f36:	4b87      	ldr	r3, [pc, #540]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_RCC_OscConfig+0x29e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	2b80      	cmp	r3, #128	@ 0x80
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e282      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f4e:	4b81      	ldr	r3, [pc, #516]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	497d      	ldr	r1, [pc, #500]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f62:	e040      	b.n	8004fe6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d023      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f6c:	4b79      	ldr	r3, [pc, #484]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a78      	ldr	r2, [pc, #480]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fc fb76 	bl	8001668 <HAL_GetTick>
 8004f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f80:	f7fc fb72 	bl	8001668 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e260      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f92:	4b70      	ldr	r3, [pc, #448]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f0      	beq.n	8004f80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	061b      	lsls	r3, r3, #24
 8004fac:	4969      	ldr	r1, [pc, #420]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60cb      	str	r3, [r1, #12]
 8004fb2:	e018      	b.n	8004fe6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fb4:	4b67      	ldr	r3, [pc, #412]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a66      	ldr	r2, [pc, #408]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004fba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc0:	f7fc fb52 	bl	8001668 <HAL_GetTick>
 8004fc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fc8:	f7fc fb4e 	bl	8001668 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e23c      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fda:	4b5e      	ldr	r3, [pc, #376]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d036      	beq.n	8005060 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d019      	beq.n	800502e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ffa:	4b56      	ldr	r3, [pc, #344]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8004ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ffe:	4a55      	ldr	r2, [pc, #340]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005006:	f7fc fb2f 	bl	8001668 <HAL_GetTick>
 800500a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500e:	f7fc fb2b 	bl	8001668 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e219      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005020:	4b4c      	ldr	r3, [pc, #304]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8005022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x35e>
 800502c:	e018      	b.n	8005060 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800502e:	4b49      	ldr	r3, [pc, #292]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8005030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005032:	4a48      	ldr	r2, [pc, #288]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503a:	f7fc fb15 	bl	8001668 <HAL_GetTick>
 800503e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005042:	f7fc fb11 	bl	8001668 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e1ff      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005054:	4b3f      	ldr	r3, [pc, #252]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8005056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f0      	bne.n	8005042 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d036      	beq.n	80050da <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d019      	beq.n	80050a8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005074:	4b37      	ldr	r3, [pc, #220]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a36      	ldr	r2, [pc, #216]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 800507a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800507e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005080:	f7fc faf2 	bl	8001668 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005088:	f7fc faee 	bl	8001668 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e1dc      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800509a:	4b2e      	ldr	r3, [pc, #184]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x3d8>
 80050a6:	e018      	b.n	80050da <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a29      	ldr	r2, [pc, #164]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 80050ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050b4:	f7fc fad8 	bl	8001668 <HAL_GetTick>
 80050b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050bc:	f7fc fad4 	bl	8001668 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e1c2      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050ce:	4b21      	ldr	r3, [pc, #132]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 8086 	beq.w	80051f4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005158 <HAL_RCC_OscConfig+0x4a8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005158 <HAL_RCC_OscConfig+0x4a8>)
 80050ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050f4:	f7fc fab8 	bl	8001668 <HAL_GetTick>
 80050f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fc:	f7fc fab4 	bl	8001668 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b64      	cmp	r3, #100	@ 0x64
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e1a2      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800510e:	4b12      	ldr	r3, [pc, #72]	@ (8005158 <HAL_RCC_OscConfig+0x4a8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d106      	bne.n	8005130 <HAL_RCC_OscConfig+0x480>
 8005122:	4b0c      	ldr	r3, [pc, #48]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005126:	4a0b      	ldr	r2, [pc, #44]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	6713      	str	r3, [r2, #112]	@ 0x70
 800512e:	e032      	b.n	8005196 <HAL_RCC_OscConfig+0x4e6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d111      	bne.n	800515c <HAL_RCC_OscConfig+0x4ac>
 8005138:	4b06      	ldr	r3, [pc, #24]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513c:	4a05      	ldr	r2, [pc, #20]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	6713      	str	r3, [r2, #112]	@ 0x70
 8005144:	4b03      	ldr	r3, [pc, #12]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005148:	4a02      	ldr	r2, [pc, #8]	@ (8005154 <HAL_RCC_OscConfig+0x4a4>)
 800514a:	f023 0304 	bic.w	r3, r3, #4
 800514e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005150:	e021      	b.n	8005196 <HAL_RCC_OscConfig+0x4e6>
 8005152:	bf00      	nop
 8005154:	58024400 	.word	0x58024400
 8005158:	58024800 	.word	0x58024800
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b05      	cmp	r3, #5
 8005162:	d10c      	bne.n	800517e <HAL_RCC_OscConfig+0x4ce>
 8005164:	4b83      	ldr	r3, [pc, #524]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005168:	4a82      	ldr	r2, [pc, #520]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 800516a:	f043 0304 	orr.w	r3, r3, #4
 800516e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005170:	4b80      	ldr	r3, [pc, #512]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005174:	4a7f      	ldr	r2, [pc, #508]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	6713      	str	r3, [r2, #112]	@ 0x70
 800517c:	e00b      	b.n	8005196 <HAL_RCC_OscConfig+0x4e6>
 800517e:	4b7d      	ldr	r3, [pc, #500]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005182:	4a7c      	ldr	r2, [pc, #496]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005184:	f023 0301 	bic.w	r3, r3, #1
 8005188:	6713      	str	r3, [r2, #112]	@ 0x70
 800518a:	4b7a      	ldr	r3, [pc, #488]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518e:	4a79      	ldr	r2, [pc, #484]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005190:	f023 0304 	bic.w	r3, r3, #4
 8005194:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d015      	beq.n	80051ca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519e:	f7fc fa63 	bl	8001668 <HAL_GetTick>
 80051a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051a4:	e00a      	b.n	80051bc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a6:	f7fc fa5f 	bl	8001668 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e14b      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0ee      	beq.n	80051a6 <HAL_RCC_OscConfig+0x4f6>
 80051c8:	e014      	b.n	80051f4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ca:	f7fc fa4d 	bl	8001668 <HAL_GetTick>
 80051ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051d0:	e00a      	b.n	80051e8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d2:	f7fc fa49 	bl	8001668 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e135      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051e8:	4b62      	ldr	r3, [pc, #392]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1ee      	bne.n	80051d2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 812a 	beq.w	8005452 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005206:	2b18      	cmp	r3, #24
 8005208:	f000 80ba 	beq.w	8005380 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005210:	2b02      	cmp	r3, #2
 8005212:	f040 8095 	bne.w	8005340 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005216:	4b57      	ldr	r3, [pc, #348]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a56      	ldr	r2, [pc, #344]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 800521c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005222:	f7fc fa21 	bl	8001668 <HAL_GetTick>
 8005226:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522a:	f7fc fa1d 	bl	8001668 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e10b      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800523c:	4b4d      	ldr	r3, [pc, #308]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f0      	bne.n	800522a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005248:	4b4a      	ldr	r3, [pc, #296]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 800524a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800524c:	4b4a      	ldr	r3, [pc, #296]	@ (8005378 <HAL_RCC_OscConfig+0x6c8>)
 800524e:	4013      	ands	r3, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005258:	0112      	lsls	r2, r2, #4
 800525a:	430a      	orrs	r2, r1
 800525c:	4945      	ldr	r1, [pc, #276]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 800525e:	4313      	orrs	r3, r2
 8005260:	628b      	str	r3, [r1, #40]	@ 0x28
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005266:	3b01      	subs	r3, #1
 8005268:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005270:	3b01      	subs	r3, #1
 8005272:	025b      	lsls	r3, r3, #9
 8005274:	b29b      	uxth	r3, r3
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	3b01      	subs	r3, #1
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528a:	3b01      	subs	r3, #1
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005292:	4938      	ldr	r1, [pc, #224]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005294:	4313      	orrs	r3, r2
 8005296:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005298:	4b36      	ldr	r3, [pc, #216]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 800529a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529c:	4a35      	ldr	r2, [pc, #212]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052a4:	4b33      	ldr	r3, [pc, #204]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052a8:	4b34      	ldr	r3, [pc, #208]	@ (800537c <HAL_RCC_OscConfig+0x6cc>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80052b0:	00d2      	lsls	r2, r2, #3
 80052b2:	4930      	ldr	r1, [pc, #192]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	f023 020c 	bic.w	r2, r3, #12
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c4:	492b      	ldr	r1, [pc, #172]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	f023 0202 	bic.w	r2, r3, #2
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d6:	4927      	ldr	r1, [pc, #156]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052dc:	4b25      	ldr	r3, [pc, #148]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	4a24      	ldr	r2, [pc, #144]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e8:	4b22      	ldr	r3, [pc, #136]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	4a21      	ldr	r2, [pc, #132]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 80052fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005300:	4b1c      	ldr	r3, [pc, #112]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005304:	4a1b      	ldr	r2, [pc, #108]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800530c:	4b19      	ldr	r3, [pc, #100]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a18      	ldr	r2, [pc, #96]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fc f9a6 	bl	8001668 <HAL_GetTick>
 800531c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005320:	f7fc f9a2 	bl	8001668 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e090      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0f0      	beq.n	8005320 <HAL_RCC_OscConfig+0x670>
 800533e:	e088      	b.n	8005452 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005340:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a0b      	ldr	r2, [pc, #44]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800534a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fc f98c 	bl	8001668 <HAL_GetTick>
 8005350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005354:	f7fc f988 	bl	8001668 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e076      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005366:	4b03      	ldr	r3, [pc, #12]	@ (8005374 <HAL_RCC_OscConfig+0x6c4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x6a4>
 8005372:	e06e      	b.n	8005452 <HAL_RCC_OscConfig+0x7a2>
 8005374:	58024400 	.word	0x58024400
 8005378:	fffffc0c 	.word	0xfffffc0c
 800537c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005380:	4b36      	ldr	r3, [pc, #216]	@ (800545c <HAL_RCC_OscConfig+0x7ac>)
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005386:	4b35      	ldr	r3, [pc, #212]	@ (800545c <HAL_RCC_OscConfig+0x7ac>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	2b01      	cmp	r3, #1
 8005392:	d031      	beq.n	80053f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f003 0203 	and.w	r2, r3, #3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d12a      	bne.n	80053f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d122      	bne.n	80053f8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053be:	429a      	cmp	r2, r3
 80053c0:	d11a      	bne.n	80053f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	0a5b      	lsrs	r3, r3, #9
 80053c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d111      	bne.n	80053f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	0c1b      	lsrs	r3, r3, #16
 80053d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d108      	bne.n	80053f8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	0e1b      	lsrs	r3, r3, #24
 80053ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e02b      	b.n	8005454 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80053fc:	4b17      	ldr	r3, [pc, #92]	@ (800545c <HAL_RCC_OscConfig+0x7ac>)
 80053fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005400:	08db      	lsrs	r3, r3, #3
 8005402:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005406:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	429a      	cmp	r2, r3
 8005410:	d01f      	beq.n	8005452 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005412:	4b12      	ldr	r3, [pc, #72]	@ (800545c <HAL_RCC_OscConfig+0x7ac>)
 8005414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005416:	4a11      	ldr	r2, [pc, #68]	@ (800545c <HAL_RCC_OscConfig+0x7ac>)
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800541e:	f7fc f923 	bl	8001668 <HAL_GetTick>
 8005422:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005424:	bf00      	nop
 8005426:	f7fc f91f 	bl	8001668 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	4293      	cmp	r3, r2
 8005430:	d0f9      	beq.n	8005426 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005432:	4b0a      	ldr	r3, [pc, #40]	@ (800545c <HAL_RCC_OscConfig+0x7ac>)
 8005434:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005436:	4b0a      	ldr	r3, [pc, #40]	@ (8005460 <HAL_RCC_OscConfig+0x7b0>)
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800543e:	00d2      	lsls	r2, r2, #3
 8005440:	4906      	ldr	r1, [pc, #24]	@ (800545c <HAL_RCC_OscConfig+0x7ac>)
 8005442:	4313      	orrs	r3, r2
 8005444:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005446:	4b05      	ldr	r3, [pc, #20]	@ (800545c <HAL_RCC_OscConfig+0x7ac>)
 8005448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544a:	4a04      	ldr	r2, [pc, #16]	@ (800545c <HAL_RCC_OscConfig+0x7ac>)
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3730      	adds	r7, #48	@ 0x30
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	58024400 	.word	0x58024400
 8005460:	ffff0007 	.word	0xffff0007

08005464 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e19c      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005478:	4b8a      	ldr	r3, [pc, #552]	@ (80056a4 <HAL_RCC_ClockConfig+0x240>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d910      	bls.n	80054a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b87      	ldr	r3, [pc, #540]	@ (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 020f 	bic.w	r2, r3, #15
 800548e:	4985      	ldr	r1, [pc, #532]	@ (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b83      	ldr	r3, [pc, #524]	@ (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e184      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d010      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	4b7b      	ldr	r3, [pc, #492]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d908      	bls.n	80054d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054c4:	4b78      	ldr	r3, [pc, #480]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	4975      	ldr	r1, [pc, #468]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d010      	beq.n	8005504 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	4b70      	ldr	r3, [pc, #448]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d908      	bls.n	8005504 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054f2:	4b6d      	ldr	r3, [pc, #436]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	496a      	ldr	r1, [pc, #424]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005500:	4313      	orrs	r3, r2
 8005502:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	d010      	beq.n	8005532 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699a      	ldr	r2, [r3, #24]
 8005514:	4b64      	ldr	r3, [pc, #400]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800551c:	429a      	cmp	r2, r3
 800551e:	d908      	bls.n	8005532 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005520:	4b61      	ldr	r3, [pc, #388]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	495e      	ldr	r1, [pc, #376]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 800552e:	4313      	orrs	r3, r2
 8005530:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d010      	beq.n	8005560 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69da      	ldr	r2, [r3, #28]
 8005542:	4b59      	ldr	r3, [pc, #356]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800554a:	429a      	cmp	r2, r3
 800554c:	d908      	bls.n	8005560 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800554e:	4b56      	ldr	r3, [pc, #344]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	4953      	ldr	r1, [pc, #332]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 800555c:	4313      	orrs	r3, r2
 800555e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d010      	beq.n	800558e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	4b4d      	ldr	r3, [pc, #308]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	429a      	cmp	r2, r3
 800557a:	d908      	bls.n	800558e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557c:	4b4a      	ldr	r3, [pc, #296]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f023 020f 	bic.w	r2, r3, #15
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4947      	ldr	r1, [pc, #284]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 800558a:	4313      	orrs	r3, r2
 800558c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d055      	beq.n	8005646 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800559a:	4b43      	ldr	r3, [pc, #268]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	4940      	ldr	r1, [pc, #256]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d107      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055b4:	4b3c      	ldr	r3, [pc, #240]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d121      	bne.n	8005604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e0f6      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d107      	bne.n	80055dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055cc:	4b36      	ldr	r3, [pc, #216]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d115      	bne.n	8005604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0ea      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d107      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055e4:	4b30      	ldr	r3, [pc, #192]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0de      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055f4:	4b2c      	ldr	r3, [pc, #176]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e0d6      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005604:	4b28      	ldr	r3, [pc, #160]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f023 0207 	bic.w	r2, r3, #7
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4925      	ldr	r1, [pc, #148]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005612:	4313      	orrs	r3, r2
 8005614:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005616:	f7fc f827 	bl	8001668 <HAL_GetTick>
 800561a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561c:	e00a      	b.n	8005634 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800561e:	f7fc f823 	bl	8001668 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e0be      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005634:	4b1c      	ldr	r3, [pc, #112]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	429a      	cmp	r2, r3
 8005644:	d1eb      	bne.n	800561e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d010      	beq.n	8005674 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	4b14      	ldr	r3, [pc, #80]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	429a      	cmp	r2, r3
 8005660:	d208      	bcs.n	8005674 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005662:	4b11      	ldr	r3, [pc, #68]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f023 020f 	bic.w	r2, r3, #15
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	490e      	ldr	r1, [pc, #56]	@ (80056a8 <HAL_RCC_ClockConfig+0x244>)
 8005670:	4313      	orrs	r3, r2
 8005672:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005674:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d214      	bcs.n	80056ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b08      	ldr	r3, [pc, #32]	@ (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 020f 	bic.w	r2, r3, #15
 800568a:	4906      	ldr	r1, [pc, #24]	@ (80056a4 <HAL_RCC_ClockConfig+0x240>)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	4313      	orrs	r3, r2
 8005690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005692:	4b04      	ldr	r3, [pc, #16]	@ (80056a4 <HAL_RCC_ClockConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d005      	beq.n	80056ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e086      	b.n	80057b2 <HAL_RCC_ClockConfig+0x34e>
 80056a4:	52002000 	.word	0x52002000
 80056a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d010      	beq.n	80056da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	4b3f      	ldr	r3, [pc, #252]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d208      	bcs.n	80056da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056c8:	4b3c      	ldr	r3, [pc, #240]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	4939      	ldr	r1, [pc, #228]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d010      	beq.n	8005708 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	4b34      	ldr	r3, [pc, #208]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d208      	bcs.n	8005708 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056f6:	4b31      	ldr	r3, [pc, #196]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	492e      	ldr	r1, [pc, #184]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005704:	4313      	orrs	r3, r2
 8005706:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d010      	beq.n	8005736 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	4b28      	ldr	r3, [pc, #160]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005720:	429a      	cmp	r2, r3
 8005722:	d208      	bcs.n	8005736 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005724:	4b25      	ldr	r3, [pc, #148]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	4922      	ldr	r1, [pc, #136]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005732:	4313      	orrs	r3, r2
 8005734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d010      	beq.n	8005764 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	4b1d      	ldr	r3, [pc, #116]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800574e:	429a      	cmp	r2, r3
 8005750:	d208      	bcs.n	8005764 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005752:	4b1a      	ldr	r3, [pc, #104]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4917      	ldr	r1, [pc, #92]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005760:	4313      	orrs	r3, r2
 8005762:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005764:	f000 f834 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 8005768:	4602      	mov	r2, r0
 800576a:	4b14      	ldr	r3, [pc, #80]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	0a1b      	lsrs	r3, r3, #8
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	4912      	ldr	r1, [pc, #72]	@ (80057c0 <HAL_RCC_ClockConfig+0x35c>)
 8005776:	5ccb      	ldrb	r3, [r1, r3]
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
 8005780:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005782:	4b0e      	ldr	r3, [pc, #56]	@ (80057bc <HAL_RCC_ClockConfig+0x358>)
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	4a0d      	ldr	r2, [pc, #52]	@ (80057c0 <HAL_RCC_ClockConfig+0x35c>)
 800578c:	5cd3      	ldrb	r3, [r2, r3]
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	4a0a      	ldr	r2, [pc, #40]	@ (80057c4 <HAL_RCC_ClockConfig+0x360>)
 800579a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800579c:	4a0a      	ldr	r2, [pc, #40]	@ (80057c8 <HAL_RCC_ClockConfig+0x364>)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80057a2:	4b0a      	ldr	r3, [pc, #40]	@ (80057cc <HAL_RCC_ClockConfig+0x368>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fb fdb2 	bl	8001310 <HAL_InitTick>
 80057ac:	4603      	mov	r3, r0
 80057ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
 80057c0:	08009f88 	.word	0x08009f88
 80057c4:	24000004 	.word	0x24000004
 80057c8:	24000000 	.word	0x24000000
 80057cc:	24000008 	.word	0x24000008

080057d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b089      	sub	sp, #36	@ 0x24
 80057d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057d6:	4bb3      	ldr	r3, [pc, #716]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057de:	2b18      	cmp	r3, #24
 80057e0:	f200 8155 	bhi.w	8005a8e <HAL_RCC_GetSysClockFreq+0x2be>
 80057e4:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80057e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	08005851 	.word	0x08005851
 80057f0:	08005a8f 	.word	0x08005a8f
 80057f4:	08005a8f 	.word	0x08005a8f
 80057f8:	08005a8f 	.word	0x08005a8f
 80057fc:	08005a8f 	.word	0x08005a8f
 8005800:	08005a8f 	.word	0x08005a8f
 8005804:	08005a8f 	.word	0x08005a8f
 8005808:	08005a8f 	.word	0x08005a8f
 800580c:	08005877 	.word	0x08005877
 8005810:	08005a8f 	.word	0x08005a8f
 8005814:	08005a8f 	.word	0x08005a8f
 8005818:	08005a8f 	.word	0x08005a8f
 800581c:	08005a8f 	.word	0x08005a8f
 8005820:	08005a8f 	.word	0x08005a8f
 8005824:	08005a8f 	.word	0x08005a8f
 8005828:	08005a8f 	.word	0x08005a8f
 800582c:	0800587d 	.word	0x0800587d
 8005830:	08005a8f 	.word	0x08005a8f
 8005834:	08005a8f 	.word	0x08005a8f
 8005838:	08005a8f 	.word	0x08005a8f
 800583c:	08005a8f 	.word	0x08005a8f
 8005840:	08005a8f 	.word	0x08005a8f
 8005844:	08005a8f 	.word	0x08005a8f
 8005848:	08005a8f 	.word	0x08005a8f
 800584c:	08005883 	.word	0x08005883
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005850:	4b94      	ldr	r3, [pc, #592]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0320 	and.w	r3, r3, #32
 8005858:	2b00      	cmp	r3, #0
 800585a:	d009      	beq.n	8005870 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800585c:	4b91      	ldr	r3, [pc, #580]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	08db      	lsrs	r3, r3, #3
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	4a90      	ldr	r2, [pc, #576]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
 800586c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800586e:	e111      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005870:	4b8d      	ldr	r3, [pc, #564]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005872:	61bb      	str	r3, [r7, #24]
      break;
 8005874:	e10e      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005876:	4b8d      	ldr	r3, [pc, #564]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005878:	61bb      	str	r3, [r7, #24]
      break;
 800587a:	e10b      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800587c:	4b8c      	ldr	r3, [pc, #560]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800587e:	61bb      	str	r3, [r7, #24]
      break;
 8005880:	e108      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005882:	4b88      	ldr	r3, [pc, #544]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800588c:	4b85      	ldr	r3, [pc, #532]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005896:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005898:	4b82      	ldr	r3, [pc, #520]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80058a2:	4b80      	ldr	r3, [pc, #512]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a6:	08db      	lsrs	r3, r3, #3
 80058a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	fb02 f303 	mul.w	r3, r2, r3
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80e1 	beq.w	8005a88 <HAL_RCC_GetSysClockFreq+0x2b8>
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	f000 8083 	beq.w	80059d4 <HAL_RCC_GetSysClockFreq+0x204>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	f200 80a1 	bhi.w	8005a18 <HAL_RCC_GetSysClockFreq+0x248>
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_RCC_GetSysClockFreq+0x114>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d056      	beq.n	8005990 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058e2:	e099      	b.n	8005a18 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058e4:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d02d      	beq.n	800594c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058f0:	4b6c      	ldr	r3, [pc, #432]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	08db      	lsrs	r3, r3, #3
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	4a6b      	ldr	r2, [pc, #428]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005900:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591a:	4b62      	ldr	r3, [pc, #392]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592a:	ed97 6a02 	vldr	s12, [r7, #8]
 800592e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800593e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005946:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800594a:	e087      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005956:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005ab8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800595a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800595e:	4b51      	ldr	r3, [pc, #324]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800596e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005972:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800597e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800598e:	e065      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005abc <HAL_RCC_GetSysClockFreq+0x2ec>
 800599e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a2:	4b40      	ldr	r3, [pc, #256]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80059b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059d2:	e043      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ac0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e6:	4b2f      	ldr	r3, [pc, #188]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a16:	e021      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005abc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a3e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005ab4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a5a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a5c:	4b11      	ldr	r3, [pc, #68]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a60:	0a5b      	lsrs	r3, r3, #9
 8005a62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a66:	3301      	adds	r3, #1
 8005a68:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	ee07 3a90 	vmov	s15, r3
 8005a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a74:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a80:	ee17 3a90 	vmov	r3, s15
 8005a84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a86:	e005      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61bb      	str	r3, [r7, #24]
      break;
 8005a8c:	e002      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a8e:	4b07      	ldr	r3, [pc, #28]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a90:	61bb      	str	r3, [r7, #24]
      break;
 8005a92:	bf00      	nop
  }

  return sysclockfreq;
 8005a94:	69bb      	ldr	r3, [r7, #24]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3724      	adds	r7, #36	@ 0x24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	03d09000 	.word	0x03d09000
 8005aac:	003d0900 	.word	0x003d0900
 8005ab0:	007a1200 	.word	0x007a1200
 8005ab4:	46000000 	.word	0x46000000
 8005ab8:	4c742400 	.word	0x4c742400
 8005abc:	4a742400 	.word	0x4a742400
 8005ac0:	4af42400 	.word	0x4af42400

08005ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005aca:	f7ff fe81 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	4b10      	ldr	r3, [pc, #64]	@ (8005b14 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	490f      	ldr	r1, [pc, #60]	@ (8005b18 <HAL_RCC_GetHCLKFreq+0x54>)
 8005adc:	5ccb      	ldrb	r3, [r1, r3]
 8005ade:	f003 031f 	and.w	r3, r3, #31
 8005ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b14 <HAL_RCC_GetHCLKFreq+0x50>)
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	4a09      	ldr	r2, [pc, #36]	@ (8005b18 <HAL_RCC_GetHCLKFreq+0x54>)
 8005af2:	5cd3      	ldrb	r3, [r2, r3]
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	fa22 f303 	lsr.w	r3, r2, r3
 8005afe:	4a07      	ldr	r2, [pc, #28]	@ (8005b1c <HAL_RCC_GetHCLKFreq+0x58>)
 8005b00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b02:	4a07      	ldr	r2, [pc, #28]	@ (8005b20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b08:	4b04      	ldr	r3, [pc, #16]	@ (8005b1c <HAL_RCC_GetHCLKFreq+0x58>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	58024400 	.word	0x58024400
 8005b18:	08009f88 	.word	0x08009f88
 8005b1c:	24000004 	.word	0x24000004
 8005b20:	24000000 	.word	0x24000000

08005b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b28:	f7ff ffcc 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	4b06      	ldr	r3, [pc, #24]	@ (8005b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	091b      	lsrs	r3, r3, #4
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	4904      	ldr	r1, [pc, #16]	@ (8005b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b3a:	5ccb      	ldrb	r3, [r1, r3]
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	58024400 	.word	0x58024400
 8005b4c:	08009f88 	.word	0x08009f88

08005b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b54:	f7ff ffb6 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	4904      	ldr	r1, [pc, #16]	@ (8005b78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	58024400 	.word	0x58024400
 8005b78:	08009f88 	.word	0x08009f88

08005b7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	223f      	movs	r2, #63	@ 0x3f
 8005b8a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f003 0207 	and.w	r2, r3, #7
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005b98:	4b17      	ldr	r3, [pc, #92]	@ (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005ba4:	4b14      	ldr	r3, [pc, #80]	@ (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 020f 	and.w	r2, r3, #15
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005bb0:	4b11      	ldr	r3, [pc, #68]	@ (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005bd4:	4b08      	ldr	r3, [pc, #32]	@ (8005bf8 <HAL_RCC_GetClockConfig+0x7c>)
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005be0:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <HAL_RCC_GetClockConfig+0x80>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 020f 	and.w	r2, r3, #15
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	601a      	str	r2, [r3, #0]
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	58024400 	.word	0x58024400
 8005bfc:	52002000 	.word	0x52002000

08005c00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c04:	b0c6      	sub	sp, #280	@ 0x118
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c12:	2300      	movs	r3, #0
 8005c14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005c24:	2500      	movs	r5, #0
 8005c26:	ea54 0305 	orrs.w	r3, r4, r5
 8005c2a:	d049      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c36:	d02f      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c3c:	d828      	bhi.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c42:	d01a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c48:	d822      	bhi.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c52:	d007      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c54:	e01c      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c56:	4bab      	ldr	r3, [pc, #684]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5a:	4aaa      	ldr	r2, [pc, #680]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c62:	e01a      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c68:	3308      	adds	r3, #8
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fc25 	bl	80074bc <RCCEx_PLL2_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c78:	e00f      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7e:	3328      	adds	r3, #40	@ 0x28
 8005c80:	2102      	movs	r1, #2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 fccc 	bl	8007620 <RCCEx_PLL3_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c8e:	e004      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c96:	e000      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ca2:	4b98      	ldr	r3, [pc, #608]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cb0:	4a94      	ldr	r2, [pc, #592]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cb2:	430b      	orrs	r3, r1
 8005cb4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cb6:	e003      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005ccc:	f04f 0900 	mov.w	r9, #0
 8005cd0:	ea58 0309 	orrs.w	r3, r8, r9
 8005cd4:	d047      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d82a      	bhi.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005cfd 	.word	0x08005cfd
 8005cec:	08005d0b 	.word	0x08005d0b
 8005cf0:	08005d21 	.word	0x08005d21
 8005cf4:	08005d3f 	.word	0x08005d3f
 8005cf8:	08005d3f 	.word	0x08005d3f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfc:	4b81      	ldr	r3, [pc, #516]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	4a80      	ldr	r2, [pc, #512]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d08:	e01a      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0e:	3308      	adds	r3, #8
 8005d10:	2100      	movs	r1, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 fbd2 	bl	80074bc <RCCEx_PLL2_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d1e:	e00f      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d24:	3328      	adds	r3, #40	@ 0x28
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f001 fc79 	bl	8007620 <RCCEx_PLL3_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d34:	e004      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d3c:	e000      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d48:	4b6e      	ldr	r3, [pc, #440]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d4c:	f023 0107 	bic.w	r1, r3, #7
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d56:	4a6b      	ldr	r2, [pc, #428]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d5c:	e003      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005d72:	f04f 0b00 	mov.w	fp, #0
 8005d76:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d7a:	d05b      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d84:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005d88:	d03b      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005d8a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005d8e:	d834      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d94:	d037      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d9a:	d82e      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005da0:	d033      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005da2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005da6:	d828      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005da8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dac:	d01a      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005db2:	d822      	bhi.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005db8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dbc:	d007      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005dbe:	e01c      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc0:	4b50      	ldr	r3, [pc, #320]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc4:	4a4f      	ldr	r2, [pc, #316]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dcc:	e01e      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f001 fb70 	bl	80074bc <RCCEx_PLL2_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005de2:	e013      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de8:	3328      	adds	r3, #40	@ 0x28
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f001 fc17 	bl	8007620 <RCCEx_PLL3_Config>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005df8:	e008      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e00:	e004      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e02:	bf00      	nop
 8005e04:	e002      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10b      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e14:	4b3b      	ldr	r3, [pc, #236]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e18:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e24:	4a37      	ldr	r2, [pc, #220]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e26:	430b      	orrs	r3, r1
 8005e28:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e2a:	e003      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005e40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e4a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4313      	orrs	r3, r2
 8005e52:	d05d      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e5c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e60:	d03b      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e62:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e66:	d834      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e6c:	d037      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005e6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e72:	d82e      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e78:	d033      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005e7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e7e:	d828      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e84:	d01a      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005e86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e8a:	d822      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e94:	d007      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e96:	e01c      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e98:	4b1a      	ldr	r3, [pc, #104]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	4a19      	ldr	r2, [pc, #100]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ea4:	e01e      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eaa:	3308      	adds	r3, #8
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 fb04 	bl	80074bc <RCCEx_PLL2_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005eba:	e013      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec0:	3328      	adds	r3, #40	@ 0x28
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 fbab 	bl	8007620 <RCCEx_PLL3_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ed8:	e004      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005eda:	bf00      	nop
 8005edc:	e002      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10d      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005eec:	4b05      	ldr	r3, [pc, #20]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005efc:	4a01      	ldr	r2, [pc, #4]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005efe:	430b      	orrs	r3, r1
 8005f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f02:	e005      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005f1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005f20:	2300      	movs	r3, #0
 8005f22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f26:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	d03a      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f36:	2b30      	cmp	r3, #48	@ 0x30
 8005f38:	d01f      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005f3a:	2b30      	cmp	r3, #48	@ 0x30
 8005f3c:	d819      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d00c      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d815      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d019      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f4a:	2b10      	cmp	r3, #16
 8005f4c:	d111      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f4e:	4baa      	ldr	r3, [pc, #680]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	4aa9      	ldr	r2, [pc, #676]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f5a:	e011      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f60:	3308      	adds	r3, #8
 8005f62:	2102      	movs	r1, #2
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 faa9 	bl	80074bc <RCCEx_PLL2_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f70:	e006      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f78:	e002      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e000      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005f88:	4b9b      	ldr	r3, [pc, #620]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f96:	4a98      	ldr	r2, [pc, #608]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f9c:	e003      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005fbc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	d051      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fd0:	d035      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005fd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fd6:	d82e      	bhi.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005fd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fdc:	d031      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005fde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fe2:	d828      	bhi.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe8:	d01a      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fee:	d822      	bhi.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff8:	d007      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005ffa:	e01c      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ffc:	4b7e      	ldr	r3, [pc, #504]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006000:	4a7d      	ldr	r2, [pc, #500]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006008:	e01c      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800600a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600e:	3308      	adds	r3, #8
 8006010:	2100      	movs	r1, #0
 8006012:	4618      	mov	r0, r3
 8006014:	f001 fa52 	bl	80074bc <RCCEx_PLL2_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800601e:	e011      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006024:	3328      	adds	r3, #40	@ 0x28
 8006026:	2100      	movs	r1, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f001 faf9 	bl	8007620 <RCCEx_PLL3_Config>
 800602e:	4603      	mov	r3, r0
 8006030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006034:	e006      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800603c:	e002      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800604c:	4b6a      	ldr	r3, [pc, #424]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800604e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006050:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605a:	4a67      	ldr	r2, [pc, #412]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800605c:	430b      	orrs	r3, r1
 800605e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006060:	e003      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006062:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006066:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800606a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006072:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006076:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800607a:	2300      	movs	r3, #0
 800607c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006080:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006084:	460b      	mov	r3, r1
 8006086:	4313      	orrs	r3, r2
 8006088:	d053      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006094:	d033      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006096:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800609a:	d82c      	bhi.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800609c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060a0:	d02f      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80060a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060a6:	d826      	bhi.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060ac:	d02b      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80060ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060b2:	d820      	bhi.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060b8:	d012      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80060ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060be:	d81a      	bhi.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d022      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80060c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c8:	d115      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ce:	3308      	adds	r3, #8
 80060d0:	2101      	movs	r1, #1
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 f9f2 	bl	80074bc <RCCEx_PLL2_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060de:	e015      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e4:	3328      	adds	r3, #40	@ 0x28
 80060e6:	2101      	movs	r1, #1
 80060e8:	4618      	mov	r0, r3
 80060ea:	f001 fa99 	bl	8007620 <RCCEx_PLL3_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060f4:	e00a      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060fc:	e006      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060fe:	bf00      	nop
 8006100:	e004      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006102:	bf00      	nop
 8006104:	e002      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006106:	bf00      	nop
 8006108:	e000      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800610a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006114:	4b38      	ldr	r3, [pc, #224]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006118:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006122:	4a35      	ldr	r2, [pc, #212]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006124:	430b      	orrs	r3, r1
 8006126:	6513      	str	r3, [r2, #80]	@ 0x50
 8006128:	e003      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800612e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800613e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006142:	2300      	movs	r3, #0
 8006144:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006148:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800614c:	460b      	mov	r3, r1
 800614e:	4313      	orrs	r3, r2
 8006150:	d058      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006156:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800615a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800615e:	d033      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006160:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006164:	d82c      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800616a:	d02f      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006170:	d826      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006172:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006176:	d02b      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006178:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800617c:	d820      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800617e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006182:	d012      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006188:	d81a      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d022      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800618e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006192:	d115      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006198:	3308      	adds	r3, #8
 800619a:	2101      	movs	r1, #1
 800619c:	4618      	mov	r0, r3
 800619e:	f001 f98d 	bl	80074bc <RCCEx_PLL2_Config>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061a8:	e015      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ae:	3328      	adds	r3, #40	@ 0x28
 80061b0:	2101      	movs	r1, #1
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 fa34 	bl	8007620 <RCCEx_PLL3_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061be:	e00a      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061c6:	e006      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061c8:	bf00      	nop
 80061ca:	e004      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061cc:	bf00      	nop
 80061ce:	e002      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061d0:	bf00      	nop
 80061d2:	e000      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10e      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80061de:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80061e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061ee:	4a02      	ldr	r2, [pc, #8]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061f0:	430b      	orrs	r3, r1
 80061f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80061f4:	e006      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80061f6:	bf00      	nop
 80061f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006200:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006214:	2300      	movs	r3, #0
 8006216:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800621a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800621e:	460b      	mov	r3, r1
 8006220:	4313      	orrs	r3, r2
 8006222:	d037      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800622a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800622e:	d00e      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006234:	d816      	bhi.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d018      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800623a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800623e:	d111      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006240:	4bc4      	ldr	r3, [pc, #784]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4ac3      	ldr	r2, [pc, #780]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800624a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800624c:	e00f      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	3308      	adds	r3, #8
 8006254:	2101      	movs	r1, #1
 8006256:	4618      	mov	r0, r3
 8006258:	f001 f930 	bl	80074bc <RCCEx_PLL2_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006262:	e004      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800626a:	e000      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800626c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800626e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006276:	4bb7      	ldr	r3, [pc, #732]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800627e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006284:	4ab3      	ldr	r2, [pc, #716]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006286:	430b      	orrs	r3, r1
 8006288:	6513      	str	r3, [r2, #80]	@ 0x50
 800628a:	e003      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006290:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80062a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062a4:	2300      	movs	r3, #0
 80062a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80062ae:	460b      	mov	r3, r1
 80062b0:	4313      	orrs	r3, r2
 80062b2:	d039      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80062b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d81c      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80062be:	a201      	add	r2, pc, #4	@ (adr r2, 80062c4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	08006301 	.word	0x08006301
 80062c8:	080062d5 	.word	0x080062d5
 80062cc:	080062e3 	.word	0x080062e3
 80062d0:	08006301 	.word	0x08006301
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d4:	4b9f      	ldr	r3, [pc, #636]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d8:	4a9e      	ldr	r2, [pc, #632]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062e0:	e00f      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e6:	3308      	adds	r3, #8
 80062e8:	2102      	movs	r1, #2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 f8e6 	bl	80074bc <RCCEx_PLL2_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062f6:	e004      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062fe:	e000      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006302:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800630a:	4b92      	ldr	r3, [pc, #584]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800630c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800630e:	f023 0103 	bic.w	r1, r3, #3
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006318:	4a8e      	ldr	r2, [pc, #568]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800631a:	430b      	orrs	r3, r1
 800631c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800631e:	e003      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006324:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006338:	2300      	movs	r3, #0
 800633a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800633e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006342:	460b      	mov	r3, r1
 8006344:	4313      	orrs	r3, r2
 8006346:	f000 8099 	beq.w	800647c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800634a:	4b83      	ldr	r3, [pc, #524]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a82      	ldr	r2, [pc, #520]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006354:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006356:	f7fb f987 	bl	8001668 <HAL_GetTick>
 800635a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800635e:	e00b      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006360:	f7fb f982 	bl	8001668 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b64      	cmp	r3, #100	@ 0x64
 800636e:	d903      	bls.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006376:	e005      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006378:	4b77      	ldr	r3, [pc, #476]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0ed      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006388:	2b00      	cmp	r3, #0
 800638a:	d173      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800638c:	4b71      	ldr	r3, [pc, #452]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800638e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006394:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006398:	4053      	eors	r3, r2
 800639a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d015      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063a2:	4b6c      	ldr	r3, [pc, #432]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063ae:	4b69      	ldr	r3, [pc, #420]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b2:	4a68      	ldr	r2, [pc, #416]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063ba:	4b66      	ldr	r3, [pc, #408]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063be:	4a65      	ldr	r2, [pc, #404]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80063c6:	4a63      	ldr	r2, [pc, #396]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80063ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063da:	d118      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063dc:	f7fb f944 	bl	8001668 <HAL_GetTick>
 80063e0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063e4:	e00d      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e6:	f7fb f93f 	bl	8001668 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80063f0:	1ad2      	subs	r2, r2, r3
 80063f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d903      	bls.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006400:	e005      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006402:	4b54      	ldr	r3, [pc, #336]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0eb      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800640e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006412:	2b00      	cmp	r3, #0
 8006414:	d129      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800641e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006426:	d10e      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006428:	4b4a      	ldr	r3, [pc, #296]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006438:	091a      	lsrs	r2, r3, #4
 800643a:	4b48      	ldr	r3, [pc, #288]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800643c:	4013      	ands	r3, r2
 800643e:	4a45      	ldr	r2, [pc, #276]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006440:	430b      	orrs	r3, r1
 8006442:	6113      	str	r3, [r2, #16]
 8006444:	e005      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006446:	4b43      	ldr	r3, [pc, #268]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	4a42      	ldr	r2, [pc, #264]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800644c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006450:	6113      	str	r3, [r2, #16]
 8006452:	4b40      	ldr	r3, [pc, #256]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006454:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800645e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006462:	4a3c      	ldr	r2, [pc, #240]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006464:	430b      	orrs	r3, r1
 8006466:	6713      	str	r3, [r2, #112]	@ 0x70
 8006468:	e008      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800646a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800646e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006472:	e003      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006478:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f002 0301 	and.w	r3, r2, #1
 8006488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800648c:	2300      	movs	r3, #0
 800648e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006492:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006496:	460b      	mov	r3, r1
 8006498:	4313      	orrs	r3, r2
 800649a:	f000 808f 	beq.w	80065bc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064a4:	2b28      	cmp	r3, #40	@ 0x28
 80064a6:	d871      	bhi.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80064a8:	a201      	add	r2, pc, #4	@ (adr r2, 80064b0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	08006595 	.word	0x08006595
 80064b4:	0800658d 	.word	0x0800658d
 80064b8:	0800658d 	.word	0x0800658d
 80064bc:	0800658d 	.word	0x0800658d
 80064c0:	0800658d 	.word	0x0800658d
 80064c4:	0800658d 	.word	0x0800658d
 80064c8:	0800658d 	.word	0x0800658d
 80064cc:	0800658d 	.word	0x0800658d
 80064d0:	08006561 	.word	0x08006561
 80064d4:	0800658d 	.word	0x0800658d
 80064d8:	0800658d 	.word	0x0800658d
 80064dc:	0800658d 	.word	0x0800658d
 80064e0:	0800658d 	.word	0x0800658d
 80064e4:	0800658d 	.word	0x0800658d
 80064e8:	0800658d 	.word	0x0800658d
 80064ec:	0800658d 	.word	0x0800658d
 80064f0:	08006577 	.word	0x08006577
 80064f4:	0800658d 	.word	0x0800658d
 80064f8:	0800658d 	.word	0x0800658d
 80064fc:	0800658d 	.word	0x0800658d
 8006500:	0800658d 	.word	0x0800658d
 8006504:	0800658d 	.word	0x0800658d
 8006508:	0800658d 	.word	0x0800658d
 800650c:	0800658d 	.word	0x0800658d
 8006510:	08006595 	.word	0x08006595
 8006514:	0800658d 	.word	0x0800658d
 8006518:	0800658d 	.word	0x0800658d
 800651c:	0800658d 	.word	0x0800658d
 8006520:	0800658d 	.word	0x0800658d
 8006524:	0800658d 	.word	0x0800658d
 8006528:	0800658d 	.word	0x0800658d
 800652c:	0800658d 	.word	0x0800658d
 8006530:	08006595 	.word	0x08006595
 8006534:	0800658d 	.word	0x0800658d
 8006538:	0800658d 	.word	0x0800658d
 800653c:	0800658d 	.word	0x0800658d
 8006540:	0800658d 	.word	0x0800658d
 8006544:	0800658d 	.word	0x0800658d
 8006548:	0800658d 	.word	0x0800658d
 800654c:	0800658d 	.word	0x0800658d
 8006550:	08006595 	.word	0x08006595
 8006554:	58024400 	.word	0x58024400
 8006558:	58024800 	.word	0x58024800
 800655c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006564:	3308      	adds	r3, #8
 8006566:	2101      	movs	r1, #1
 8006568:	4618      	mov	r0, r3
 800656a:	f000 ffa7 	bl	80074bc <RCCEx_PLL2_Config>
 800656e:	4603      	mov	r3, r0
 8006570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006574:	e00f      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657a:	3328      	adds	r3, #40	@ 0x28
 800657c:	2101      	movs	r1, #1
 800657e:	4618      	mov	r0, r3
 8006580:	f001 f84e 	bl	8007620 <RCCEx_PLL3_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800658a:	e004      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006592:	e000      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800659e:	4bbf      	ldr	r3, [pc, #764]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065ac:	4abb      	ldr	r2, [pc, #748]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065ae:	430b      	orrs	r3, r1
 80065b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80065b2:	e003      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80065bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f002 0302 	and.w	r3, r2, #2
 80065c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065cc:	2300      	movs	r3, #0
 80065ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4313      	orrs	r3, r2
 80065da:	d041      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80065dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065e2:	2b05      	cmp	r3, #5
 80065e4:	d824      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80065e6:	a201      	add	r2, pc, #4	@ (adr r2, 80065ec <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	08006639 	.word	0x08006639
 80065f0:	08006605 	.word	0x08006605
 80065f4:	0800661b 	.word	0x0800661b
 80065f8:	08006639 	.word	0x08006639
 80065fc:	08006639 	.word	0x08006639
 8006600:	08006639 	.word	0x08006639
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006608:	3308      	adds	r3, #8
 800660a:	2101      	movs	r1, #1
 800660c:	4618      	mov	r0, r3
 800660e:	f000 ff55 	bl	80074bc <RCCEx_PLL2_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006618:	e00f      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800661a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661e:	3328      	adds	r3, #40	@ 0x28
 8006620:	2101      	movs	r1, #1
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fffc 	bl	8007620 <RCCEx_PLL3_Config>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800662e:	e004      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006636:	e000      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800663a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10a      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006642:	4b96      	ldr	r3, [pc, #600]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006646:	f023 0107 	bic.w	r1, r3, #7
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006650:	4a92      	ldr	r2, [pc, #584]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006652:	430b      	orrs	r3, r1
 8006654:	6553      	str	r3, [r2, #84]	@ 0x54
 8006656:	e003      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800665c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f002 0304 	and.w	r3, r2, #4
 800666c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006670:	2300      	movs	r3, #0
 8006672:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006676:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800667a:	460b      	mov	r3, r1
 800667c:	4313      	orrs	r3, r2
 800667e:	d044      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006688:	2b05      	cmp	r3, #5
 800668a:	d825      	bhi.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800668c:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066e1 	.word	0x080066e1
 8006698:	080066ad 	.word	0x080066ad
 800669c:	080066c3 	.word	0x080066c3
 80066a0:	080066e1 	.word	0x080066e1
 80066a4:	080066e1 	.word	0x080066e1
 80066a8:	080066e1 	.word	0x080066e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b0:	3308      	adds	r3, #8
 80066b2:	2101      	movs	r1, #1
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 ff01 	bl	80074bc <RCCEx_PLL2_Config>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066c0:	e00f      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	3328      	adds	r3, #40	@ 0x28
 80066c8:	2101      	movs	r1, #1
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 ffa8 	bl	8007620 <RCCEx_PLL3_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066d6:	e004      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066de:	e000      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80066e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10b      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066ea:	4b6c      	ldr	r3, [pc, #432]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ee:	f023 0107 	bic.w	r1, r3, #7
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fa:	4a68      	ldr	r2, [pc, #416]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066fc:	430b      	orrs	r3, r1
 80066fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006700:	e003      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006702:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006706:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800670a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f002 0320 	and.w	r3, r2, #32
 8006716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800671a:	2300      	movs	r3, #0
 800671c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006720:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006724:	460b      	mov	r3, r1
 8006726:	4313      	orrs	r3, r2
 8006728:	d055      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006736:	d033      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800673c:	d82c      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800673e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006742:	d02f      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006748:	d826      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800674a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800674e:	d02b      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006750:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006754:	d820      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800675a:	d012      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800675c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006760:	d81a      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006762:	2b00      	cmp	r3, #0
 8006764:	d022      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006766:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800676a:	d115      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800676c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006770:	3308      	adds	r3, #8
 8006772:	2100      	movs	r1, #0
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fea1 	bl	80074bc <RCCEx_PLL2_Config>
 800677a:	4603      	mov	r3, r0
 800677c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006780:	e015      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006786:	3328      	adds	r3, #40	@ 0x28
 8006788:	2102      	movs	r1, #2
 800678a:	4618      	mov	r0, r3
 800678c:	f000 ff48 	bl	8007620 <RCCEx_PLL3_Config>
 8006790:	4603      	mov	r3, r0
 8006792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006796:	e00a      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800679e:	e006      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067a0:	bf00      	nop
 80067a2:	e004      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067a4:	bf00      	nop
 80067a6:	e002      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067a8:	bf00      	nop
 80067aa:	e000      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10b      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067b6:	4b39      	ldr	r3, [pc, #228]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067c6:	4a35      	ldr	r2, [pc, #212]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80067cc:	e003      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80067e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067e6:	2300      	movs	r3, #0
 80067e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067ec:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80067f0:	460b      	mov	r3, r1
 80067f2:	4313      	orrs	r3, r2
 80067f4:	d058      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006802:	d033      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006804:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006808:	d82c      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800680e:	d02f      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006814:	d826      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006816:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800681a:	d02b      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800681c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006820:	d820      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006822:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006826:	d012      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800682c:	d81a      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d022      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006836:	d115      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683c:	3308      	adds	r3, #8
 800683e:	2100      	movs	r1, #0
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fe3b 	bl	80074bc <RCCEx_PLL2_Config>
 8006846:	4603      	mov	r3, r0
 8006848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800684c:	e015      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006852:	3328      	adds	r3, #40	@ 0x28
 8006854:	2102      	movs	r1, #2
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fee2 	bl	8007620 <RCCEx_PLL3_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006862:	e00a      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800686a:	e006      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800686c:	bf00      	nop
 800686e:	e004      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006870:	bf00      	nop
 8006872:	e002      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800687a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10e      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006882:	4b06      	ldr	r3, [pc, #24]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006886:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800688a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006892:	4a02      	ldr	r2, [pc, #8]	@ (800689c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006894:	430b      	orrs	r3, r1
 8006896:	6593      	str	r3, [r2, #88]	@ 0x58
 8006898:	e006      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800689a:	bf00      	nop
 800689c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80068b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068b8:	2300      	movs	r3, #0
 80068ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80068c2:	460b      	mov	r3, r1
 80068c4:	4313      	orrs	r3, r2
 80068c6:	d055      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80068d4:	d033      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80068d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80068da:	d82c      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068e0:	d02f      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80068e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068e6:	d826      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80068ec:	d02b      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80068ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80068f2:	d820      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068f8:	d012      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80068fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068fe:	d81a      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d022      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006908:	d115      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800690a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690e:	3308      	adds	r3, #8
 8006910:	2100      	movs	r1, #0
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fdd2 	bl	80074bc <RCCEx_PLL2_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800691e:	e015      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006924:	3328      	adds	r3, #40	@ 0x28
 8006926:	2102      	movs	r1, #2
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fe79 	bl	8007620 <RCCEx_PLL3_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006934:	e00a      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800693c:	e006      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800693e:	bf00      	nop
 8006940:	e004      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006942:	bf00      	nop
 8006944:	e002      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006946:	bf00      	nop
 8006948:	e000      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800694a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10b      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006954:	4ba0      	ldr	r3, [pc, #640]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006958:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800695c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006960:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006964:	4a9c      	ldr	r2, [pc, #624]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006966:	430b      	orrs	r3, r1
 8006968:	6593      	str	r3, [r2, #88]	@ 0x58
 800696a:	e003      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006970:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	f002 0308 	and.w	r3, r2, #8
 8006980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006984:	2300      	movs	r3, #0
 8006986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800698a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800698e:	460b      	mov	r3, r1
 8006990:	4313      	orrs	r3, r2
 8006992:	d01e      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800699c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069a0:	d10c      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a6:	3328      	adds	r3, #40	@ 0x28
 80069a8:	2102      	movs	r1, #2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fe38 	bl	8007620 <RCCEx_PLL3_Config>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80069bc:	4b86      	ldr	r3, [pc, #536]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069cc:	4a82      	ldr	r2, [pc, #520]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069ce:	430b      	orrs	r3, r1
 80069d0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f002 0310 	and.w	r3, r2, #16
 80069de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069e2:	2300      	movs	r3, #0
 80069e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069e8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80069ec:	460b      	mov	r3, r1
 80069ee:	4313      	orrs	r3, r2
 80069f0:	d01e      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80069f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069fe:	d10c      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a04:	3328      	adds	r3, #40	@ 0x28
 8006a06:	2102      	movs	r1, #2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fe09 	bl	8007620 <RCCEx_PLL3_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a1a:	4b6f      	ldr	r3, [pc, #444]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a2a:	4a6b      	ldr	r2, [pc, #428]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a3e:	2300      	movs	r3, #0
 8006a40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a42:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006a46:	460b      	mov	r3, r1
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	d03e      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a58:	d022      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006a5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a5e:	d81b      	bhi.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a68:	d00b      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006a6a:	e015      	b.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	3308      	adds	r3, #8
 8006a72:	2100      	movs	r1, #0
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fd21 	bl	80074bc <RCCEx_PLL2_Config>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a80:	e00f      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a86:	3328      	adds	r3, #40	@ 0x28
 8006a88:	2102      	movs	r1, #2
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fdc8 	bl	8007620 <RCCEx_PLL3_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a96:	e004      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a9e:	e000      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10b      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006aba:	4a47      	ldr	r2, [pc, #284]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006abc:	430b      	orrs	r3, r1
 8006abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ac0:	e003      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ac6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006ad6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ad8:	2300      	movs	r3, #0
 8006ada:	677b      	str	r3, [r7, #116]	@ 0x74
 8006adc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	d03b      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006af2:	d01f      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006af4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006af8:	d818      	bhi.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006afe:	d003      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006b00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b04:	d007      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006b06:	e011      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b08:	4b33      	ldr	r3, [pc, #204]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	4a32      	ldr	r2, [pc, #200]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b14:	e00f      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1a:	3328      	adds	r3, #40	@ 0x28
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 fd7e 	bl	8007620 <RCCEx_PLL3_Config>
 8006b24:	4603      	mov	r3, r0
 8006b26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b2a:	e004      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b32:	e000      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10b      	bne.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b3e:	4b26      	ldr	r3, [pc, #152]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b4e:	4a22      	ldr	r2, [pc, #136]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b50:	430b      	orrs	r3, r1
 8006b52:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b54:	e003      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006b6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b70:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006b74:	460b      	mov	r3, r1
 8006b76:	4313      	orrs	r3, r2
 8006b78:	d034      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b88:	d007      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006b8a:	e011      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b8c:	4b12      	ldr	r3, [pc, #72]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b90:	4a11      	ldr	r2, [pc, #68]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b98:	e00e      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fc8a 	bl	80074bc <RCCEx_PLL2_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006bae:	e003      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10d      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006bc0:	4b05      	ldr	r3, [pc, #20]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bce:	4a02      	ldr	r2, [pc, #8]	@ (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bd4:	e006      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006bd6:	bf00      	nop
 8006bd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006bf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bf6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	d00c      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c04:	3328      	adds	r3, #40	@ 0x28
 8006c06:	2102      	movs	r1, #2
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fd09 	bl	8007620 <RCCEx_PLL3_Config>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006c26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c28:	2300      	movs	r3, #0
 8006c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c2c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006c30:	460b      	mov	r3, r1
 8006c32:	4313      	orrs	r3, r2
 8006c34:	d036      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c40:	d018      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006c42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c46:	d811      	bhi.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c4c:	d014      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c52:	d80b      	bhi.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d011      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006c58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c5c:	d106      	bne.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c5e:	4bb7      	ldr	r3, [pc, #732]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c62:	4ab6      	ldr	r2, [pc, #728]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c6a:	e008      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c72:	e004      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c74:	bf00      	nop
 8006c76:	e002      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c78:	bf00      	nop
 8006c7a:	e000      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10a      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c86:	4bad      	ldr	r3, [pc, #692]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c94:	4aa9      	ldr	r2, [pc, #676]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c96:	430b      	orrs	r3, r1
 8006c98:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c9a:	e003      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006cb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cb6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	d009      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cc0:	4b9e      	ldr	r3, [pc, #632]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cce:	4a9b      	ldr	r2, [pc, #620]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ce6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006cea:	460b      	mov	r3, r1
 8006cec:	4313      	orrs	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cf0:	4b92      	ldr	r3, [pc, #584]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cf4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cfe:	4a8f      	ldr	r2, [pc, #572]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d00:	430b      	orrs	r3, r1
 8006d02:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006d10:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d12:	2300      	movs	r3, #0
 8006d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d16:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	d00e      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d20:	4b86      	ldr	r3, [pc, #536]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	4a85      	ldr	r2, [pc, #532]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d2a:	6113      	str	r3, [r2, #16]
 8006d2c:	4b83      	ldr	r3, [pc, #524]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d2e:	6919      	ldr	r1, [r3, #16]
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d38:	4a80      	ldr	r2, [pc, #512]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d3a:	430b      	orrs	r3, r1
 8006d3c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d50:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d54:	460b      	mov	r3, r1
 8006d56:	4313      	orrs	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d5a:	4b78      	ldr	r3, [pc, #480]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d68:	4a74      	ldr	r2, [pc, #464]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006d7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d80:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006d84:	460b      	mov	r3, r1
 8006d86:	4313      	orrs	r3, r2
 8006d88:	d00a      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d8e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9a:	4a68      	ldr	r2, [pc, #416]	@ (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	2100      	movs	r1, #0
 8006daa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006db2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006db6:	460b      	mov	r3, r1
 8006db8:	4313      	orrs	r3, r2
 8006dba:	d011      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 fb79 	bl	80074bc <RCCEx_PLL2_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ddc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de8:	2100      	movs	r1, #0
 8006dea:	6239      	str	r1, [r7, #32]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006df2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006df6:	460b      	mov	r3, r1
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	d011      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e00:	3308      	adds	r3, #8
 8006e02:	2101      	movs	r1, #1
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fb59 	bl	80074bc <RCCEx_PLL2_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	2100      	movs	r1, #0
 8006e2a:	61b9      	str	r1, [r7, #24]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e36:	460b      	mov	r3, r1
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	d011      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e40:	3308      	adds	r3, #8
 8006e42:	2102      	movs	r1, #2
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fb39 	bl	80074bc <RCCEx_PLL2_Config>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	2100      	movs	r1, #0
 8006e6a:	6139      	str	r1, [r7, #16]
 8006e6c:	f003 0308 	and.w	r3, r3, #8
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e76:	460b      	mov	r3, r1
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	d011      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e80:	3328      	adds	r3, #40	@ 0x28
 8006e82:	2100      	movs	r1, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fbcb 	bl	8007620 <RCCEx_PLL3_Config>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006e90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	d011      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec0:	3328      	adds	r3, #40	@ 0x28
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fbab 	bl	8007620 <RCCEx_PLL3_Config>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006edc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	6039      	str	r1, [r7, #0]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	607b      	str	r3, [r7, #4]
 8006ef2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	d011      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f00:	3328      	adds	r3, #40	@ 0x28
 8006f02:	2102      	movs	r1, #2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fb8b 	bl	8007620 <RCCEx_PLL3_Config>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006f20:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e000      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006f34:	46bd      	mov	sp, r7
 8006f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f3a:	bf00      	nop
 8006f3c:	58024400 	.word	0x58024400

08006f40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f44:	f7fe fdbe 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	4b06      	ldr	r3, [pc, #24]	@ (8006f64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	091b      	lsrs	r3, r3, #4
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	4904      	ldr	r1, [pc, #16]	@ (8006f68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f56:	5ccb      	ldrb	r3, [r1, r3]
 8006f58:	f003 031f 	and.w	r3, r3, #31
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	58024400 	.word	0x58024400
 8006f68:	08009f88 	.word	0x08009f88

08006f6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b089      	sub	sp, #36	@ 0x24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f74:	4ba1      	ldr	r3, [pc, #644]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f7e:	4b9f      	ldr	r3, [pc, #636]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f82:	0b1b      	lsrs	r3, r3, #12
 8006f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f8a:	4b9c      	ldr	r3, [pc, #624]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8e:	091b      	lsrs	r3, r3, #4
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f96:	4b99      	ldr	r3, [pc, #612]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f9a:	08db      	lsrs	r3, r3, #3
 8006f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	fb02 f303 	mul.w	r3, r2, r3
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 8111 	beq.w	80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	f000 8083 	beq.w	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	f200 80a1 	bhi.w	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d056      	beq.n	8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006fd6:	e099      	b.n	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fd8:	4b88      	ldr	r3, [pc, #544]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d02d      	beq.n	8007040 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fe4:	4b85      	ldr	r3, [pc, #532]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	08db      	lsrs	r3, r3, #3
 8006fea:	f003 0303 	and.w	r3, r3, #3
 8006fee:	4a84      	ldr	r2, [pc, #528]	@ (8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	ee07 3a90 	vmov	s15, r3
 8006ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700e:	4b7b      	ldr	r3, [pc, #492]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007022:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800702a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800703a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800703e:	e087      	b.n	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007208 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800704e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007052:	4b6a      	ldr	r3, [pc, #424]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705a:	ee07 3a90 	vmov	s15, r3
 800705e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007062:	ed97 6a03 	vldr	s12, [r7, #12]
 8007066:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800706a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800707a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007082:	e065      	b.n	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800720c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007096:	4b59      	ldr	r3, [pc, #356]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070c6:	e043      	b.n	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80070d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070da:	4b48      	ldr	r3, [pc, #288]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800710a:	e021      	b.n	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007116:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800720c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800711a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711e:	4b37      	ldr	r3, [pc, #220]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007132:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800714e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007150:	4b2a      	ldr	r3, [pc, #168]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007154:	0a5b      	lsrs	r3, r3, #9
 8007156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800716a:	edd7 6a07 	vldr	s13, [r7, #28]
 800716e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007176:	ee17 2a90 	vmov	r2, s15
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800717e:	4b1f      	ldr	r3, [pc, #124]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007182:	0c1b      	lsrs	r3, r3, #16
 8007184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007188:	ee07 3a90 	vmov	s15, r3
 800718c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007190:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007194:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007198:	edd7 6a07 	vldr	s13, [r7, #28]
 800719c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a4:	ee17 2a90 	vmov	r2, s15
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80071ac:	4b13      	ldr	r3, [pc, #76]	@ (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b0:	0e1b      	lsrs	r3, r3, #24
 80071b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071d2:	ee17 2a90 	vmov	r2, s15
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071da:	e008      	b.n	80071ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	609a      	str	r2, [r3, #8]
}
 80071ee:	bf00      	nop
 80071f0:	3724      	adds	r7, #36	@ 0x24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	58024400 	.word	0x58024400
 8007200:	03d09000 	.word	0x03d09000
 8007204:	46000000 	.word	0x46000000
 8007208:	4c742400 	.word	0x4c742400
 800720c:	4a742400 	.word	0x4a742400
 8007210:	4af42400 	.word	0x4af42400

08007214 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007214:	b480      	push	{r7}
 8007216:	b089      	sub	sp, #36	@ 0x24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800721c:	4ba1      	ldr	r3, [pc, #644]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800721e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007220:	f003 0303 	and.w	r3, r3, #3
 8007224:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007226:	4b9f      	ldr	r3, [pc, #636]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722a:	0d1b      	lsrs	r3, r3, #20
 800722c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007230:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007232:	4b9c      	ldr	r3, [pc, #624]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800723e:	4b99      	ldr	r3, [pc, #612]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007242:	08db      	lsrs	r3, r3, #3
 8007244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	fb02 f303 	mul.w	r3, r2, r3
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 8111 	beq.w	8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b02      	cmp	r3, #2
 8007266:	f000 8083 	beq.w	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b02      	cmp	r3, #2
 800726e:	f200 80a1 	bhi.w	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d056      	beq.n	800732c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800727e:	e099      	b.n	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007280:	4b88      	ldr	r3, [pc, #544]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0320 	and.w	r3, r3, #32
 8007288:	2b00      	cmp	r3, #0
 800728a:	d02d      	beq.n	80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800728c:	4b85      	ldr	r3, [pc, #532]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	08db      	lsrs	r3, r3, #3
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	4a84      	ldr	r2, [pc, #528]	@ (80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007298:	fa22 f303 	lsr.w	r3, r2, r3
 800729c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	ee07 3a90 	vmov	s15, r3
 80072a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b6:	4b7b      	ldr	r3, [pc, #492]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072e6:	e087      	b.n	80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80074b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fa:	4b6a      	ldr	r3, [pc, #424]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730a:	ed97 6a03 	vldr	s12, [r7, #12]
 800730e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800731e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800732a:	e065      	b.n	80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b59      	ldr	r3, [pc, #356]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007352:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800736e:	e043      	b.n	80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80074b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800737e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007382:	4b48      	ldr	r3, [pc, #288]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007392:	ed97 6a03 	vldr	s12, [r7, #12]
 8007396:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800739a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b2:	e021      	b.n	80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c6:	4b37      	ldr	r3, [pc, #220]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80073f8:	4b2a      	ldr	r3, [pc, #168]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fc:	0a5b      	lsrs	r3, r3, #9
 80073fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800740e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007412:	edd7 6a07 	vldr	s13, [r7, #28]
 8007416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800741a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800741e:	ee17 2a90 	vmov	r2, s15
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007426:	4b1f      	ldr	r3, [pc, #124]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742a:	0c1b      	lsrs	r3, r3, #16
 800742c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007430:	ee07 3a90 	vmov	s15, r3
 8007434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007438:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800743c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007440:	edd7 6a07 	vldr	s13, [r7, #28]
 8007444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800744c:	ee17 2a90 	vmov	r2, s15
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007454:	4b13      	ldr	r3, [pc, #76]	@ (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007458:	0e1b      	lsrs	r3, r3, #24
 800745a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007466:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800746a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800746e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800747a:	ee17 2a90 	vmov	r2, s15
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007482:	e008      	b.n	8007496 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	609a      	str	r2, [r3, #8]
}
 8007496:	bf00      	nop
 8007498:	3724      	adds	r7, #36	@ 0x24
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	58024400 	.word	0x58024400
 80074a8:	03d09000 	.word	0x03d09000
 80074ac:	46000000 	.word	0x46000000
 80074b0:	4c742400 	.word	0x4c742400
 80074b4:	4a742400 	.word	0x4a742400
 80074b8:	4af42400 	.word	0x4af42400

080074bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074ca:	4b53      	ldr	r3, [pc, #332]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80074cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d101      	bne.n	80074da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e099      	b.n	800760e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074da:	4b4f      	ldr	r3, [pc, #316]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a4e      	ldr	r2, [pc, #312]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80074e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e6:	f7fa f8bf 	bl	8001668 <HAL_GetTick>
 80074ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074ec:	e008      	b.n	8007500 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074ee:	f7fa f8bb 	bl	8001668 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d901      	bls.n	8007500 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e086      	b.n	800760e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007500:	4b45      	ldr	r3, [pc, #276]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f0      	bne.n	80074ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800750c:	4b42      	ldr	r3, [pc, #264]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 800750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007510:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	031b      	lsls	r3, r3, #12
 800751a:	493f      	ldr	r1, [pc, #252]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 800751c:	4313      	orrs	r3, r2
 800751e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	3b01      	subs	r3, #1
 8007526:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	3b01      	subs	r3, #1
 8007530:	025b      	lsls	r3, r3, #9
 8007532:	b29b      	uxth	r3, r3
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	3b01      	subs	r3, #1
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	3b01      	subs	r3, #1
 800754a:	061b      	lsls	r3, r3, #24
 800754c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007550:	4931      	ldr	r1, [pc, #196]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 8007552:	4313      	orrs	r3, r2
 8007554:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007556:	4b30      	ldr	r3, [pc, #192]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 8007558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	492d      	ldr	r1, [pc, #180]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 8007564:	4313      	orrs	r3, r2
 8007566:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007568:	4b2b      	ldr	r3, [pc, #172]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	f023 0220 	bic.w	r2, r3, #32
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	4928      	ldr	r1, [pc, #160]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 8007576:	4313      	orrs	r3, r2
 8007578:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800757a:	4b27      	ldr	r3, [pc, #156]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 800757c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757e:	4a26      	ldr	r2, [pc, #152]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 8007580:	f023 0310 	bic.w	r3, r3, #16
 8007584:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007586:	4b24      	ldr	r3, [pc, #144]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 8007588:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800758a:	4b24      	ldr	r3, [pc, #144]	@ (800761c <RCCEx_PLL2_Config+0x160>)
 800758c:	4013      	ands	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	69d2      	ldr	r2, [r2, #28]
 8007592:	00d2      	lsls	r2, r2, #3
 8007594:	4920      	ldr	r1, [pc, #128]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 8007596:	4313      	orrs	r3, r2
 8007598:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800759a:	4b1f      	ldr	r3, [pc, #124]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	4a1e      	ldr	r2, [pc, #120]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80075a0:	f043 0310 	orr.w	r3, r3, #16
 80075a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d106      	bne.n	80075ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80075ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	4a19      	ldr	r2, [pc, #100]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80075b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075b8:	e00f      	b.n	80075da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d106      	bne.n	80075ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80075c0:	4b15      	ldr	r3, [pc, #84]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	4a14      	ldr	r2, [pc, #80]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80075c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075cc:	e005      	b.n	80075da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80075ce:	4b12      	ldr	r3, [pc, #72]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80075d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d2:	4a11      	ldr	r2, [pc, #68]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80075d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075da:	4b0f      	ldr	r3, [pc, #60]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a0e      	ldr	r2, [pc, #56]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 80075e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e6:	f7fa f83f 	bl	8001668 <HAL_GetTick>
 80075ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075ec:	e008      	b.n	8007600 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075ee:	f7fa f83b 	bl	8001668 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d901      	bls.n	8007600 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e006      	b.n	800760e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007600:	4b05      	ldr	r3, [pc, #20]	@ (8007618 <RCCEx_PLL2_Config+0x15c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d0f0      	beq.n	80075ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	58024400 	.word	0x58024400
 800761c:	ffff0007 	.word	0xffff0007

08007620 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800762e:	4b53      	ldr	r3, [pc, #332]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b03      	cmp	r3, #3
 8007638:	d101      	bne.n	800763e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e099      	b.n	8007772 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800763e:	4b4f      	ldr	r3, [pc, #316]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a4e      	ldr	r2, [pc, #312]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007644:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800764a:	f7fa f80d 	bl	8001668 <HAL_GetTick>
 800764e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007650:	e008      	b.n	8007664 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007652:	f7fa f809 	bl	8001668 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d901      	bls.n	8007664 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e086      	b.n	8007772 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007664:	4b45      	ldr	r3, [pc, #276]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1f0      	bne.n	8007652 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007670:	4b42      	ldr	r3, [pc, #264]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007674:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	051b      	lsls	r3, r3, #20
 800767e:	493f      	ldr	r1, [pc, #252]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007680:	4313      	orrs	r3, r2
 8007682:	628b      	str	r3, [r1, #40]	@ 0x28
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	3b01      	subs	r3, #1
 800768a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	3b01      	subs	r3, #1
 8007694:	025b      	lsls	r3, r3, #9
 8007696:	b29b      	uxth	r3, r3
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	3b01      	subs	r3, #1
 80076a0:	041b      	lsls	r3, r3, #16
 80076a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	061b      	lsls	r3, r3, #24
 80076b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076b4:	4931      	ldr	r1, [pc, #196]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80076ba:	4b30      	ldr	r3, [pc, #192]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 80076bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	492d      	ldr	r1, [pc, #180]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80076cc:	4b2b      	ldr	r3, [pc, #172]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 80076ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	4928      	ldr	r1, [pc, #160]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076de:	4b27      	ldr	r3, [pc, #156]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 80076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e2:	4a26      	ldr	r2, [pc, #152]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 80076e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076ea:	4b24      	ldr	r3, [pc, #144]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 80076ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ee:	4b24      	ldr	r3, [pc, #144]	@ (8007780 <RCCEx_PLL3_Config+0x160>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	69d2      	ldr	r2, [r2, #28]
 80076f6:	00d2      	lsls	r2, r2, #3
 80076f8:	4920      	ldr	r1, [pc, #128]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076fe:	4b1f      	ldr	r3, [pc, #124]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	4a1e      	ldr	r2, [pc, #120]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007708:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d106      	bne.n	800771e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007710:	4b1a      	ldr	r3, [pc, #104]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007714:	4a19      	ldr	r2, [pc, #100]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007716:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800771a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800771c:	e00f      	b.n	800773e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d106      	bne.n	8007732 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007724:	4b15      	ldr	r3, [pc, #84]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007728:	4a14      	ldr	r2, [pc, #80]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 800772a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800772e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007730:	e005      	b.n	800773e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007732:	4b12      	ldr	r3, [pc, #72]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007736:	4a11      	ldr	r2, [pc, #68]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007738:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800773c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800773e:	4b0f      	ldr	r3, [pc, #60]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a0e      	ldr	r2, [pc, #56]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774a:	f7f9 ff8d 	bl	8001668 <HAL_GetTick>
 800774e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007750:	e008      	b.n	8007764 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007752:	f7f9 ff89 	bl	8001668 <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	2b02      	cmp	r3, #2
 800775e:	d901      	bls.n	8007764 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e006      	b.n	8007772 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007764:	4b05      	ldr	r3, [pc, #20]	@ (800777c <RCCEx_PLL3_Config+0x15c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0f0      	beq.n	8007752 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	58024400 	.word	0x58024400
 8007780:	ffff0007 	.word	0xffff0007

08007784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e049      	b.n	800782a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f841 	bl	8007832 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3304      	adds	r3, #4
 80077c0:	4619      	mov	r1, r3
 80077c2:	4610      	mov	r0, r2
 80077c4:	f000 f9f6 	bl	8007bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
	...

08007848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	d001      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e05e      	b.n	800791e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0201 	orr.w	r2, r2, #1
 8007876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2b      	ldr	r2, [pc, #172]	@ (800792c <HAL_TIM_Base_Start_IT+0xe4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d02c      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x94>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800788a:	d027      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x94>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a27      	ldr	r2, [pc, #156]	@ (8007930 <HAL_TIM_Base_Start_IT+0xe8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d022      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x94>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a26      	ldr	r2, [pc, #152]	@ (8007934 <HAL_TIM_Base_Start_IT+0xec>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d01d      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x94>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a24      	ldr	r2, [pc, #144]	@ (8007938 <HAL_TIM_Base_Start_IT+0xf0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d018      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x94>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a23      	ldr	r2, [pc, #140]	@ (800793c <HAL_TIM_Base_Start_IT+0xf4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d013      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x94>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a21      	ldr	r2, [pc, #132]	@ (8007940 <HAL_TIM_Base_Start_IT+0xf8>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00e      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x94>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a20      	ldr	r2, [pc, #128]	@ (8007944 <HAL_TIM_Base_Start_IT+0xfc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d009      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x94>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a1e      	ldr	r2, [pc, #120]	@ (8007948 <HAL_TIM_Base_Start_IT+0x100>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x94>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1d      	ldr	r2, [pc, #116]	@ (800794c <HAL_TIM_Base_Start_IT+0x104>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d115      	bne.n	8007908 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007950 <HAL_TIM_Base_Start_IT+0x108>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b06      	cmp	r3, #6
 80078ec:	d015      	beq.n	800791a <HAL_TIM_Base_Start_IT+0xd2>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078f4:	d011      	beq.n	800791a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0201 	orr.w	r2, r2, #1
 8007904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007906:	e008      	b.n	800791a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0201 	orr.w	r2, r2, #1
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	e000      	b.n	800791c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800791a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40010000 	.word	0x40010000
 8007930:	40000400 	.word	0x40000400
 8007934:	40000800 	.word	0x40000800
 8007938:	40000c00 	.word	0x40000c00
 800793c:	40010400 	.word	0x40010400
 8007940:	40001800 	.word	0x40001800
 8007944:	40014000 	.word	0x40014000
 8007948:	4000e000 	.word	0x4000e000
 800794c:	4000e400 	.word	0x4000e400
 8007950:	00010007 	.word	0x00010007

08007954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d020      	beq.n	80079b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01b      	beq.n	80079b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0202 	mvn.w	r2, #2
 8007988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f8e9 	bl	8007b76 <HAL_TIM_IC_CaptureCallback>
 80079a4:	e005      	b.n	80079b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8db 	bl	8007b62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f8ec 	bl	8007b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d020      	beq.n	8007a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01b      	beq.n	8007a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f06f 0204 	mvn.w	r2, #4
 80079d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f8c3 	bl	8007b76 <HAL_TIM_IC_CaptureCallback>
 80079f0:	e005      	b.n	80079fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f8b5 	bl	8007b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f8c6 	bl	8007b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f003 0308 	and.w	r3, r3, #8
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d020      	beq.n	8007a50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01b      	beq.n	8007a50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0208 	mvn.w	r2, #8
 8007a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2204      	movs	r2, #4
 8007a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f89d 	bl	8007b76 <HAL_TIM_IC_CaptureCallback>
 8007a3c:	e005      	b.n	8007a4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f88f 	bl	8007b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f8a0 	bl	8007b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d020      	beq.n	8007a9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f003 0310 	and.w	r3, r3, #16
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01b      	beq.n	8007a9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f06f 0210 	mvn.w	r2, #16
 8007a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2208      	movs	r2, #8
 8007a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f877 	bl	8007b76 <HAL_TIM_IC_CaptureCallback>
 8007a88:	e005      	b.n	8007a96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f869 	bl	8007b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f87a 	bl	8007b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00c      	beq.n	8007ac0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d007      	beq.n	8007ac0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0201 	mvn.w	r2, #1
 8007ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7f9 fb52 	bl	8001164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00c      	beq.n	8007aee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d007      	beq.n	8007aee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f91f 	bl	8007d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00c      	beq.n	8007b12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d007      	beq.n	8007b12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f917 	bl	8007d40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00c      	beq.n	8007b36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d007      	beq.n	8007b36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f834 	bl	8007b9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00c      	beq.n	8007b5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f003 0320 	and.w	r3, r3, #32
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f06f 0220 	mvn.w	r2, #32
 8007b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f8df 	bl	8007d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b7e:	bf00      	nop
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b92:	bf00      	nop
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a4a      	ldr	r2, [pc, #296]	@ (8007cf0 <TIM_Base_SetConfig+0x13c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d013      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bd2:	d00f      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a47      	ldr	r2, [pc, #284]	@ (8007cf4 <TIM_Base_SetConfig+0x140>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00b      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a46      	ldr	r2, [pc, #280]	@ (8007cf8 <TIM_Base_SetConfig+0x144>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d007      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a45      	ldr	r2, [pc, #276]	@ (8007cfc <TIM_Base_SetConfig+0x148>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_Base_SetConfig+0x40>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a44      	ldr	r2, [pc, #272]	@ (8007d00 <TIM_Base_SetConfig+0x14c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d108      	bne.n	8007c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a39      	ldr	r2, [pc, #228]	@ (8007cf0 <TIM_Base_SetConfig+0x13c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d027      	beq.n	8007c5e <TIM_Base_SetConfig+0xaa>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c14:	d023      	beq.n	8007c5e <TIM_Base_SetConfig+0xaa>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a36      	ldr	r2, [pc, #216]	@ (8007cf4 <TIM_Base_SetConfig+0x140>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d01f      	beq.n	8007c5e <TIM_Base_SetConfig+0xaa>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a35      	ldr	r2, [pc, #212]	@ (8007cf8 <TIM_Base_SetConfig+0x144>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01b      	beq.n	8007c5e <TIM_Base_SetConfig+0xaa>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a34      	ldr	r2, [pc, #208]	@ (8007cfc <TIM_Base_SetConfig+0x148>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d017      	beq.n	8007c5e <TIM_Base_SetConfig+0xaa>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a33      	ldr	r2, [pc, #204]	@ (8007d00 <TIM_Base_SetConfig+0x14c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d013      	beq.n	8007c5e <TIM_Base_SetConfig+0xaa>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a32      	ldr	r2, [pc, #200]	@ (8007d04 <TIM_Base_SetConfig+0x150>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00f      	beq.n	8007c5e <TIM_Base_SetConfig+0xaa>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a31      	ldr	r2, [pc, #196]	@ (8007d08 <TIM_Base_SetConfig+0x154>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00b      	beq.n	8007c5e <TIM_Base_SetConfig+0xaa>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a30      	ldr	r2, [pc, #192]	@ (8007d0c <TIM_Base_SetConfig+0x158>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d007      	beq.n	8007c5e <TIM_Base_SetConfig+0xaa>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a2f      	ldr	r2, [pc, #188]	@ (8007d10 <TIM_Base_SetConfig+0x15c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d003      	beq.n	8007c5e <TIM_Base_SetConfig+0xaa>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a2e      	ldr	r2, [pc, #184]	@ (8007d14 <TIM_Base_SetConfig+0x160>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d108      	bne.n	8007c70 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a16      	ldr	r2, [pc, #88]	@ (8007cf0 <TIM_Base_SetConfig+0x13c>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d00f      	beq.n	8007cbc <TIM_Base_SetConfig+0x108>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <TIM_Base_SetConfig+0x14c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00b      	beq.n	8007cbc <TIM_Base_SetConfig+0x108>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a17      	ldr	r2, [pc, #92]	@ (8007d04 <TIM_Base_SetConfig+0x150>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d007      	beq.n	8007cbc <TIM_Base_SetConfig+0x108>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a16      	ldr	r2, [pc, #88]	@ (8007d08 <TIM_Base_SetConfig+0x154>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_Base_SetConfig+0x108>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a15      	ldr	r2, [pc, #84]	@ (8007d0c <TIM_Base_SetConfig+0x158>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d103      	bne.n	8007cc4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d105      	bne.n	8007ce2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	f023 0201 	bic.w	r2, r3, #1
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	611a      	str	r2, [r3, #16]
  }
}
 8007ce2:	bf00      	nop
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	40010000 	.word	0x40010000
 8007cf4:	40000400 	.word	0x40000400
 8007cf8:	40000800 	.word	0x40000800
 8007cfc:	40000c00 	.word	0x40000c00
 8007d00:	40010400 	.word	0x40010400
 8007d04:	40014000 	.word	0x40014000
 8007d08:	40014400 	.word	0x40014400
 8007d0c:	40014800 	.word	0x40014800
 8007d10:	4000e000 	.word	0x4000e000
 8007d14:	4000e400 	.word	0x4000e400

08007d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e042      	b.n	8007dec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7f9 fa25 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2224      	movs	r2, #36	@ 0x24
 8007d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0201 	bic.w	r2, r2, #1
 8007d94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f001 fb04 	bl	80093ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fc95 	bl	80086d4 <UART_SetConfig>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e01b      	b.n	8007dec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 fb83 	bl	80094f0 <UART_CheckIdleState>
 8007dea:	4603      	mov	r3, r0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	@ 0x28
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	603b      	str	r3, [r7, #0]
 8007e00:	4613      	mov	r3, r2
 8007e02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d17b      	bne.n	8007f06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <HAL_UART_Transmit+0x26>
 8007e14:	88fb      	ldrh	r3, [r7, #6]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e074      	b.n	8007f08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2221      	movs	r2, #33	@ 0x21
 8007e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e2e:	f7f9 fc1b 	bl	8001668 <HAL_GetTick>
 8007e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	88fa      	ldrh	r2, [r7, #6]
 8007e40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e4c:	d108      	bne.n	8007e60 <HAL_UART_Transmit+0x6c>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d104      	bne.n	8007e60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	61bb      	str	r3, [r7, #24]
 8007e5e:	e003      	b.n	8007e68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e64:	2300      	movs	r3, #0
 8007e66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e68:	e030      	b.n	8007ecc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2200      	movs	r2, #0
 8007e72:	2180      	movs	r1, #128	@ 0x80
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f001 fbe5 	bl	8009644 <UART_WaitOnFlagUntilTimeout>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d005      	beq.n	8007e8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e03d      	b.n	8007f08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10b      	bne.n	8007eaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ea0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	61bb      	str	r3, [r7, #24]
 8007ea8:	e007      	b.n	8007eba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	781a      	ldrb	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1c8      	bne.n	8007e6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2140      	movs	r1, #64	@ 0x40
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f001 fbae 	bl	8009644 <UART_WaitOnFlagUntilTimeout>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e006      	b.n	8007f08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e000      	b.n	8007f08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007f06:	2302      	movs	r3, #2
  }
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3720      	adds	r7, #32
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b0ba      	sub	sp, #232	@ 0xe8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f3a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007f3e:	4013      	ands	r3, r2
 8007f40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007f44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d11b      	bne.n	8007f84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f50:	f003 0320 	and.w	r3, r3, #32
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d015      	beq.n	8007f84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d105      	bne.n	8007f70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d009      	beq.n	8007f84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 8377 	beq.w	8008668 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	4798      	blx	r3
      }
      return;
 8007f82:	e371      	b.n	8008668 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 8123 	beq.w	80081d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f92:	4b8d      	ldr	r3, [pc, #564]	@ (80081c8 <HAL_UART_IRQHandler+0x2b8>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007f9e:	4b8b      	ldr	r3, [pc, #556]	@ (80081cc <HAL_UART_IRQHandler+0x2bc>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 8116 	beq.w	80081d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d011      	beq.n	8007fd8 <HAL_UART_IRQHandler+0xc8>
 8007fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00b      	beq.n	8007fd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fce:	f043 0201 	orr.w	r2, r3, #1
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d011      	beq.n	8008008 <HAL_UART_IRQHandler+0xf8>
 8007fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ffe:	f043 0204 	orr.w	r2, r3, #4
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d011      	beq.n	8008038 <HAL_UART_IRQHandler+0x128>
 8008014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00b      	beq.n	8008038 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2204      	movs	r2, #4
 8008026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800802e:	f043 0202 	orr.w	r2, r3, #2
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800803c:	f003 0308 	and.w	r3, r3, #8
 8008040:	2b00      	cmp	r3, #0
 8008042:	d017      	beq.n	8008074 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d105      	bne.n	800805c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008050:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008054:	4b5c      	ldr	r3, [pc, #368]	@ (80081c8 <HAL_UART_IRQHandler+0x2b8>)
 8008056:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2208      	movs	r2, #8
 8008062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800806a:	f043 0208 	orr.w	r2, r3, #8
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800807c:	2b00      	cmp	r3, #0
 800807e:	d012      	beq.n	80080a6 <HAL_UART_IRQHandler+0x196>
 8008080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008084:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00c      	beq.n	80080a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800809c:	f043 0220 	orr.w	r2, r3, #32
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 82dd 	beq.w	800866c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d013      	beq.n	80080e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d105      	bne.n	80080d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d007      	beq.n	80080e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080fa:	2b40      	cmp	r3, #64	@ 0x40
 80080fc:	d005      	beq.n	800810a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008102:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008106:	2b00      	cmp	r3, #0
 8008108:	d054      	beq.n	80081b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 fbf0 	bl	80098f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800811a:	2b40      	cmp	r3, #64	@ 0x40
 800811c:	d146      	bne.n	80081ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3308      	adds	r3, #8
 8008124:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008128:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800812c:	e853 3f00 	ldrex	r3, [r3]
 8008130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800813c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3308      	adds	r3, #8
 8008146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800814a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800814e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1d9      	bne.n	800811e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008170:	2b00      	cmp	r3, #0
 8008172:	d017      	beq.n	80081a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800817a:	4a15      	ldr	r2, [pc, #84]	@ (80081d0 <HAL_UART_IRQHandler+0x2c0>)
 800817c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008184:	4618      	mov	r0, r3
 8008186:	f7fa fc5f 	bl	8002a48 <HAL_DMA_Abort_IT>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d019      	beq.n	80081c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800819e:	4610      	mov	r0, r2
 80081a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a2:	e00f      	b.n	80081c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fa8b 	bl	80086c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081aa:	e00b      	b.n	80081c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fa87 	bl	80086c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b2:	e007      	b.n	80081c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fa83 	bl	80086c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80081c2:	e253      	b.n	800866c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c4:	bf00      	nop
    return;
 80081c6:	e251      	b.n	800866c <HAL_UART_IRQHandler+0x75c>
 80081c8:	10000001 	.word	0x10000001
 80081cc:	04000120 	.word	0x04000120
 80081d0:	08009ba3 	.word	0x08009ba3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d8:	2b01      	cmp	r3, #1
 80081da:	f040 81e7 	bne.w	80085ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e2:	f003 0310 	and.w	r3, r3, #16
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 81e0 	beq.w	80085ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f0:	f003 0310 	and.w	r3, r3, #16
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 81d9 	beq.w	80085ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2210      	movs	r2, #16
 8008200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800820c:	2b40      	cmp	r3, #64	@ 0x40
 800820e:	f040 8151 	bne.w	80084b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a96      	ldr	r2, [pc, #600]	@ (8008474 <HAL_UART_IRQHandler+0x564>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d068      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a93      	ldr	r2, [pc, #588]	@ (8008478 <HAL_UART_IRQHandler+0x568>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d061      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a91      	ldr	r2, [pc, #580]	@ (800847c <HAL_UART_IRQHandler+0x56c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d05a      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a8e      	ldr	r2, [pc, #568]	@ (8008480 <HAL_UART_IRQHandler+0x570>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d053      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a8c      	ldr	r2, [pc, #560]	@ (8008484 <HAL_UART_IRQHandler+0x574>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d04c      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a89      	ldr	r2, [pc, #548]	@ (8008488 <HAL_UART_IRQHandler+0x578>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d045      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a87      	ldr	r2, [pc, #540]	@ (800848c <HAL_UART_IRQHandler+0x57c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d03e      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a84      	ldr	r2, [pc, #528]	@ (8008490 <HAL_UART_IRQHandler+0x580>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d037      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a82      	ldr	r2, [pc, #520]	@ (8008494 <HAL_UART_IRQHandler+0x584>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d030      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a7f      	ldr	r2, [pc, #508]	@ (8008498 <HAL_UART_IRQHandler+0x588>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d029      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a7d      	ldr	r2, [pc, #500]	@ (800849c <HAL_UART_IRQHandler+0x58c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d022      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a7a      	ldr	r2, [pc, #488]	@ (80084a0 <HAL_UART_IRQHandler+0x590>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d01b      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a78      	ldr	r2, [pc, #480]	@ (80084a4 <HAL_UART_IRQHandler+0x594>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d014      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a75      	ldr	r2, [pc, #468]	@ (80084a8 <HAL_UART_IRQHandler+0x598>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00d      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a73      	ldr	r2, [pc, #460]	@ (80084ac <HAL_UART_IRQHandler+0x59c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d006      	beq.n	80082f2 <HAL_UART_IRQHandler+0x3e2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a70      	ldr	r2, [pc, #448]	@ (80084b0 <HAL_UART_IRQHandler+0x5a0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d106      	bne.n	8008300 <HAL_UART_IRQHandler+0x3f0>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	e005      	b.n	800830c <HAL_UART_IRQHandler+0x3fc>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	b29b      	uxth	r3, r3
 800830c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 81ab 	beq.w	8008670 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008320:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008324:	429a      	cmp	r2, r3
 8008326:	f080 81a3 	bcs.w	8008670 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008330:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008340:	f000 8087 	beq.w	8008452 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008358:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800835c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800836e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008372:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800837a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1da      	bne.n	8008344 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3308      	adds	r3, #8
 8008394:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800839e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083a0:	f023 0301 	bic.w	r3, r3, #1
 80083a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80083b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80083b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80083ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80083c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e1      	bne.n	800838e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3308      	adds	r3, #8
 80083d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80083da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3308      	adds	r3, #8
 80083ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80083ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083f6:	e841 2300 	strex	r3, r2, [r1]
 80083fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80083fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1e3      	bne.n	80083ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2220      	movs	r2, #32
 8008406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800841e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008420:	f023 0310 	bic.w	r3, r3, #16
 8008424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008434:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e4      	bne.n	8008410 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800844c:	4618      	mov	r0, r3
 800844e:	f7f9 ffdd 	bl	800240c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2202      	movs	r2, #2
 8008456:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008464:	b29b      	uxth	r3, r3
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	b29b      	uxth	r3, r3
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7f8 f9fd 	bl	800086c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008472:	e0fd      	b.n	8008670 <HAL_UART_IRQHandler+0x760>
 8008474:	40020010 	.word	0x40020010
 8008478:	40020028 	.word	0x40020028
 800847c:	40020040 	.word	0x40020040
 8008480:	40020058 	.word	0x40020058
 8008484:	40020070 	.word	0x40020070
 8008488:	40020088 	.word	0x40020088
 800848c:	400200a0 	.word	0x400200a0
 8008490:	400200b8 	.word	0x400200b8
 8008494:	40020410 	.word	0x40020410
 8008498:	40020428 	.word	0x40020428
 800849c:	40020440 	.word	0x40020440
 80084a0:	40020458 	.word	0x40020458
 80084a4:	40020470 	.word	0x40020470
 80084a8:	40020488 	.word	0x40020488
 80084ac:	400204a0 	.word	0x400204a0
 80084b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 80cf 	beq.w	8008674 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80084d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 80ca 	beq.w	8008674 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e8:	e853 3f00 	ldrex	r3, [r3]
 80084ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	461a      	mov	r2, r3
 80084fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008502:	647b      	str	r3, [r7, #68]	@ 0x44
 8008504:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008506:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008508:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e4      	bne.n	80084e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3308      	adds	r3, #8
 800851c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	623b      	str	r3, [r7, #32]
   return(result);
 8008526:	6a3a      	ldr	r2, [r7, #32]
 8008528:	4b55      	ldr	r3, [pc, #340]	@ (8008680 <HAL_UART_IRQHandler+0x770>)
 800852a:	4013      	ands	r3, r2
 800852c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3308      	adds	r3, #8
 8008536:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800853a:	633a      	str	r2, [r7, #48]	@ 0x30
 800853c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008542:	e841 2300 	strex	r3, r2, [r1]
 8008546:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1e3      	bne.n	8008516 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2220      	movs	r2, #32
 8008552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	e853 3f00 	ldrex	r3, [r3]
 800856e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0310 	bic.w	r3, r3, #16
 8008576:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008584:	61fb      	str	r3, [r7, #28]
 8008586:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008588:	69b9      	ldr	r1, [r7, #24]
 800858a:	69fa      	ldr	r2, [r7, #28]
 800858c:	e841 2300 	strex	r3, r2, [r1]
 8008590:	617b      	str	r3, [r7, #20]
   return(result);
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1e4      	bne.n	8008562 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800859e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7f8 f961 	bl	800086c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085aa:	e063      	b.n	8008674 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00e      	beq.n	80085d6 <HAL_UART_IRQHandler+0x6c6>
 80085b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d008      	beq.n	80085d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80085cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f001 fb28 	bl	8009c24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085d4:	e051      	b.n	800867a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d014      	beq.n	800860c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d105      	bne.n	80085fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80085ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d008      	beq.n	800860c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d03a      	beq.n	8008678 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
    }
    return;
 800860a:	e035      	b.n	8008678 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800860c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	d009      	beq.n	800862c <HAL_UART_IRQHandler+0x71c>
 8008618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800861c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 fad2 	bl	8009bce <UART_EndTransmit_IT>
    return;
 800862a:	e026      	b.n	800867a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800862c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d009      	beq.n	800864c <HAL_UART_IRQHandler+0x73c>
 8008638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800863c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f001 fb01 	bl	8009c4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800864a:	e016      	b.n	800867a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800864c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d010      	beq.n	800867a <HAL_UART_IRQHandler+0x76a>
 8008658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800865c:	2b00      	cmp	r3, #0
 800865e:	da0c      	bge.n	800867a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 fae9 	bl	8009c38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008666:	e008      	b.n	800867a <HAL_UART_IRQHandler+0x76a>
      return;
 8008668:	bf00      	nop
 800866a:	e006      	b.n	800867a <HAL_UART_IRQHandler+0x76a>
    return;
 800866c:	bf00      	nop
 800866e:	e004      	b.n	800867a <HAL_UART_IRQHandler+0x76a>
      return;
 8008670:	bf00      	nop
 8008672:	e002      	b.n	800867a <HAL_UART_IRQHandler+0x76a>
      return;
 8008674:	bf00      	nop
 8008676:	e000      	b.n	800867a <HAL_UART_IRQHandler+0x76a>
    return;
 8008678:	bf00      	nop
  }
}
 800867a:	37e8      	adds	r7, #232	@ 0xe8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	effffffe 	.word	0xeffffffe

08008684 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086d8:	b092      	sub	sp, #72	@ 0x48
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	431a      	orrs	r2, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	431a      	orrs	r2, r3
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4bbe      	ldr	r3, [pc, #760]	@ (80089fc <UART_SetConfig+0x328>)
 8008704:	4013      	ands	r3, r2
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	6812      	ldr	r2, [r2, #0]
 800870a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800870c:	430b      	orrs	r3, r1
 800870e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4ab3      	ldr	r2, [pc, #716]	@ (8008a00 <UART_SetConfig+0x32c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d004      	beq.n	8008740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800873c:	4313      	orrs	r3, r2
 800873e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689a      	ldr	r2, [r3, #8]
 8008746:	4baf      	ldr	r3, [pc, #700]	@ (8008a04 <UART_SetConfig+0x330>)
 8008748:	4013      	ands	r3, r2
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	6812      	ldr	r2, [r2, #0]
 800874e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008750:	430b      	orrs	r3, r1
 8008752:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875a:	f023 010f 	bic.w	r1, r3, #15
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4aa6      	ldr	r2, [pc, #664]	@ (8008a08 <UART_SetConfig+0x334>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d177      	bne.n	8008864 <UART_SetConfig+0x190>
 8008774:	4ba5      	ldr	r3, [pc, #660]	@ (8008a0c <UART_SetConfig+0x338>)
 8008776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008778:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800877c:	2b28      	cmp	r3, #40	@ 0x28
 800877e:	d86d      	bhi.n	800885c <UART_SetConfig+0x188>
 8008780:	a201      	add	r2, pc, #4	@ (adr r2, 8008788 <UART_SetConfig+0xb4>)
 8008782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008786:	bf00      	nop
 8008788:	0800882d 	.word	0x0800882d
 800878c:	0800885d 	.word	0x0800885d
 8008790:	0800885d 	.word	0x0800885d
 8008794:	0800885d 	.word	0x0800885d
 8008798:	0800885d 	.word	0x0800885d
 800879c:	0800885d 	.word	0x0800885d
 80087a0:	0800885d 	.word	0x0800885d
 80087a4:	0800885d 	.word	0x0800885d
 80087a8:	08008835 	.word	0x08008835
 80087ac:	0800885d 	.word	0x0800885d
 80087b0:	0800885d 	.word	0x0800885d
 80087b4:	0800885d 	.word	0x0800885d
 80087b8:	0800885d 	.word	0x0800885d
 80087bc:	0800885d 	.word	0x0800885d
 80087c0:	0800885d 	.word	0x0800885d
 80087c4:	0800885d 	.word	0x0800885d
 80087c8:	0800883d 	.word	0x0800883d
 80087cc:	0800885d 	.word	0x0800885d
 80087d0:	0800885d 	.word	0x0800885d
 80087d4:	0800885d 	.word	0x0800885d
 80087d8:	0800885d 	.word	0x0800885d
 80087dc:	0800885d 	.word	0x0800885d
 80087e0:	0800885d 	.word	0x0800885d
 80087e4:	0800885d 	.word	0x0800885d
 80087e8:	08008845 	.word	0x08008845
 80087ec:	0800885d 	.word	0x0800885d
 80087f0:	0800885d 	.word	0x0800885d
 80087f4:	0800885d 	.word	0x0800885d
 80087f8:	0800885d 	.word	0x0800885d
 80087fc:	0800885d 	.word	0x0800885d
 8008800:	0800885d 	.word	0x0800885d
 8008804:	0800885d 	.word	0x0800885d
 8008808:	0800884d 	.word	0x0800884d
 800880c:	0800885d 	.word	0x0800885d
 8008810:	0800885d 	.word	0x0800885d
 8008814:	0800885d 	.word	0x0800885d
 8008818:	0800885d 	.word	0x0800885d
 800881c:	0800885d 	.word	0x0800885d
 8008820:	0800885d 	.word	0x0800885d
 8008824:	0800885d 	.word	0x0800885d
 8008828:	08008855 	.word	0x08008855
 800882c:	2301      	movs	r3, #1
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008832:	e326      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008834:	2304      	movs	r3, #4
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883a:	e322      	b.n	8008e82 <UART_SetConfig+0x7ae>
 800883c:	2308      	movs	r3, #8
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008842:	e31e      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008844:	2310      	movs	r3, #16
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884a:	e31a      	b.n	8008e82 <UART_SetConfig+0x7ae>
 800884c:	2320      	movs	r3, #32
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e316      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008854:	2340      	movs	r3, #64	@ 0x40
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e312      	b.n	8008e82 <UART_SetConfig+0x7ae>
 800885c:	2380      	movs	r3, #128	@ 0x80
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e30e      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a69      	ldr	r2, [pc, #420]	@ (8008a10 <UART_SetConfig+0x33c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d130      	bne.n	80088d0 <UART_SetConfig+0x1fc>
 800886e:	4b67      	ldr	r3, [pc, #412]	@ (8008a0c <UART_SetConfig+0x338>)
 8008870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	2b05      	cmp	r3, #5
 8008878:	d826      	bhi.n	80088c8 <UART_SetConfig+0x1f4>
 800887a:	a201      	add	r2, pc, #4	@ (adr r2, 8008880 <UART_SetConfig+0x1ac>)
 800887c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008880:	08008899 	.word	0x08008899
 8008884:	080088a1 	.word	0x080088a1
 8008888:	080088a9 	.word	0x080088a9
 800888c:	080088b1 	.word	0x080088b1
 8008890:	080088b9 	.word	0x080088b9
 8008894:	080088c1 	.word	0x080088c1
 8008898:	2300      	movs	r3, #0
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889e:	e2f0      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80088a0:	2304      	movs	r3, #4
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a6:	e2ec      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80088a8:	2308      	movs	r3, #8
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ae:	e2e8      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80088b0:	2310      	movs	r3, #16
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088b6:	e2e4      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80088b8:	2320      	movs	r3, #32
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088be:	e2e0      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80088c0:	2340      	movs	r3, #64	@ 0x40
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c6:	e2dc      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80088c8:	2380      	movs	r3, #128	@ 0x80
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e2d8      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a4f      	ldr	r2, [pc, #316]	@ (8008a14 <UART_SetConfig+0x340>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d130      	bne.n	800893c <UART_SetConfig+0x268>
 80088da:	4b4c      	ldr	r3, [pc, #304]	@ (8008a0c <UART_SetConfig+0x338>)
 80088dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088de:	f003 0307 	and.w	r3, r3, #7
 80088e2:	2b05      	cmp	r3, #5
 80088e4:	d826      	bhi.n	8008934 <UART_SetConfig+0x260>
 80088e6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ec <UART_SetConfig+0x218>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	08008905 	.word	0x08008905
 80088f0:	0800890d 	.word	0x0800890d
 80088f4:	08008915 	.word	0x08008915
 80088f8:	0800891d 	.word	0x0800891d
 80088fc:	08008925 	.word	0x08008925
 8008900:	0800892d 	.word	0x0800892d
 8008904:	2300      	movs	r3, #0
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890a:	e2ba      	b.n	8008e82 <UART_SetConfig+0x7ae>
 800890c:	2304      	movs	r3, #4
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e2b6      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008914:	2308      	movs	r3, #8
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891a:	e2b2      	b.n	8008e82 <UART_SetConfig+0x7ae>
 800891c:	2310      	movs	r3, #16
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008922:	e2ae      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008924:	2320      	movs	r3, #32
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892a:	e2aa      	b.n	8008e82 <UART_SetConfig+0x7ae>
 800892c:	2340      	movs	r3, #64	@ 0x40
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008932:	e2a6      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008934:	2380      	movs	r3, #128	@ 0x80
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e2a2      	b.n	8008e82 <UART_SetConfig+0x7ae>
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a35      	ldr	r2, [pc, #212]	@ (8008a18 <UART_SetConfig+0x344>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d130      	bne.n	80089a8 <UART_SetConfig+0x2d4>
 8008946:	4b31      	ldr	r3, [pc, #196]	@ (8008a0c <UART_SetConfig+0x338>)
 8008948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894a:	f003 0307 	and.w	r3, r3, #7
 800894e:	2b05      	cmp	r3, #5
 8008950:	d826      	bhi.n	80089a0 <UART_SetConfig+0x2cc>
 8008952:	a201      	add	r2, pc, #4	@ (adr r2, 8008958 <UART_SetConfig+0x284>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	08008971 	.word	0x08008971
 800895c:	08008979 	.word	0x08008979
 8008960:	08008981 	.word	0x08008981
 8008964:	08008989 	.word	0x08008989
 8008968:	08008991 	.word	0x08008991
 800896c:	08008999 	.word	0x08008999
 8008970:	2300      	movs	r3, #0
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e284      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008978:	2304      	movs	r3, #4
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e280      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008980:	2308      	movs	r3, #8
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e27c      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008988:	2310      	movs	r3, #16
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898e:	e278      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008990:	2320      	movs	r3, #32
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e274      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008998:	2340      	movs	r3, #64	@ 0x40
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899e:	e270      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80089a0:	2380      	movs	r3, #128	@ 0x80
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e26c      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a1b      	ldr	r2, [pc, #108]	@ (8008a1c <UART_SetConfig+0x348>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d142      	bne.n	8008a38 <UART_SetConfig+0x364>
 80089b2:	4b16      	ldr	r3, [pc, #88]	@ (8008a0c <UART_SetConfig+0x338>)
 80089b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	d838      	bhi.n	8008a30 <UART_SetConfig+0x35c>
 80089be:	a201      	add	r2, pc, #4	@ (adr r2, 80089c4 <UART_SetConfig+0x2f0>)
 80089c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c4:	080089dd 	.word	0x080089dd
 80089c8:	080089e5 	.word	0x080089e5
 80089cc:	080089ed 	.word	0x080089ed
 80089d0:	080089f5 	.word	0x080089f5
 80089d4:	08008a21 	.word	0x08008a21
 80089d8:	08008a29 	.word	0x08008a29
 80089dc:	2300      	movs	r3, #0
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e24e      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80089e4:	2304      	movs	r3, #4
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e24a      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80089ec:	2308      	movs	r3, #8
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e246      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e242      	b.n	8008e82 <UART_SetConfig+0x7ae>
 80089fc:	cfff69f3 	.word	0xcfff69f3
 8008a00:	58000c00 	.word	0x58000c00
 8008a04:	11fff4ff 	.word	0x11fff4ff
 8008a08:	40011000 	.word	0x40011000
 8008a0c:	58024400 	.word	0x58024400
 8008a10:	40004400 	.word	0x40004400
 8008a14:	40004800 	.word	0x40004800
 8008a18:	40004c00 	.word	0x40004c00
 8008a1c:	40005000 	.word	0x40005000
 8008a20:	2320      	movs	r3, #32
 8008a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a26:	e22c      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008a28:	2340      	movs	r3, #64	@ 0x40
 8008a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2e:	e228      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008a30:	2380      	movs	r3, #128	@ 0x80
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a36:	e224      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4ab1      	ldr	r2, [pc, #708]	@ (8008d04 <UART_SetConfig+0x630>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d176      	bne.n	8008b30 <UART_SetConfig+0x45c>
 8008a42:	4bb1      	ldr	r3, [pc, #708]	@ (8008d08 <UART_SetConfig+0x634>)
 8008a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a4a:	2b28      	cmp	r3, #40	@ 0x28
 8008a4c:	d86c      	bhi.n	8008b28 <UART_SetConfig+0x454>
 8008a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a54 <UART_SetConfig+0x380>)
 8008a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a54:	08008af9 	.word	0x08008af9
 8008a58:	08008b29 	.word	0x08008b29
 8008a5c:	08008b29 	.word	0x08008b29
 8008a60:	08008b29 	.word	0x08008b29
 8008a64:	08008b29 	.word	0x08008b29
 8008a68:	08008b29 	.word	0x08008b29
 8008a6c:	08008b29 	.word	0x08008b29
 8008a70:	08008b29 	.word	0x08008b29
 8008a74:	08008b01 	.word	0x08008b01
 8008a78:	08008b29 	.word	0x08008b29
 8008a7c:	08008b29 	.word	0x08008b29
 8008a80:	08008b29 	.word	0x08008b29
 8008a84:	08008b29 	.word	0x08008b29
 8008a88:	08008b29 	.word	0x08008b29
 8008a8c:	08008b29 	.word	0x08008b29
 8008a90:	08008b29 	.word	0x08008b29
 8008a94:	08008b09 	.word	0x08008b09
 8008a98:	08008b29 	.word	0x08008b29
 8008a9c:	08008b29 	.word	0x08008b29
 8008aa0:	08008b29 	.word	0x08008b29
 8008aa4:	08008b29 	.word	0x08008b29
 8008aa8:	08008b29 	.word	0x08008b29
 8008aac:	08008b29 	.word	0x08008b29
 8008ab0:	08008b29 	.word	0x08008b29
 8008ab4:	08008b11 	.word	0x08008b11
 8008ab8:	08008b29 	.word	0x08008b29
 8008abc:	08008b29 	.word	0x08008b29
 8008ac0:	08008b29 	.word	0x08008b29
 8008ac4:	08008b29 	.word	0x08008b29
 8008ac8:	08008b29 	.word	0x08008b29
 8008acc:	08008b29 	.word	0x08008b29
 8008ad0:	08008b29 	.word	0x08008b29
 8008ad4:	08008b19 	.word	0x08008b19
 8008ad8:	08008b29 	.word	0x08008b29
 8008adc:	08008b29 	.word	0x08008b29
 8008ae0:	08008b29 	.word	0x08008b29
 8008ae4:	08008b29 	.word	0x08008b29
 8008ae8:	08008b29 	.word	0x08008b29
 8008aec:	08008b29 	.word	0x08008b29
 8008af0:	08008b29 	.word	0x08008b29
 8008af4:	08008b21 	.word	0x08008b21
 8008af8:	2301      	movs	r3, #1
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afe:	e1c0      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b00:	2304      	movs	r3, #4
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b06:	e1bc      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b08:	2308      	movs	r3, #8
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0e:	e1b8      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b10:	2310      	movs	r3, #16
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b16:	e1b4      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b18:	2320      	movs	r3, #32
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1e:	e1b0      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b20:	2340      	movs	r3, #64	@ 0x40
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b26:	e1ac      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b28:	2380      	movs	r3, #128	@ 0x80
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b2e:	e1a8      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a75      	ldr	r2, [pc, #468]	@ (8008d0c <UART_SetConfig+0x638>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d130      	bne.n	8008b9c <UART_SetConfig+0x4c8>
 8008b3a:	4b73      	ldr	r3, [pc, #460]	@ (8008d08 <UART_SetConfig+0x634>)
 8008b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	2b05      	cmp	r3, #5
 8008b44:	d826      	bhi.n	8008b94 <UART_SetConfig+0x4c0>
 8008b46:	a201      	add	r2, pc, #4	@ (adr r2, 8008b4c <UART_SetConfig+0x478>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008b65 	.word	0x08008b65
 8008b50:	08008b6d 	.word	0x08008b6d
 8008b54:	08008b75 	.word	0x08008b75
 8008b58:	08008b7d 	.word	0x08008b7d
 8008b5c:	08008b85 	.word	0x08008b85
 8008b60:	08008b8d 	.word	0x08008b8d
 8008b64:	2300      	movs	r3, #0
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6a:	e18a      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b6c:	2304      	movs	r3, #4
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b72:	e186      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b74:	2308      	movs	r3, #8
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7a:	e182      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b82:	e17e      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b84:	2320      	movs	r3, #32
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8a:	e17a      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b8c:	2340      	movs	r3, #64	@ 0x40
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b92:	e176      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b94:	2380      	movs	r3, #128	@ 0x80
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9a:	e172      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a5b      	ldr	r2, [pc, #364]	@ (8008d10 <UART_SetConfig+0x63c>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d130      	bne.n	8008c08 <UART_SetConfig+0x534>
 8008ba6:	4b58      	ldr	r3, [pc, #352]	@ (8008d08 <UART_SetConfig+0x634>)
 8008ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	2b05      	cmp	r3, #5
 8008bb0:	d826      	bhi.n	8008c00 <UART_SetConfig+0x52c>
 8008bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb8 <UART_SetConfig+0x4e4>)
 8008bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb8:	08008bd1 	.word	0x08008bd1
 8008bbc:	08008bd9 	.word	0x08008bd9
 8008bc0:	08008be1 	.word	0x08008be1
 8008bc4:	08008be9 	.word	0x08008be9
 8008bc8:	08008bf1 	.word	0x08008bf1
 8008bcc:	08008bf9 	.word	0x08008bf9
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e154      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008bd8:	2304      	movs	r3, #4
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e150      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008be0:	2308      	movs	r3, #8
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e14c      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008be8:	2310      	movs	r3, #16
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e148      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008bf0:	2320      	movs	r3, #32
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e144      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008bf8:	2340      	movs	r3, #64	@ 0x40
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfe:	e140      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008c00:	2380      	movs	r3, #128	@ 0x80
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c06:	e13c      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a41      	ldr	r2, [pc, #260]	@ (8008d14 <UART_SetConfig+0x640>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	f040 8082 	bne.w	8008d18 <UART_SetConfig+0x644>
 8008c14:	4b3c      	ldr	r3, [pc, #240]	@ (8008d08 <UART_SetConfig+0x634>)
 8008c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c1c:	2b28      	cmp	r3, #40	@ 0x28
 8008c1e:	d86d      	bhi.n	8008cfc <UART_SetConfig+0x628>
 8008c20:	a201      	add	r2, pc, #4	@ (adr r2, 8008c28 <UART_SetConfig+0x554>)
 8008c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c26:	bf00      	nop
 8008c28:	08008ccd 	.word	0x08008ccd
 8008c2c:	08008cfd 	.word	0x08008cfd
 8008c30:	08008cfd 	.word	0x08008cfd
 8008c34:	08008cfd 	.word	0x08008cfd
 8008c38:	08008cfd 	.word	0x08008cfd
 8008c3c:	08008cfd 	.word	0x08008cfd
 8008c40:	08008cfd 	.word	0x08008cfd
 8008c44:	08008cfd 	.word	0x08008cfd
 8008c48:	08008cd5 	.word	0x08008cd5
 8008c4c:	08008cfd 	.word	0x08008cfd
 8008c50:	08008cfd 	.word	0x08008cfd
 8008c54:	08008cfd 	.word	0x08008cfd
 8008c58:	08008cfd 	.word	0x08008cfd
 8008c5c:	08008cfd 	.word	0x08008cfd
 8008c60:	08008cfd 	.word	0x08008cfd
 8008c64:	08008cfd 	.word	0x08008cfd
 8008c68:	08008cdd 	.word	0x08008cdd
 8008c6c:	08008cfd 	.word	0x08008cfd
 8008c70:	08008cfd 	.word	0x08008cfd
 8008c74:	08008cfd 	.word	0x08008cfd
 8008c78:	08008cfd 	.word	0x08008cfd
 8008c7c:	08008cfd 	.word	0x08008cfd
 8008c80:	08008cfd 	.word	0x08008cfd
 8008c84:	08008cfd 	.word	0x08008cfd
 8008c88:	08008ce5 	.word	0x08008ce5
 8008c8c:	08008cfd 	.word	0x08008cfd
 8008c90:	08008cfd 	.word	0x08008cfd
 8008c94:	08008cfd 	.word	0x08008cfd
 8008c98:	08008cfd 	.word	0x08008cfd
 8008c9c:	08008cfd 	.word	0x08008cfd
 8008ca0:	08008cfd 	.word	0x08008cfd
 8008ca4:	08008cfd 	.word	0x08008cfd
 8008ca8:	08008ced 	.word	0x08008ced
 8008cac:	08008cfd 	.word	0x08008cfd
 8008cb0:	08008cfd 	.word	0x08008cfd
 8008cb4:	08008cfd 	.word	0x08008cfd
 8008cb8:	08008cfd 	.word	0x08008cfd
 8008cbc:	08008cfd 	.word	0x08008cfd
 8008cc0:	08008cfd 	.word	0x08008cfd
 8008cc4:	08008cfd 	.word	0x08008cfd
 8008cc8:	08008cf5 	.word	0x08008cf5
 8008ccc:	2301      	movs	r3, #1
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e0d6      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008cd4:	2304      	movs	r3, #4
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e0d2      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008cdc:	2308      	movs	r3, #8
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e0ce      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e0ca      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008cec:	2320      	movs	r3, #32
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e0c6      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008cf4:	2340      	movs	r3, #64	@ 0x40
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e0c2      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008cfc:	2380      	movs	r3, #128	@ 0x80
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e0be      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008d04:	40011400 	.word	0x40011400
 8008d08:	58024400 	.word	0x58024400
 8008d0c:	40007800 	.word	0x40007800
 8008d10:	40007c00 	.word	0x40007c00
 8008d14:	40011800 	.word	0x40011800
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4aad      	ldr	r2, [pc, #692]	@ (8008fd4 <UART_SetConfig+0x900>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d176      	bne.n	8008e10 <UART_SetConfig+0x73c>
 8008d22:	4bad      	ldr	r3, [pc, #692]	@ (8008fd8 <UART_SetConfig+0x904>)
 8008d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d2a:	2b28      	cmp	r3, #40	@ 0x28
 8008d2c:	d86c      	bhi.n	8008e08 <UART_SetConfig+0x734>
 8008d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d34 <UART_SetConfig+0x660>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008dd9 	.word	0x08008dd9
 8008d38:	08008e09 	.word	0x08008e09
 8008d3c:	08008e09 	.word	0x08008e09
 8008d40:	08008e09 	.word	0x08008e09
 8008d44:	08008e09 	.word	0x08008e09
 8008d48:	08008e09 	.word	0x08008e09
 8008d4c:	08008e09 	.word	0x08008e09
 8008d50:	08008e09 	.word	0x08008e09
 8008d54:	08008de1 	.word	0x08008de1
 8008d58:	08008e09 	.word	0x08008e09
 8008d5c:	08008e09 	.word	0x08008e09
 8008d60:	08008e09 	.word	0x08008e09
 8008d64:	08008e09 	.word	0x08008e09
 8008d68:	08008e09 	.word	0x08008e09
 8008d6c:	08008e09 	.word	0x08008e09
 8008d70:	08008e09 	.word	0x08008e09
 8008d74:	08008de9 	.word	0x08008de9
 8008d78:	08008e09 	.word	0x08008e09
 8008d7c:	08008e09 	.word	0x08008e09
 8008d80:	08008e09 	.word	0x08008e09
 8008d84:	08008e09 	.word	0x08008e09
 8008d88:	08008e09 	.word	0x08008e09
 8008d8c:	08008e09 	.word	0x08008e09
 8008d90:	08008e09 	.word	0x08008e09
 8008d94:	08008df1 	.word	0x08008df1
 8008d98:	08008e09 	.word	0x08008e09
 8008d9c:	08008e09 	.word	0x08008e09
 8008da0:	08008e09 	.word	0x08008e09
 8008da4:	08008e09 	.word	0x08008e09
 8008da8:	08008e09 	.word	0x08008e09
 8008dac:	08008e09 	.word	0x08008e09
 8008db0:	08008e09 	.word	0x08008e09
 8008db4:	08008df9 	.word	0x08008df9
 8008db8:	08008e09 	.word	0x08008e09
 8008dbc:	08008e09 	.word	0x08008e09
 8008dc0:	08008e09 	.word	0x08008e09
 8008dc4:	08008e09 	.word	0x08008e09
 8008dc8:	08008e09 	.word	0x08008e09
 8008dcc:	08008e09 	.word	0x08008e09
 8008dd0:	08008e09 	.word	0x08008e09
 8008dd4:	08008e01 	.word	0x08008e01
 8008dd8:	2301      	movs	r3, #1
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dde:	e050      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008de0:	2304      	movs	r3, #4
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de6:	e04c      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008de8:	2308      	movs	r3, #8
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dee:	e048      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008df0:	2310      	movs	r3, #16
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df6:	e044      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008df8:	2320      	movs	r3, #32
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfe:	e040      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008e00:	2340      	movs	r3, #64	@ 0x40
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e06:	e03c      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008e08:	2380      	movs	r3, #128	@ 0x80
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0e:	e038      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a71      	ldr	r2, [pc, #452]	@ (8008fdc <UART_SetConfig+0x908>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d130      	bne.n	8008e7c <UART_SetConfig+0x7a8>
 8008e1a:	4b6f      	ldr	r3, [pc, #444]	@ (8008fd8 <UART_SetConfig+0x904>)
 8008e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	2b05      	cmp	r3, #5
 8008e24:	d826      	bhi.n	8008e74 <UART_SetConfig+0x7a0>
 8008e26:	a201      	add	r2, pc, #4	@ (adr r2, 8008e2c <UART_SetConfig+0x758>)
 8008e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2c:	08008e45 	.word	0x08008e45
 8008e30:	08008e4d 	.word	0x08008e4d
 8008e34:	08008e55 	.word	0x08008e55
 8008e38:	08008e5d 	.word	0x08008e5d
 8008e3c:	08008e65 	.word	0x08008e65
 8008e40:	08008e6d 	.word	0x08008e6d
 8008e44:	2302      	movs	r3, #2
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e01a      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008e4c:	2304      	movs	r3, #4
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e016      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008e54:	2308      	movs	r3, #8
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e012      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008e5c:	2310      	movs	r3, #16
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e00e      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008e64:	2320      	movs	r3, #32
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e00a      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008e6c:	2340      	movs	r3, #64	@ 0x40
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e006      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008e74:	2380      	movs	r3, #128	@ 0x80
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e002      	b.n	8008e82 <UART_SetConfig+0x7ae>
 8008e7c:	2380      	movs	r3, #128	@ 0x80
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a55      	ldr	r2, [pc, #340]	@ (8008fdc <UART_SetConfig+0x908>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	f040 80f8 	bne.w	800907e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e92:	2b20      	cmp	r3, #32
 8008e94:	dc46      	bgt.n	8008f24 <UART_SetConfig+0x850>
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	db75      	blt.n	8008f86 <UART_SetConfig+0x8b2>
 8008e9a:	3b02      	subs	r3, #2
 8008e9c:	2b1e      	cmp	r3, #30
 8008e9e:	d872      	bhi.n	8008f86 <UART_SetConfig+0x8b2>
 8008ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea8 <UART_SetConfig+0x7d4>)
 8008ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea6:	bf00      	nop
 8008ea8:	08008f2b 	.word	0x08008f2b
 8008eac:	08008f87 	.word	0x08008f87
 8008eb0:	08008f33 	.word	0x08008f33
 8008eb4:	08008f87 	.word	0x08008f87
 8008eb8:	08008f87 	.word	0x08008f87
 8008ebc:	08008f87 	.word	0x08008f87
 8008ec0:	08008f43 	.word	0x08008f43
 8008ec4:	08008f87 	.word	0x08008f87
 8008ec8:	08008f87 	.word	0x08008f87
 8008ecc:	08008f87 	.word	0x08008f87
 8008ed0:	08008f87 	.word	0x08008f87
 8008ed4:	08008f87 	.word	0x08008f87
 8008ed8:	08008f87 	.word	0x08008f87
 8008edc:	08008f87 	.word	0x08008f87
 8008ee0:	08008f53 	.word	0x08008f53
 8008ee4:	08008f87 	.word	0x08008f87
 8008ee8:	08008f87 	.word	0x08008f87
 8008eec:	08008f87 	.word	0x08008f87
 8008ef0:	08008f87 	.word	0x08008f87
 8008ef4:	08008f87 	.word	0x08008f87
 8008ef8:	08008f87 	.word	0x08008f87
 8008efc:	08008f87 	.word	0x08008f87
 8008f00:	08008f87 	.word	0x08008f87
 8008f04:	08008f87 	.word	0x08008f87
 8008f08:	08008f87 	.word	0x08008f87
 8008f0c:	08008f87 	.word	0x08008f87
 8008f10:	08008f87 	.word	0x08008f87
 8008f14:	08008f87 	.word	0x08008f87
 8008f18:	08008f87 	.word	0x08008f87
 8008f1c:	08008f87 	.word	0x08008f87
 8008f20:	08008f79 	.word	0x08008f79
 8008f24:	2b40      	cmp	r3, #64	@ 0x40
 8008f26:	d02a      	beq.n	8008f7e <UART_SetConfig+0x8aa>
 8008f28:	e02d      	b.n	8008f86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008f2a:	f7fe f809 	bl	8006f40 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f30:	e02f      	b.n	8008f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe f818 	bl	8006f6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f40:	e027      	b.n	8008f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f42:	f107 0318 	add.w	r3, r7, #24
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe f964 	bl	8007214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f50:	e01f      	b.n	8008f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f52:	4b21      	ldr	r3, [pc, #132]	@ (8008fd8 <UART_SetConfig+0x904>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d009      	beq.n	8008f72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8008fd8 <UART_SetConfig+0x904>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe0 <UART_SetConfig+0x90c>)
 8008f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f70:	e00f      	b.n	8008f92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008f72:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe0 <UART_SetConfig+0x90c>)
 8008f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f76:	e00c      	b.n	8008f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f78:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe4 <UART_SetConfig+0x910>)
 8008f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f7c:	e009      	b.n	8008f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f84:	e005      	b.n	8008f92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 81ee 	beq.w	8009376 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9e:	4a12      	ldr	r2, [pc, #72]	@ (8008fe8 <UART_SetConfig+0x914>)
 8008fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	4413      	add	r3, r2
 8008fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d305      	bcc.n	8008fca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d910      	bls.n	8008fec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008fd0:	e1d1      	b.n	8009376 <UART_SetConfig+0xca2>
 8008fd2:	bf00      	nop
 8008fd4:	40011c00 	.word	0x40011c00
 8008fd8:	58024400 	.word	0x58024400
 8008fdc:	58000c00 	.word	0x58000c00
 8008fe0:	03d09000 	.word	0x03d09000
 8008fe4:	003d0900 	.word	0x003d0900
 8008fe8:	08009fa0 	.word	0x08009fa0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fee:	2200      	movs	r2, #0
 8008ff0:	60bb      	str	r3, [r7, #8]
 8008ff2:	60fa      	str	r2, [r7, #12]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff8:	4ac0      	ldr	r2, [pc, #768]	@ (80092fc <UART_SetConfig+0xc28>)
 8008ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	2200      	movs	r2, #0
 8009002:	603b      	str	r3, [r7, #0]
 8009004:	607a      	str	r2, [r7, #4]
 8009006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800900a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800900e:	f7f7 f985 	bl	800031c <__aeabi_uldivmod>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4610      	mov	r0, r2
 8009018:	4619      	mov	r1, r3
 800901a:	f04f 0200 	mov.w	r2, #0
 800901e:	f04f 0300 	mov.w	r3, #0
 8009022:	020b      	lsls	r3, r1, #8
 8009024:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009028:	0202      	lsls	r2, r0, #8
 800902a:	6979      	ldr	r1, [r7, #20]
 800902c:	6849      	ldr	r1, [r1, #4]
 800902e:	0849      	lsrs	r1, r1, #1
 8009030:	2000      	movs	r0, #0
 8009032:	460c      	mov	r4, r1
 8009034:	4605      	mov	r5, r0
 8009036:	eb12 0804 	adds.w	r8, r2, r4
 800903a:	eb43 0905 	adc.w	r9, r3, r5
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	469a      	mov	sl, r3
 8009046:	4693      	mov	fp, r2
 8009048:	4652      	mov	r2, sl
 800904a:	465b      	mov	r3, fp
 800904c:	4640      	mov	r0, r8
 800904e:	4649      	mov	r1, r9
 8009050:	f7f7 f964 	bl	800031c <__aeabi_uldivmod>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4613      	mov	r3, r2
 800905a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800905c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009062:	d308      	bcc.n	8009076 <UART_SetConfig+0x9a2>
 8009064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800906a:	d204      	bcs.n	8009076 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009072:	60da      	str	r2, [r3, #12]
 8009074:	e17f      	b.n	8009376 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800907c:	e17b      	b.n	8009376 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009086:	f040 80bd 	bne.w	8009204 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800908a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800908e:	2b20      	cmp	r3, #32
 8009090:	dc48      	bgt.n	8009124 <UART_SetConfig+0xa50>
 8009092:	2b00      	cmp	r3, #0
 8009094:	db7b      	blt.n	800918e <UART_SetConfig+0xaba>
 8009096:	2b20      	cmp	r3, #32
 8009098:	d879      	bhi.n	800918e <UART_SetConfig+0xaba>
 800909a:	a201      	add	r2, pc, #4	@ (adr r2, 80090a0 <UART_SetConfig+0x9cc>)
 800909c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a0:	0800912b 	.word	0x0800912b
 80090a4:	08009133 	.word	0x08009133
 80090a8:	0800918f 	.word	0x0800918f
 80090ac:	0800918f 	.word	0x0800918f
 80090b0:	0800913b 	.word	0x0800913b
 80090b4:	0800918f 	.word	0x0800918f
 80090b8:	0800918f 	.word	0x0800918f
 80090bc:	0800918f 	.word	0x0800918f
 80090c0:	0800914b 	.word	0x0800914b
 80090c4:	0800918f 	.word	0x0800918f
 80090c8:	0800918f 	.word	0x0800918f
 80090cc:	0800918f 	.word	0x0800918f
 80090d0:	0800918f 	.word	0x0800918f
 80090d4:	0800918f 	.word	0x0800918f
 80090d8:	0800918f 	.word	0x0800918f
 80090dc:	0800918f 	.word	0x0800918f
 80090e0:	0800915b 	.word	0x0800915b
 80090e4:	0800918f 	.word	0x0800918f
 80090e8:	0800918f 	.word	0x0800918f
 80090ec:	0800918f 	.word	0x0800918f
 80090f0:	0800918f 	.word	0x0800918f
 80090f4:	0800918f 	.word	0x0800918f
 80090f8:	0800918f 	.word	0x0800918f
 80090fc:	0800918f 	.word	0x0800918f
 8009100:	0800918f 	.word	0x0800918f
 8009104:	0800918f 	.word	0x0800918f
 8009108:	0800918f 	.word	0x0800918f
 800910c:	0800918f 	.word	0x0800918f
 8009110:	0800918f 	.word	0x0800918f
 8009114:	0800918f 	.word	0x0800918f
 8009118:	0800918f 	.word	0x0800918f
 800911c:	0800918f 	.word	0x0800918f
 8009120:	08009181 	.word	0x08009181
 8009124:	2b40      	cmp	r3, #64	@ 0x40
 8009126:	d02e      	beq.n	8009186 <UART_SetConfig+0xab2>
 8009128:	e031      	b.n	800918e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800912a:	f7fc fcfb 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 800912e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009130:	e033      	b.n	800919a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009132:	f7fc fd0d 	bl	8005b50 <HAL_RCC_GetPCLK2Freq>
 8009136:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009138:	e02f      	b.n	800919a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800913a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800913e:	4618      	mov	r0, r3
 8009140:	f7fd ff14 	bl	8006f6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009148:	e027      	b.n	800919a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800914a:	f107 0318 	add.w	r3, r7, #24
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe f860 	bl	8007214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009158:	e01f      	b.n	800919a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800915a:	4b69      	ldr	r3, [pc, #420]	@ (8009300 <UART_SetConfig+0xc2c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b00      	cmp	r3, #0
 8009164:	d009      	beq.n	800917a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009166:	4b66      	ldr	r3, [pc, #408]	@ (8009300 <UART_SetConfig+0xc2c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	08db      	lsrs	r3, r3, #3
 800916c:	f003 0303 	and.w	r3, r3, #3
 8009170:	4a64      	ldr	r2, [pc, #400]	@ (8009304 <UART_SetConfig+0xc30>)
 8009172:	fa22 f303 	lsr.w	r3, r2, r3
 8009176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009178:	e00f      	b.n	800919a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800917a:	4b62      	ldr	r3, [pc, #392]	@ (8009304 <UART_SetConfig+0xc30>)
 800917c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917e:	e00c      	b.n	800919a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009180:	4b61      	ldr	r3, [pc, #388]	@ (8009308 <UART_SetConfig+0xc34>)
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009184:	e009      	b.n	800919a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800918a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918c:	e005      	b.n	800919a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800918e:	2300      	movs	r3, #0
 8009190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009198:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800919a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 80ea 	beq.w	8009376 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a6:	4a55      	ldr	r2, [pc, #340]	@ (80092fc <UART_SetConfig+0xc28>)
 80091a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ac:	461a      	mov	r2, r3
 80091ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80091b4:	005a      	lsls	r2, r3, #1
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	085b      	lsrs	r3, r3, #1
 80091bc:	441a      	add	r2, r3
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ca:	2b0f      	cmp	r3, #15
 80091cc:	d916      	bls.n	80091fc <UART_SetConfig+0xb28>
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091d4:	d212      	bcs.n	80091fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d8:	b29b      	uxth	r3, r3
 80091da:	f023 030f 	bic.w	r3, r3, #15
 80091de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	085b      	lsrs	r3, r3, #1
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80091ee:	4313      	orrs	r3, r2
 80091f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80091f8:	60da      	str	r2, [r3, #12]
 80091fa:	e0bc      	b.n	8009376 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009202:	e0b8      	b.n	8009376 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009204:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009208:	2b20      	cmp	r3, #32
 800920a:	dc4b      	bgt.n	80092a4 <UART_SetConfig+0xbd0>
 800920c:	2b00      	cmp	r3, #0
 800920e:	f2c0 8087 	blt.w	8009320 <UART_SetConfig+0xc4c>
 8009212:	2b20      	cmp	r3, #32
 8009214:	f200 8084 	bhi.w	8009320 <UART_SetConfig+0xc4c>
 8009218:	a201      	add	r2, pc, #4	@ (adr r2, 8009220 <UART_SetConfig+0xb4c>)
 800921a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921e:	bf00      	nop
 8009220:	080092ab 	.word	0x080092ab
 8009224:	080092b3 	.word	0x080092b3
 8009228:	08009321 	.word	0x08009321
 800922c:	08009321 	.word	0x08009321
 8009230:	080092bb 	.word	0x080092bb
 8009234:	08009321 	.word	0x08009321
 8009238:	08009321 	.word	0x08009321
 800923c:	08009321 	.word	0x08009321
 8009240:	080092cb 	.word	0x080092cb
 8009244:	08009321 	.word	0x08009321
 8009248:	08009321 	.word	0x08009321
 800924c:	08009321 	.word	0x08009321
 8009250:	08009321 	.word	0x08009321
 8009254:	08009321 	.word	0x08009321
 8009258:	08009321 	.word	0x08009321
 800925c:	08009321 	.word	0x08009321
 8009260:	080092db 	.word	0x080092db
 8009264:	08009321 	.word	0x08009321
 8009268:	08009321 	.word	0x08009321
 800926c:	08009321 	.word	0x08009321
 8009270:	08009321 	.word	0x08009321
 8009274:	08009321 	.word	0x08009321
 8009278:	08009321 	.word	0x08009321
 800927c:	08009321 	.word	0x08009321
 8009280:	08009321 	.word	0x08009321
 8009284:	08009321 	.word	0x08009321
 8009288:	08009321 	.word	0x08009321
 800928c:	08009321 	.word	0x08009321
 8009290:	08009321 	.word	0x08009321
 8009294:	08009321 	.word	0x08009321
 8009298:	08009321 	.word	0x08009321
 800929c:	08009321 	.word	0x08009321
 80092a0:	08009313 	.word	0x08009313
 80092a4:	2b40      	cmp	r3, #64	@ 0x40
 80092a6:	d037      	beq.n	8009318 <UART_SetConfig+0xc44>
 80092a8:	e03a      	b.n	8009320 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092aa:	f7fc fc3b 	bl	8005b24 <HAL_RCC_GetPCLK1Freq>
 80092ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092b0:	e03c      	b.n	800932c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092b2:	f7fc fc4d 	bl	8005b50 <HAL_RCC_GetPCLK2Freq>
 80092b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092b8:	e038      	b.n	800932c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fd fe54 	bl	8006f6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c8:	e030      	b.n	800932c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ca:	f107 0318 	add.w	r3, r7, #24
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fd ffa0 	bl	8007214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d8:	e028      	b.n	800932c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092da:	4b09      	ldr	r3, [pc, #36]	@ (8009300 <UART_SetConfig+0xc2c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0320 	and.w	r3, r3, #32
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d012      	beq.n	800930c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092e6:	4b06      	ldr	r3, [pc, #24]	@ (8009300 <UART_SetConfig+0xc2c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	08db      	lsrs	r3, r3, #3
 80092ec:	f003 0303 	and.w	r3, r3, #3
 80092f0:	4a04      	ldr	r2, [pc, #16]	@ (8009304 <UART_SetConfig+0xc30>)
 80092f2:	fa22 f303 	lsr.w	r3, r2, r3
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092f8:	e018      	b.n	800932c <UART_SetConfig+0xc58>
 80092fa:	bf00      	nop
 80092fc:	08009fa0 	.word	0x08009fa0
 8009300:	58024400 	.word	0x58024400
 8009304:	03d09000 	.word	0x03d09000
 8009308:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800930c:	4b24      	ldr	r3, [pc, #144]	@ (80093a0 <UART_SetConfig+0xccc>)
 800930e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009310:	e00c      	b.n	800932c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009312:	4b24      	ldr	r3, [pc, #144]	@ (80093a4 <UART_SetConfig+0xcd0>)
 8009314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009316:	e009      	b.n	800932c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009318:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800931c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800931e:	e005      	b.n	800932c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009320:	2300      	movs	r3, #0
 8009322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800932a:	bf00      	nop
    }

    if (pclk != 0U)
 800932c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800932e:	2b00      	cmp	r3, #0
 8009330:	d021      	beq.n	8009376 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009336:	4a1c      	ldr	r2, [pc, #112]	@ (80093a8 <UART_SetConfig+0xcd4>)
 8009338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800933c:	461a      	mov	r2, r3
 800933e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009340:	fbb3 f2f2 	udiv	r2, r3, r2
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	085b      	lsrs	r3, r3, #1
 800934a:	441a      	add	r2, r3
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	fbb2 f3f3 	udiv	r3, r2, r3
 8009354:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009358:	2b0f      	cmp	r3, #15
 800935a:	d909      	bls.n	8009370 <UART_SetConfig+0xc9c>
 800935c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009362:	d205      	bcs.n	8009370 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009366:	b29a      	uxth	r2, r3
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60da      	str	r2, [r3, #12]
 800936e:	e002      	b.n	8009376 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2201      	movs	r2, #1
 800937a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2201      	movs	r2, #1
 8009382:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2200      	movs	r2, #0
 800938a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2200      	movs	r2, #0
 8009390:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009392:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009396:	4618      	mov	r0, r3
 8009398:	3748      	adds	r7, #72	@ 0x48
 800939a:	46bd      	mov	sp, r7
 800939c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093a0:	03d09000 	.word	0x03d09000
 80093a4:	003d0900 	.word	0x003d0900
 80093a8:	08009fa0 	.word	0x08009fa0

080093ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00a      	beq.n	80093d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00a      	beq.n	80093f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fc:	f003 0302 	and.w	r3, r3, #2
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00a      	beq.n	800941a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941e:	f003 0304 	and.w	r3, r3, #4
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00a      	beq.n	800943c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009440:	f003 0310 	and.w	r3, r3, #16
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00a      	beq.n	800945e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009462:	f003 0320 	and.w	r3, r3, #32
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00a      	beq.n	8009480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009488:	2b00      	cmp	r3, #0
 800948a:	d01a      	beq.n	80094c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094aa:	d10a      	bne.n	80094c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00a      	beq.n	80094e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	430a      	orrs	r2, r1
 80094e2:	605a      	str	r2, [r3, #4]
  }
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b098      	sub	sp, #96	@ 0x60
 80094f4:	af02      	add	r7, sp, #8
 80094f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009500:	f7f8 f8b2 	bl	8001668 <HAL_GetTick>
 8009504:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0308 	and.w	r3, r3, #8
 8009510:	2b08      	cmp	r3, #8
 8009512:	d12f      	bne.n	8009574 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009514:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800951c:	2200      	movs	r2, #0
 800951e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f88e 	bl	8009644 <UART_WaitOnFlagUntilTimeout>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d022      	beq.n	8009574 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800953c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800953e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009542:	653b      	str	r3, [r7, #80]	@ 0x50
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800954c:	647b      	str	r3, [r7, #68]	@ 0x44
 800954e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800955a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e6      	bne.n	800952e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2220      	movs	r2, #32
 8009564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e063      	b.n	800963c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0304 	and.w	r3, r3, #4
 800957e:	2b04      	cmp	r3, #4
 8009580:	d149      	bne.n	8009616 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009582:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800958a:	2200      	movs	r2, #0
 800958c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f857 	bl	8009644 <UART_WaitOnFlagUntilTimeout>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d03c      	beq.n	8009616 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	623b      	str	r3, [r7, #32]
   return(result);
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80095bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e6      	bne.n	800959c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3308      	adds	r3, #8
 80095d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f023 0301 	bic.w	r3, r3, #1
 80095e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3308      	adds	r3, #8
 80095ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095ee:	61fa      	str	r2, [r7, #28]
 80095f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	69b9      	ldr	r1, [r7, #24]
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	617b      	str	r3, [r7, #20]
   return(result);
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e5      	bne.n	80095ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e012      	b.n	800963c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2220      	movs	r2, #32
 800961a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2220      	movs	r2, #32
 8009622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3758      	adds	r7, #88	@ 0x58
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	603b      	str	r3, [r7, #0]
 8009650:	4613      	mov	r3, r2
 8009652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009654:	e04f      	b.n	80096f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800965c:	d04b      	beq.n	80096f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800965e:	f7f8 f803 	bl	8001668 <HAL_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	429a      	cmp	r2, r3
 800966c:	d302      	bcc.n	8009674 <UART_WaitOnFlagUntilTimeout+0x30>
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d101      	bne.n	8009678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e04e      	b.n	8009716 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0304 	and.w	r3, r3, #4
 8009682:	2b00      	cmp	r3, #0
 8009684:	d037      	beq.n	80096f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	2b80      	cmp	r3, #128	@ 0x80
 800968a:	d034      	beq.n	80096f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	2b40      	cmp	r3, #64	@ 0x40
 8009690:	d031      	beq.n	80096f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	f003 0308 	and.w	r3, r3, #8
 800969c:	2b08      	cmp	r3, #8
 800969e:	d110      	bne.n	80096c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2208      	movs	r2, #8
 80096a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 f921 	bl	80098f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2208      	movs	r2, #8
 80096b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e029      	b.n	8009716 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	69db      	ldr	r3, [r3, #28]
 80096c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096d0:	d111      	bne.n	80096f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 f907 	bl	80098f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2220      	movs	r2, #32
 80096e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e00f      	b.n	8009716 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	69da      	ldr	r2, [r3, #28]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	4013      	ands	r3, r2
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	429a      	cmp	r2, r3
 8009704:	bf0c      	ite	eq
 8009706:	2301      	moveq	r3, #1
 8009708:	2300      	movne	r3, #0
 800970a:	b2db      	uxtb	r3, r3
 800970c:	461a      	mov	r2, r3
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	429a      	cmp	r2, r3
 8009712:	d0a0      	beq.n	8009656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b096      	sub	sp, #88	@ 0x58
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	4613      	mov	r3, r2
 800972c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	88fa      	ldrh	r2, [r7, #6]
 8009738:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2222      	movs	r2, #34	@ 0x22
 8009748:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009752:	2b00      	cmp	r3, #0
 8009754:	d02d      	beq.n	80097b2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800975c:	4a40      	ldr	r2, [pc, #256]	@ (8009860 <UART_Start_Receive_DMA+0x140>)
 800975e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009766:	4a3f      	ldr	r2, [pc, #252]	@ (8009864 <UART_Start_Receive_DMA+0x144>)
 8009768:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009770:	4a3d      	ldr	r2, [pc, #244]	@ (8009868 <UART_Start_Receive_DMA+0x148>)
 8009772:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800977a:	2200      	movs	r2, #0
 800977c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3324      	adds	r3, #36	@ 0x24
 800978a:	4619      	mov	r1, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009790:	461a      	mov	r2, r3
 8009792:	88fb      	ldrh	r3, [r7, #6]
 8009794:	f7f8 fbd0 	bl	8001f38 <HAL_DMA_Start_IT>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d009      	beq.n	80097b2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2210      	movs	r2, #16
 80097a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2220      	movs	r2, #32
 80097aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e051      	b.n	8009856 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d018      	beq.n	80097ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097c2:	e853 3f00 	ldrex	r3, [r3]
 80097c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	461a      	mov	r2, r3
 80097d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097da:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80097de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80097e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e6      	bne.n	80097ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3308      	adds	r3, #8
 80097f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fe:	f043 0301 	orr.w	r3, r3, #1
 8009802:	653b      	str	r3, [r7, #80]	@ 0x50
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3308      	adds	r3, #8
 800980a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800980c:	637a      	str	r2, [r7, #52]	@ 0x34
 800980e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009812:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800981a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e5      	bne.n	80097ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3308      	adds	r3, #8
 8009826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	e853 3f00 	ldrex	r3, [r3]
 800982e:	613b      	str	r3, [r7, #16]
   return(result);
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3308      	adds	r3, #8
 800983e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009840:	623a      	str	r2, [r7, #32]
 8009842:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009844:	69f9      	ldr	r1, [r7, #28]
 8009846:	6a3a      	ldr	r2, [r7, #32]
 8009848:	e841 2300 	strex	r3, r2, [r1]
 800984c:	61bb      	str	r3, [r7, #24]
   return(result);
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1e5      	bne.n	8009820 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3758      	adds	r7, #88	@ 0x58
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	080099bd 	.word	0x080099bd
 8009864:	08009ae5 	.word	0x08009ae5
 8009868:	08009b23 	.word	0x08009b23

0800986c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800986c:	b480      	push	{r7}
 800986e:	b08f      	sub	sp, #60	@ 0x3c
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	e853 3f00 	ldrex	r3, [r3]
 8009880:	61fb      	str	r3, [r7, #28]
   return(result);
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009892:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009894:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800989a:	e841 2300 	strex	r3, r2, [r1]
 800989e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1e6      	bne.n	8009874 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3308      	adds	r3, #8
 80098ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80098bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3308      	adds	r3, #8
 80098c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098c6:	61ba      	str	r2, [r7, #24]
 80098c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	6979      	ldr	r1, [r7, #20]
 80098cc:	69ba      	ldr	r2, [r7, #24]
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	613b      	str	r3, [r7, #16]
   return(result);
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e5      	bne.n	80098a6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2220      	movs	r2, #32
 80098de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80098e2:	bf00      	nop
 80098e4:	373c      	adds	r7, #60	@ 0x3c
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
	...

080098f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b095      	sub	sp, #84	@ 0x54
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800990c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009916:	643b      	str	r3, [r7, #64]	@ 0x40
 8009918:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800991c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e6      	bne.n	80098f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3308      	adds	r3, #8
 8009930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	e853 3f00 	ldrex	r3, [r3]
 8009938:	61fb      	str	r3, [r7, #28]
   return(result);
 800993a:	69fa      	ldr	r2, [r7, #28]
 800993c:	4b1e      	ldr	r3, [pc, #120]	@ (80099b8 <UART_EndRxTransfer+0xc8>)
 800993e:	4013      	ands	r3, r2
 8009940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3308      	adds	r3, #8
 8009948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800994a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800994c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e5      	bne.n	800992a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009962:	2b01      	cmp	r3, #1
 8009964:	d118      	bne.n	8009998 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	60bb      	str	r3, [r7, #8]
   return(result);
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	f023 0310 	bic.w	r3, r3, #16
 800997a:	647b      	str	r3, [r7, #68]	@ 0x44
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	461a      	mov	r2, r3
 8009982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009984:	61bb      	str	r3, [r7, #24]
 8009986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009988:	6979      	ldr	r1, [r7, #20]
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	e841 2300 	strex	r3, r2, [r1]
 8009990:	613b      	str	r3, [r7, #16]
   return(result);
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1e6      	bne.n	8009966 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2220      	movs	r2, #32
 800999c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80099ac:	bf00      	nop
 80099ae:	3754      	adds	r7, #84	@ 0x54
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	effffffe 	.word	0xeffffffe

080099bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b09c      	sub	sp, #112	@ 0x70
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099d2:	d071      	beq.n	8009ab8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80099d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099d6:	2200      	movs	r2, #0
 80099d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e6      	bne.n	80099dc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3308      	adds	r3, #8
 8009a14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a20:	f023 0301 	bic.w	r3, r3, #1
 8009a24:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a36:	e841 2300 	strex	r3, r2, [r1]
 8009a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1e5      	bne.n	8009a0e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3308      	adds	r3, #8
 8009a48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4c:	e853 3f00 	ldrex	r3, [r3]
 8009a50:	623b      	str	r3, [r7, #32]
   return(result);
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a58:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3308      	adds	r3, #8
 8009a60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009a62:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a6a:	e841 2300 	strex	r3, r2, [r1]
 8009a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1e5      	bne.n	8009a42 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a78:	2220      	movs	r2, #32
 8009a7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d118      	bne.n	8009ab8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f023 0310 	bic.w	r3, r3, #16
 8009a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009aa4:	61fb      	str	r3, [r7, #28]
 8009aa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	69b9      	ldr	r1, [r7, #24]
 8009aaa:	69fa      	ldr	r2, [r7, #28]
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e6      	bne.n	8009a86 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aba:	2200      	movs	r2, #0
 8009abc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d107      	bne.n	8009ad6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ac8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009acc:	4619      	mov	r1, r3
 8009ace:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ad0:	f7f6 fecc 	bl	800086c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ad4:	e002      	b.n	8009adc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009ad6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ad8:	f7fe fdde 	bl	8008698 <HAL_UART_RxCpltCallback>
}
 8009adc:	bf00      	nop
 8009ade:	3770      	adds	r7, #112	@ 0x70
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2201      	movs	r2, #1
 8009af6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d109      	bne.n	8009b14 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b06:	085b      	lsrs	r3, r3, #1
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f7f6 fead 	bl	800086c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b12:	e002      	b.n	8009b1a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7fe fdc9 	bl	80086ac <HAL_UART_RxHalfCpltCallback>
}
 8009b1a:	bf00      	nop
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b086      	sub	sp, #24
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b36:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b4a:	2b80      	cmp	r3, #128	@ 0x80
 8009b4c:	d109      	bne.n	8009b62 <UART_DMAError+0x40>
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	2b21      	cmp	r3, #33	@ 0x21
 8009b52:	d106      	bne.n	8009b62 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009b5c:	6978      	ldr	r0, [r7, #20]
 8009b5e:	f7ff fe85 	bl	800986c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b6c:	2b40      	cmp	r3, #64	@ 0x40
 8009b6e:	d109      	bne.n	8009b84 <UART_DMAError+0x62>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b22      	cmp	r3, #34	@ 0x22
 8009b74:	d106      	bne.n	8009b84 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009b7e:	6978      	ldr	r0, [r7, #20]
 8009b80:	f7ff feb6 	bl	80098f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b8a:	f043 0210 	orr.w	r2, r3, #16
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b94:	6978      	ldr	r0, [r7, #20]
 8009b96:	f7fe fd93 	bl	80086c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b9a:	bf00      	nop
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f7fe fd7d 	bl	80086c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bc6:	bf00      	nop
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b088      	sub	sp, #32
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bea:	61fb      	str	r3, [r7, #28]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	61bb      	str	r3, [r7, #24]
 8009bf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6979      	ldr	r1, [r7, #20]
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	613b      	str	r3, [r7, #16]
   return(result);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e6      	bne.n	8009bd6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7fe fd34 	bl	8008684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c1c:	bf00      	nop
 8009c1e:	3720      	adds	r7, #32
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d101      	bne.n	8009c76 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c72:	2302      	movs	r3, #2
 8009c74:	e027      	b.n	8009cc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2224      	movs	r2, #36	@ 0x24
 8009c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f022 0201 	bic.w	r2, r2, #1
 8009c9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009ca4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d101      	bne.n	8009cea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	e02d      	b.n	8009d46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2224      	movs	r2, #36	@ 0x24
 8009cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f022 0201 	bic.w	r2, r2, #1
 8009d10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	430a      	orrs	r2, r1
 8009d24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f8a4 	bl	8009e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d101      	bne.n	8009d66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d62:	2302      	movs	r3, #2
 8009d64:	e02d      	b.n	8009dc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2224      	movs	r2, #36	@ 0x24
 8009d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f022 0201 	bic.w	r2, r2, #1
 8009d8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f866 	bl	8009e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b08c      	sub	sp, #48	@ 0x30
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	60f8      	str	r0, [r7, #12]
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dde:	2b20      	cmp	r3, #32
 8009de0:	d142      	bne.n	8009e68 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009de8:	88fb      	ldrh	r3, [r7, #6]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e03b      	b.n	8009e6a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2201      	movs	r2, #1
 8009df6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009dfe:	88fb      	ldrh	r3, [r7, #6]
 8009e00:	461a      	mov	r2, r3
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff fc8b 	bl	8009720 <UART_Start_Receive_DMA>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009e10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d124      	bne.n	8009e62 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d11d      	bne.n	8009e5c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2210      	movs	r2, #16
 8009e26:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	617b      	str	r3, [r7, #20]
   return(result);
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f043 0310 	orr.w	r3, r3, #16
 8009e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e48:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6a39      	ldr	r1, [r7, #32]
 8009e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e6      	bne.n	8009e28 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009e5a:	e002      	b.n	8009e62 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009e62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e66:	e000      	b.n	8009e6a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009e68:	2302      	movs	r3, #2
  }
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3730      	adds	r7, #48	@ 0x30
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d108      	bne.n	8009e96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e94:	e031      	b.n	8009efa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e96:	2310      	movs	r3, #16
 8009e98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e9a:	2310      	movs	r3, #16
 8009e9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	0e5b      	lsrs	r3, r3, #25
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	0f5b      	lsrs	r3, r3, #29
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f003 0307 	and.w	r3, r3, #7
 8009ebc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	7b3a      	ldrb	r2, [r7, #12]
 8009ec2:	4911      	ldr	r1, [pc, #68]	@ (8009f08 <UARTEx_SetNbDataToProcess+0x94>)
 8009ec4:	5c8a      	ldrb	r2, [r1, r2]
 8009ec6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009eca:	7b3a      	ldrb	r2, [r7, #12]
 8009ecc:	490f      	ldr	r1, [pc, #60]	@ (8009f0c <UARTEx_SetNbDataToProcess+0x98>)
 8009ece:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	7b7a      	ldrb	r2, [r7, #13]
 8009ee0:	4909      	ldr	r1, [pc, #36]	@ (8009f08 <UARTEx_SetNbDataToProcess+0x94>)
 8009ee2:	5c8a      	ldrb	r2, [r1, r2]
 8009ee4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ee8:	7b7a      	ldrb	r2, [r7, #13]
 8009eea:	4908      	ldr	r1, [pc, #32]	@ (8009f0c <UARTEx_SetNbDataToProcess+0x98>)
 8009eec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eee:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009efa:	bf00      	nop
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	08009fb8 	.word	0x08009fb8
 8009f0c:	08009fc0 	.word	0x08009fc0

08009f10 <memset>:
 8009f10:	4402      	add	r2, r0
 8009f12:	4603      	mov	r3, r0
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d100      	bne.n	8009f1a <memset+0xa>
 8009f18:	4770      	bx	lr
 8009f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f1e:	e7f9      	b.n	8009f14 <memset+0x4>

08009f20 <__libc_init_array>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	4d0d      	ldr	r5, [pc, #52]	@ (8009f58 <__libc_init_array+0x38>)
 8009f24:	4c0d      	ldr	r4, [pc, #52]	@ (8009f5c <__libc_init_array+0x3c>)
 8009f26:	1b64      	subs	r4, r4, r5
 8009f28:	10a4      	asrs	r4, r4, #2
 8009f2a:	2600      	movs	r6, #0
 8009f2c:	42a6      	cmp	r6, r4
 8009f2e:	d109      	bne.n	8009f44 <__libc_init_array+0x24>
 8009f30:	4d0b      	ldr	r5, [pc, #44]	@ (8009f60 <__libc_init_array+0x40>)
 8009f32:	4c0c      	ldr	r4, [pc, #48]	@ (8009f64 <__libc_init_array+0x44>)
 8009f34:	f000 f818 	bl	8009f68 <_init>
 8009f38:	1b64      	subs	r4, r4, r5
 8009f3a:	10a4      	asrs	r4, r4, #2
 8009f3c:	2600      	movs	r6, #0
 8009f3e:	42a6      	cmp	r6, r4
 8009f40:	d105      	bne.n	8009f4e <__libc_init_array+0x2e>
 8009f42:	bd70      	pop	{r4, r5, r6, pc}
 8009f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f48:	4798      	blx	r3
 8009f4a:	3601      	adds	r6, #1
 8009f4c:	e7ee      	b.n	8009f2c <__libc_init_array+0xc>
 8009f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f52:	4798      	blx	r3
 8009f54:	3601      	adds	r6, #1
 8009f56:	e7f2      	b.n	8009f3e <__libc_init_array+0x1e>
 8009f58:	08009fd0 	.word	0x08009fd0
 8009f5c:	08009fd0 	.word	0x08009fd0
 8009f60:	08009fd0 	.word	0x08009fd0
 8009f64:	08009fd4 	.word	0x08009fd4

08009f68 <_init>:
 8009f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6a:	bf00      	nop
 8009f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6e:	bc08      	pop	{r3}
 8009f70:	469e      	mov	lr, r3
 8009f72:	4770      	bx	lr

08009f74 <_fini>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	bf00      	nop
 8009f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f7a:	bc08      	pop	{r3}
 8009f7c:	469e      	mov	lr, r3
 8009f7e:	4770      	bx	lr
