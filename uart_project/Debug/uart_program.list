
uart_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca4  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08009f70  08009f70  0000af70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009fb8  08009fb8  0000afb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009fc0  08009fc0  0000afc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009fc4  08009fc4  0000afc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009fc8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dcc  24000010  08009fd8  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000ddc  08009fd8  0000bddc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017d8f  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e23  00000000  00000000  00022dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001290  00000000  00000000  00025bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e7e  00000000  00000000  00026e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033561  00000000  00000000  00027cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001905a  00000000  00000000  0005b25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cc13  00000000  00000000  000742b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c0ecc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004eac  00000000  00000000  001c0f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001c5dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009f58 	.word	0x08009f58

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08009f58 	.word	0x08009f58

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800032c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000330:	f000 b96a 	b.w	8000608 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	460c      	mov	r4, r1
 8000354:	2b00      	cmp	r3, #0
 8000356:	d14e      	bne.n	80003f6 <__udivmoddi4+0xaa>
 8000358:	4694      	mov	ip, r2
 800035a:	458c      	cmp	ip, r1
 800035c:	4686      	mov	lr, r0
 800035e:	fab2 f282 	clz	r2, r2
 8000362:	d962      	bls.n	800042a <__udivmoddi4+0xde>
 8000364:	b14a      	cbz	r2, 800037a <__udivmoddi4+0x2e>
 8000366:	f1c2 0320 	rsb	r3, r2, #32
 800036a:	4091      	lsls	r1, r2
 800036c:	fa20 f303 	lsr.w	r3, r0, r3
 8000370:	fa0c fc02 	lsl.w	ip, ip, r2
 8000374:	4319      	orrs	r1, r3
 8000376:	fa00 fe02 	lsl.w	lr, r0, r2
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f f68c 	uxth.w	r6, ip
 8000382:	fbb1 f4f7 	udiv	r4, r1, r7
 8000386:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038a:	fb07 1114 	mls	r1, r7, r4, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb04 f106 	mul.w	r1, r4, r6
 8000396:	4299      	cmp	r1, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x64>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003a2:	f080 8112 	bcs.w	80005ca <__udivmoddi4+0x27e>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 810f 	bls.w	80005ca <__udivmoddi4+0x27e>
 80003ac:	3c02      	subs	r4, #2
 80003ae:	4463      	add	r3, ip
 80003b0:	1a59      	subs	r1, r3, r1
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ba:	fb07 1110 	mls	r1, r7, r0, r1
 80003be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c2:	fb00 f606 	mul.w	r6, r0, r6
 80003c6:	429e      	cmp	r6, r3
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x94>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003d2:	f080 80fc 	bcs.w	80005ce <__udivmoddi4+0x282>
 80003d6:	429e      	cmp	r6, r3
 80003d8:	f240 80f9 	bls.w	80005ce <__udivmoddi4+0x282>
 80003dc:	4463      	add	r3, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	1b9b      	subs	r3, r3, r6
 80003e2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11d      	cbz	r5, 80003f2 <__udivmoddi4+0xa6>
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	2200      	movs	r2, #0
 80003ee:	e9c5 3200 	strd	r3, r2, [r5]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d905      	bls.n	8000406 <__udivmoddi4+0xba>
 80003fa:	b10d      	cbz	r5, 8000400 <__udivmoddi4+0xb4>
 80003fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	4608      	mov	r0, r1
 8000404:	e7f5      	b.n	80003f2 <__udivmoddi4+0xa6>
 8000406:	fab3 f183 	clz	r1, r3
 800040a:	2900      	cmp	r1, #0
 800040c:	d146      	bne.n	800049c <__udivmoddi4+0x150>
 800040e:	42a3      	cmp	r3, r4
 8000410:	d302      	bcc.n	8000418 <__udivmoddi4+0xcc>
 8000412:	4290      	cmp	r0, r2
 8000414:	f0c0 80f0 	bcc.w	80005f8 <__udivmoddi4+0x2ac>
 8000418:	1a86      	subs	r6, r0, r2
 800041a:	eb64 0303 	sbc.w	r3, r4, r3
 800041e:	2001      	movs	r0, #1
 8000420:	2d00      	cmp	r5, #0
 8000422:	d0e6      	beq.n	80003f2 <__udivmoddi4+0xa6>
 8000424:	e9c5 6300 	strd	r6, r3, [r5]
 8000428:	e7e3      	b.n	80003f2 <__udivmoddi4+0xa6>
 800042a:	2a00      	cmp	r2, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x204>
 8000430:	eba1 040c 	sub.w	r4, r1, ip
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	2101      	movs	r1, #1
 800043e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000442:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000446:	fb08 4416 	mls	r4, r8, r6, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb07 f006 	mul.w	r0, r7, r6
 8000452:	4298      	cmp	r0, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x11c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x11a>
 8000460:	4298      	cmp	r0, r3
 8000462:	f200 80cd 	bhi.w	8000600 <__udivmoddi4+0x2b4>
 8000466:	4626      	mov	r6, r4
 8000468:	1a1c      	subs	r4, r3, r0
 800046a:	fa1f f38e 	uxth.w	r3, lr
 800046e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000472:	fb08 4410 	mls	r4, r8, r0, r4
 8000476:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047a:	fb00 f707 	mul.w	r7, r0, r7
 800047e:	429f      	cmp	r7, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x148>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x146>
 800048c:	429f      	cmp	r7, r3
 800048e:	f200 80b0 	bhi.w	80005f2 <__udivmoddi4+0x2a6>
 8000492:	4620      	mov	r0, r4
 8000494:	1bdb      	subs	r3, r3, r7
 8000496:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049a:	e7a5      	b.n	80003e8 <__udivmoddi4+0x9c>
 800049c:	f1c1 0620 	rsb	r6, r1, #32
 80004a0:	408b      	lsls	r3, r1
 80004a2:	fa22 f706 	lsr.w	r7, r2, r6
 80004a6:	431f      	orrs	r7, r3
 80004a8:	fa20 fc06 	lsr.w	ip, r0, r6
 80004ac:	fa04 f301 	lsl.w	r3, r4, r1
 80004b0:	ea43 030c 	orr.w	r3, r3, ip
 80004b4:	40f4      	lsrs	r4, r6
 80004b6:	fa00 f801 	lsl.w	r8, r0, r1
 80004ba:	0c38      	lsrs	r0, r7, #16
 80004bc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c0:	fbb4 fef0 	udiv	lr, r4, r0
 80004c4:	fa1f fc87 	uxth.w	ip, r7
 80004c8:	fb00 441e 	mls	r4, r0, lr, r4
 80004cc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d0:	fb0e f90c 	mul.w	r9, lr, ip
 80004d4:	45a1      	cmp	r9, r4
 80004d6:	fa02 f201 	lsl.w	r2, r2, r1
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x1a6>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004e2:	f080 8084 	bcs.w	80005ee <__udivmoddi4+0x2a2>
 80004e6:	45a1      	cmp	r9, r4
 80004e8:	f240 8081 	bls.w	80005ee <__udivmoddi4+0x2a2>
 80004ec:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	eba4 0409 	sub.w	r4, r4, r9
 80004f6:	fa1f f983 	uxth.w	r9, r3
 80004fa:	fbb4 f3f0 	udiv	r3, r4, r0
 80004fe:	fb00 4413 	mls	r4, r0, r3, r4
 8000502:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000506:	fb03 fc0c 	mul.w	ip, r3, ip
 800050a:	45a4      	cmp	ip, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x1d2>
 800050e:	193c      	adds	r4, r7, r4
 8000510:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000514:	d267      	bcs.n	80005e6 <__udivmoddi4+0x29a>
 8000516:	45a4      	cmp	ip, r4
 8000518:	d965      	bls.n	80005e6 <__udivmoddi4+0x29a>
 800051a:	3b02      	subs	r3, #2
 800051c:	443c      	add	r4, r7
 800051e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000522:	fba0 9302 	umull	r9, r3, r0, r2
 8000526:	eba4 040c 	sub.w	r4, r4, ip
 800052a:	429c      	cmp	r4, r3
 800052c:	46ce      	mov	lr, r9
 800052e:	469c      	mov	ip, r3
 8000530:	d351      	bcc.n	80005d6 <__udivmoddi4+0x28a>
 8000532:	d04e      	beq.n	80005d2 <__udivmoddi4+0x286>
 8000534:	b155      	cbz	r5, 800054c <__udivmoddi4+0x200>
 8000536:	ebb8 030e 	subs.w	r3, r8, lr
 800053a:	eb64 040c 	sbc.w	r4, r4, ip
 800053e:	fa04 f606 	lsl.w	r6, r4, r6
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431e      	orrs	r6, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	e9c5 6400 	strd	r6, r4, [r5]
 800054c:	2100      	movs	r1, #0
 800054e:	e750      	b.n	80003f2 <__udivmoddi4+0xa6>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f103 	lsr.w	r1, r0, r3
 8000558:	fa0c fc02 	lsl.w	ip, ip, r2
 800055c:	fa24 f303 	lsr.w	r3, r4, r3
 8000560:	4094      	lsls	r4, r2
 8000562:	430c      	orrs	r4, r1
 8000564:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000568:	fa00 fe02 	lsl.w	lr, r0, r2
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	fbb3 f0f8 	udiv	r0, r3, r8
 8000574:	fb08 3110 	mls	r1, r8, r0, r3
 8000578:	0c23      	lsrs	r3, r4, #16
 800057a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800057e:	fb00 f107 	mul.w	r1, r0, r7
 8000582:	4299      	cmp	r1, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x24c>
 8000586:	eb1c 0303 	adds.w	r3, ip, r3
 800058a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800058e:	d22c      	bcs.n	80005ea <__udivmoddi4+0x29e>
 8000590:	4299      	cmp	r1, r3
 8000592:	d92a      	bls.n	80005ea <__udivmoddi4+0x29e>
 8000594:	3802      	subs	r0, #2
 8000596:	4463      	add	r3, ip
 8000598:	1a5b      	subs	r3, r3, r1
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a0:	fb08 3311 	mls	r3, r8, r1, r3
 80005a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005a8:	fb01 f307 	mul.w	r3, r1, r7
 80005ac:	42a3      	cmp	r3, r4
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x276>
 80005b0:	eb1c 0404 	adds.w	r4, ip, r4
 80005b4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005b8:	d213      	bcs.n	80005e2 <__udivmoddi4+0x296>
 80005ba:	42a3      	cmp	r3, r4
 80005bc:	d911      	bls.n	80005e2 <__udivmoddi4+0x296>
 80005be:	3902      	subs	r1, #2
 80005c0:	4464      	add	r4, ip
 80005c2:	1ae4      	subs	r4, r4, r3
 80005c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005c8:	e739      	b.n	800043e <__udivmoddi4+0xf2>
 80005ca:	4604      	mov	r4, r0
 80005cc:	e6f0      	b.n	80003b0 <__udivmoddi4+0x64>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e706      	b.n	80003e0 <__udivmoddi4+0x94>
 80005d2:	45c8      	cmp	r8, r9
 80005d4:	d2ae      	bcs.n	8000534 <__udivmoddi4+0x1e8>
 80005d6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005da:	eb63 0c07 	sbc.w	ip, r3, r7
 80005de:	3801      	subs	r0, #1
 80005e0:	e7a8      	b.n	8000534 <__udivmoddi4+0x1e8>
 80005e2:	4631      	mov	r1, r6
 80005e4:	e7ed      	b.n	80005c2 <__udivmoddi4+0x276>
 80005e6:	4603      	mov	r3, r0
 80005e8:	e799      	b.n	800051e <__udivmoddi4+0x1d2>
 80005ea:	4630      	mov	r0, r6
 80005ec:	e7d4      	b.n	8000598 <__udivmoddi4+0x24c>
 80005ee:	46d6      	mov	lr, sl
 80005f0:	e77f      	b.n	80004f2 <__udivmoddi4+0x1a6>
 80005f2:	4463      	add	r3, ip
 80005f4:	3802      	subs	r0, #2
 80005f6:	e74d      	b.n	8000494 <__udivmoddi4+0x148>
 80005f8:	4606      	mov	r6, r0
 80005fa:	4623      	mov	r3, r4
 80005fc:	4608      	mov	r0, r1
 80005fe:	e70f      	b.n	8000420 <__udivmoddi4+0xd4>
 8000600:	3e02      	subs	r6, #2
 8000602:	4463      	add	r3, ip
 8000604:	e730      	b.n	8000468 <__udivmoddi4+0x11c>
 8000606:	bf00      	nop

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <GetSector>:
// There are 2 BANKS available for H745, BANK 1 (0x0800 0000 - 0x080F FFFF) and BANK 2 (0x0810 0000 - 0x080F FFFF)
// Both of them have Sectors 0 to 7.
// We will define the sectors in normal way (like Defined below), and later the BANK will be taken care by the HAL

static uint32_t GetSector(uint32_t Address)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]

  /* BANK 1 */
  if((Address >= 0x08000000) && (Address < 0x08020000))
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800061e:	d306      	bcc.n	800062e <GetSector+0x22>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a2c      	ldr	r2, [pc, #176]	@ (80006d4 <GetSector+0xc8>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d802      	bhi.n	800062e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e04b      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x08020000) && (Address < 0x08040000))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a28      	ldr	r2, [pc, #160]	@ (80006d4 <GetSector+0xc8>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d906      	bls.n	8000644 <GetSector+0x38>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <GetSector+0xcc>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d802      	bhi.n	8000644 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800063e:	2301      	movs	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e040      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x08040000) && (Address < 0x08060000))
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <GetSector+0xcc>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d906      	bls.n	800065a <GetSector+0x4e>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a23      	ldr	r2, [pc, #140]	@ (80006dc <GetSector+0xd0>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d802      	bhi.n	800065a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000654:	2302      	movs	r3, #2
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	e035      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x08060000) && (Address < 0x08080000))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <GetSector+0xd0>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d906      	bls.n	8000670 <GetSector+0x64>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a1e      	ldr	r2, [pc, #120]	@ (80006e0 <GetSector+0xd4>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d802      	bhi.n	8000670 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800066a:	2303      	movs	r3, #3
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	e02a      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x08080000) && (Address < 0x080A0000))
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <GetSector+0xd4>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d906      	bls.n	8000686 <GetSector+0x7a>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a1a      	ldr	r2, [pc, #104]	@ (80006e4 <GetSector+0xd8>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d802      	bhi.n	8000686 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000680:	2304      	movs	r3, #4
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e01f      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x080A0000) && (Address < 0x080C0000))
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <GetSector+0xd8>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d906      	bls.n	800069c <GetSector+0x90>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a15      	ldr	r2, [pc, #84]	@ (80006e8 <GetSector+0xdc>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d802      	bhi.n	800069c <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000696:	2305      	movs	r3, #5
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e014      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x080C0000) && (Address < 0x080E0000))
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <GetSector+0xdc>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d906      	bls.n	80006b2 <GetSector+0xa6>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a11      	ldr	r2, [pc, #68]	@ (80006ec <GetSector+0xe0>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d802      	bhi.n	80006b2 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80006ac:	2306      	movs	r3, #6
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e009      	b.n	80006c6 <GetSector+0xba>
  }

  else if((Address >= 0x080E0000) && (Address < 0x08100000))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <GetSector+0xe0>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d905      	bls.n	80006c6 <GetSector+0xba>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80006c0:	d201      	bcs.n	80006c6 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80006c2:	2307      	movs	r3, #7
 80006c4:	60fb      	str	r3, [r7, #12]
  else if((Address >= 0x081E0000) && (Address < 0x08200000))
  {
    sector = FLASH_SECTOR_7;
  } */

  return sector;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	0801ffff 	.word	0x0801ffff
 80006d8:	0803ffff 	.word	0x0803ffff
 80006dc:	0805ffff 	.word	0x0805ffff
 80006e0:	0807ffff 	.word	0x0807ffff
 80006e4:	0809ffff 	.word	0x0809ffff
 80006e8:	080bffff 	.word	0x080bffff
 80006ec:	080dffff 	.word	0x080dffff

080006f0 <Flash_Write_Data>:
*          - 256 bits for STM32H72x/3X devices (8x 32bits words)
*
*/

uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *data, uint16_t numberofwords)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	4613      	mov	r3, r2
 80006fc:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24

	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8000702:	f003 ff61 	bl	80045c8 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f7ff ff80 	bl	800060c <GetSector>
 800070c:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 800071a:	69f8      	ldr	r0, [r7, #28]
 800071c:	f7ff ff76 	bl	800060c <GetSector>
 8000720:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000722:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <Flash_Write_Data+0xbc>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000728:	4b20      	ldr	r3, [pc, #128]	@ (80007ac <Flash_Write_Data+0xbc>)
 800072a:	2220      	movs	r2, #32
 800072c:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800072e:	4a1f      	ldr	r2, [pc, #124]	@ (80007ac <Flash_Write_Data+0xbc>)
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	6093      	str	r3, [r2, #8]

	  // The the proper BANK to erase the Sector
	  if (StartSectorAddress < 0x08100000)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800073a:	d202      	bcs.n	8000742 <Flash_Write_Data+0x52>
		  EraseInitStruct.Banks     = FLASH_BANK_1;
 800073c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ac <Flash_Write_Data+0xbc>)
 800073e:	2201      	movs	r2, #1
 8000740:	605a      	str	r2, [r3, #4]
//	  else EraseInitStruct.Banks    = FLASH_BANK_2;

	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8000742:	69ba      	ldr	r2, [r7, #24]
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	3301      	adds	r3, #1
 800074a:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <Flash_Write_Data+0xbc>)
 800074c:	60d3      	str	r3, [r2, #12]


	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4815      	ldr	r0, [pc, #84]	@ (80007ac <Flash_Write_Data+0xbc>)
 8000756:	f003 ffd3 	bl	8004700 <HAL_FLASHEx_Erase>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d01a      	beq.n	8000796 <Flash_Write_Data+0xa6>
	  {
		  return HAL_FLASH_GetError();
 8000760:	f003 ff6c 	bl	800463c <HAL_FLASH_GetError>
 8000764:	4603      	mov	r3, r0
 8000766:	e01d      	b.n	80007a4 <Flash_Write_Data+0xb4>
	  /* Program the user Flash area 8 WORDS at a time
	   * (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, StartSectorAddress, (uint32_t ) &data[sofar]) == HAL_OK)
 8000768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	68ba      	ldr	r2, [r7, #8]
 800076e:	4413      	add	r3, r2
 8000770:	461a      	mov	r2, r3
 8000772:	68f9      	ldr	r1, [r7, #12]
 8000774:	2001      	movs	r0, #1
 8000776:	f003 feb7 	bl	80044e8 <HAL_FLASH_Program>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d106      	bne.n	800078e <Flash_Write_Data+0x9e>
	     {
	    	 StartSectorAddress += 4*FLASHWORD;  //
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3320      	adds	r3, #32
 8000784:	60fb      	str	r3, [r7, #12]
	    	 sofar+=FLASHWORD;
 8000786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000788:	3308      	adds	r3, #8
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
 800078c:	e003      	b.n	8000796 <Flash_Write_Data+0xa6>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800078e:	f003 ff55 	bl	800463c <HAL_FLASH_GetError>
 8000792:	4603      	mov	r3, r0
 8000794:	e006      	b.n	80007a4 <Flash_Write_Data+0xb4>
	   while (sofar<numberofwords)
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800079a:	429a      	cmp	r2, r3
 800079c:	dbe4      	blt.n	8000768 <Flash_Write_Data+0x78>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800079e:	f003 ff35 	bl	800460c <HAL_FLASH_Lock>

	   return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3728      	adds	r7, #40	@ 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2400002c 	.word	0x2400002c

080007b0 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *data, uint16_t numberofwords)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	4613      	mov	r3, r2
 80007bc:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*data = *(__IO uint32_t *)StartSectorAddress;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3304      	adds	r3, #4
 80007ca:	60fb      	str	r3, [r7, #12]
		data++;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	3304      	adds	r3, #4
 80007d0:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	80fa      	strh	r2, [r7, #6]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d000      	beq.n	80007de <Flash_Read_Data+0x2e>
		*data = *(__IO uint32_t *)StartSectorAddress;
 80007dc:	e7ef      	b.n	80007be <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <Convert_To_Str>:

int Convert_To_Str (uint32_t *Data, char *Buf)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)Data)/4) + ((strlen((char *)Data) % 4) != 0)) *4;
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff fd88 	bl	800030c <strlen>
 80007fc:	4603      	mov	r3, r0
 80007fe:	089c      	lsrs	r4, r3, #2
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fd83 	bl	800030c <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4423      	add	r3, r4
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	e01b      	b.n	800085a <Convert_To_Str+0x6e>
	{
		Buf[i] = Data[i/4]>>(8*(i%4));
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2b00      	cmp	r3, #0
 8000826:	da00      	bge.n	800082a <Convert_To_Str+0x3e>
 8000828:	3303      	adds	r3, #3
 800082a:	109b      	asrs	r3, r3, #2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4259      	negs	r1, r3
 8000838:	f003 0303 	and.w	r3, r3, #3
 800083c:	f001 0103 	and.w	r1, r1, #3
 8000840:	bf58      	it	pl
 8000842:	424b      	negpl	r3, r1
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	fa22 f103 	lsr.w	r1, r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	4413      	add	r3, r2
 8000850:	b2ca      	uxtb	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3301      	adds	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	429a      	cmp	r2, r3
 8000860:	dbdf      	blt.n	8000822 <Convert_To_Str+0x36>
	}

	return numberofbytes;
 8000862:	68bb      	ldr	r3, [r7, #8]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}

0800086c <HAL_UARTEx_RxEventCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	807b      	strh	r3, [r7, #2]
	UNUSED(Size);

	/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
	 */
	temp = Size;
 8000878:	887b      	ldrh	r3, [r7, #2]
 800087a:	4a07      	ldr	r2, [pc, #28]	@ (8000898 <HAL_UARTEx_RxEventCallback+0x2c>)
 800087c:	6013      	str	r3, [r2, #0]

	if(Size != BUFFER_SIZE)
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000884:	d002      	beq.n	800088c <HAL_UARTEx_RxEventCallback+0x20>
		data_reception_complete = 1;
 8000886:	4b05      	ldr	r3, [pc, #20]	@ (800089c <HAL_UARTEx_RxEventCallback+0x30>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
//	else if(Size == BUFFER_SIZE)
//		buf_overflow = 1;
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	24000d60 	.word	0x24000d60
 800089c:	24000d4f 	.word	0x24000d4f

080008a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008a6:	f000 fe87 	bl	80015b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008aa:	f000 fa35 	bl	8000d18 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008ae:	f000 fb0f 	bl	8000ed0 <MX_GPIO_Init>
	MX_DMA_Init();
 80008b2:	f000 faed 	bl	8000e90 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80008b6:	f000 fa9f 	bl	8000df8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 80008ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008be:	f000 fed7 	bl	8001670 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"Start\n", 6, 100);
 80008c2:	2364      	movs	r3, #100	@ 0x64
 80008c4:	2206      	movs	r2, #6
 80008c6:	498d      	ldr	r1, [pc, #564]	@ (8000afc <main+0x25c>)
 80008c8:	488d      	ldr	r0, [pc, #564]	@ (8000b00 <main+0x260>)
 80008ca:	f007 fa8b 	bl	8007de4 <HAL_UART_Transmit>
	/* USER CODE BEGIN WHILE */



	// Set array to NULL
	memset(received_data, '\0', BUFFER_SIZE);
 80008ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008d2:	2100      	movs	r1, #0
 80008d4:	488b      	ldr	r0, [pc, #556]	@ (8000b04 <main+0x264>)
 80008d6:	f009 fb13 	bl	8009f00 <memset>

	// Trigger Receive DMA
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, received_data, BUFFER_SIZE);
 80008da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008de:	4989      	ldr	r1, [pc, #548]	@ (8000b04 <main+0x264>)
 80008e0:	4887      	ldr	r0, [pc, #540]	@ (8000b00 <main+0x260>)
 80008e2:	f009 fa6a 	bl	8009dba <HAL_UARTEx_ReceiveToIdle_DMA>
	// Disable half transfer complete IRQ
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80008e6:	4b88      	ldr	r3, [pc, #544]	@ (8000b08 <main+0x268>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a88      	ldr	r2, [pc, #544]	@ (8000b0c <main+0x26c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d04a      	beq.n	8000986 <main+0xe6>
 80008f0:	4b85      	ldr	r3, [pc, #532]	@ (8000b08 <main+0x268>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a86      	ldr	r2, [pc, #536]	@ (8000b10 <main+0x270>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d045      	beq.n	8000986 <main+0xe6>
 80008fa:	4b83      	ldr	r3, [pc, #524]	@ (8000b08 <main+0x268>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a85      	ldr	r2, [pc, #532]	@ (8000b14 <main+0x274>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d040      	beq.n	8000986 <main+0xe6>
 8000904:	4b80      	ldr	r3, [pc, #512]	@ (8000b08 <main+0x268>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a83      	ldr	r2, [pc, #524]	@ (8000b18 <main+0x278>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d03b      	beq.n	8000986 <main+0xe6>
 800090e:	4b7e      	ldr	r3, [pc, #504]	@ (8000b08 <main+0x268>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a82      	ldr	r2, [pc, #520]	@ (8000b1c <main+0x27c>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d036      	beq.n	8000986 <main+0xe6>
 8000918:	4b7b      	ldr	r3, [pc, #492]	@ (8000b08 <main+0x268>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a80      	ldr	r2, [pc, #512]	@ (8000b20 <main+0x280>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d031      	beq.n	8000986 <main+0xe6>
 8000922:	4b79      	ldr	r3, [pc, #484]	@ (8000b08 <main+0x268>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a7f      	ldr	r2, [pc, #508]	@ (8000b24 <main+0x284>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d02c      	beq.n	8000986 <main+0xe6>
 800092c:	4b76      	ldr	r3, [pc, #472]	@ (8000b08 <main+0x268>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a7d      	ldr	r2, [pc, #500]	@ (8000b28 <main+0x288>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d027      	beq.n	8000986 <main+0xe6>
 8000936:	4b74      	ldr	r3, [pc, #464]	@ (8000b08 <main+0x268>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a7c      	ldr	r2, [pc, #496]	@ (8000b2c <main+0x28c>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d022      	beq.n	8000986 <main+0xe6>
 8000940:	4b71      	ldr	r3, [pc, #452]	@ (8000b08 <main+0x268>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a7a      	ldr	r2, [pc, #488]	@ (8000b30 <main+0x290>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d01d      	beq.n	8000986 <main+0xe6>
 800094a:	4b6f      	ldr	r3, [pc, #444]	@ (8000b08 <main+0x268>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a79      	ldr	r2, [pc, #484]	@ (8000b34 <main+0x294>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d018      	beq.n	8000986 <main+0xe6>
 8000954:	4b6c      	ldr	r3, [pc, #432]	@ (8000b08 <main+0x268>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a77      	ldr	r2, [pc, #476]	@ (8000b38 <main+0x298>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d013      	beq.n	8000986 <main+0xe6>
 800095e:	4b6a      	ldr	r3, [pc, #424]	@ (8000b08 <main+0x268>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a76      	ldr	r2, [pc, #472]	@ (8000b3c <main+0x29c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d00e      	beq.n	8000986 <main+0xe6>
 8000968:	4b67      	ldr	r3, [pc, #412]	@ (8000b08 <main+0x268>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a74      	ldr	r2, [pc, #464]	@ (8000b40 <main+0x2a0>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d009      	beq.n	8000986 <main+0xe6>
 8000972:	4b65      	ldr	r3, [pc, #404]	@ (8000b08 <main+0x268>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a73      	ldr	r2, [pc, #460]	@ (8000b44 <main+0x2a4>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d004      	beq.n	8000986 <main+0xe6>
 800097c:	4b62      	ldr	r3, [pc, #392]	@ (8000b08 <main+0x268>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a71      	ldr	r2, [pc, #452]	@ (8000b48 <main+0x2a8>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d108      	bne.n	8000998 <main+0xf8>
 8000986:	4b60      	ldr	r3, [pc, #384]	@ (8000b08 <main+0x268>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b5e      	ldr	r3, [pc, #376]	@ (8000b08 <main+0x268>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0208 	bic.w	r2, r2, #8
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	e007      	b.n	80009a8 <main+0x108>
 8000998:	4b5b      	ldr	r3, [pc, #364]	@ (8000b08 <main+0x268>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4b5a      	ldr	r3, [pc, #360]	@ (8000b08 <main+0x268>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f022 0204 	bic.w	r2, r2, #4
 80009a6:	601a      	str	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		while((received_data[receive_buffer_index + previous_received_data_size] != '\0') && ((receive_buffer_index + previous_received_data_size) < BUFFER_SIZE))
 80009a8:	e045      	b.n	8000a36 <main+0x196>
		{
			// Save received uint8_t character in uint32_t variable
			flash_tx_data |= (uint32_t)received_data[receive_buffer_index + previous_received_data_size] << (8 * local_count);
 80009aa:	4b68      	ldr	r3, [pc, #416]	@ (8000b4c <main+0x2ac>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b68      	ldr	r3, [pc, #416]	@ (8000b50 <main+0x2b0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a53      	ldr	r2, [pc, #332]	@ (8000b04 <main+0x264>)
 80009b6:	5cd3      	ldrb	r3, [r2, r3]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b66      	ldr	r3, [pc, #408]	@ (8000b54 <main+0x2b4>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	409a      	lsls	r2, r3
 80009c2:	4b65      	ldr	r3, [pc, #404]	@ (8000b58 <main+0x2b8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	4a63      	ldr	r2, [pc, #396]	@ (8000b58 <main+0x2b8>)
 80009ca:	6013      	str	r3, [r2, #0]

			if(local_count == 3)
 80009cc:	4b61      	ldr	r3, [pc, #388]	@ (8000b54 <main+0x2b4>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d125      	bne.n	8000a20 <main+0x180>
			{
				local_count = 0;
 80009d4:	4b5f      	ldr	r3, [pc, #380]	@ (8000b54 <main+0x2b4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

				// Read data from FLASH
				Flash_Read_Data(0x08060000, flash_rx_data, total_number_of_words);
 80009da:	4b60      	ldr	r3, [pc, #384]	@ (8000b5c <main+0x2bc>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a60      	ldr	r2, [pc, #384]	@ (8000b60 <main+0x2c0>)
 80009e0:	8812      	ldrh	r2, [r2, #0]
 80009e2:	4619      	mov	r1, r3
 80009e4:	485f      	ldr	r0, [pc, #380]	@ (8000b64 <main+0x2c4>)
 80009e6:	f7ff fee3 	bl	80007b0 <Flash_Read_Data>

				*(flash_rx_data + total_number_of_words) = flash_tx_data;
 80009ea:	4b5c      	ldr	r3, [pc, #368]	@ (8000b5c <main+0x2bc>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b5c      	ldr	r3, [pc, #368]	@ (8000b60 <main+0x2c0>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	4a58      	ldr	r2, [pc, #352]	@ (8000b58 <main+0x2b8>)
 80009f8:	6812      	ldr	r2, [r2, #0]
 80009fa:	601a      	str	r2, [r3, #0]
				total_number_of_words++;
 80009fc:	4b58      	ldr	r3, [pc, #352]	@ (8000b60 <main+0x2c0>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b56      	ldr	r3, [pc, #344]	@ (8000b60 <main+0x2c0>)
 8000a06:	801a      	strh	r2, [r3, #0]

				// Write data into FLASH
				Flash_Write_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000a08:	4b54      	ldr	r3, [pc, #336]	@ (8000b5c <main+0x2bc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a54      	ldr	r2, [pc, #336]	@ (8000b60 <main+0x2c0>)
 8000a0e:	8812      	ldrh	r2, [r2, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	@ (8000b64 <main+0x2c4>)
 8000a14:	f7ff fe6c 	bl	80006f0 <Flash_Write_Data>



				flash_tx_data = 0;
 8000a18:	4b4f      	ldr	r3, [pc, #316]	@ (8000b58 <main+0x2b8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e005      	b.n	8000a2c <main+0x18c>
			}
			else
				local_count++;
 8000a20:	4b4c      	ldr	r3, [pc, #304]	@ (8000b54 <main+0x2b4>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b4a      	ldr	r3, [pc, #296]	@ (8000b54 <main+0x2b4>)
 8000a2a:	701a      	strb	r2, [r3, #0]

			// Increment receive_buffer_index
//			receive_buffer_index++;

			receive_buffer_index++;
 8000a2c:	4b47      	ldr	r3, [pc, #284]	@ (8000b4c <main+0x2ac>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a46      	ldr	r2, [pc, #280]	@ (8000b4c <main+0x2ac>)
 8000a34:	6013      	str	r3, [r2, #0]
		while((received_data[receive_buffer_index + previous_received_data_size] != '\0') && ((receive_buffer_index + previous_received_data_size) < BUFFER_SIZE))
 8000a36:	4b45      	ldr	r3, [pc, #276]	@ (8000b4c <main+0x2ac>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b45      	ldr	r3, [pc, #276]	@ (8000b50 <main+0x2b0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a30      	ldr	r2, [pc, #192]	@ (8000b04 <main+0x264>)
 8000a42:	5cd3      	ldrb	r3, [r2, r3]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d007      	beq.n	8000a58 <main+0x1b8>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <main+0x2ac>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b40      	ldr	r3, [pc, #256]	@ (8000b50 <main+0x2b0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000a56:	d3a8      	bcc.n	80009aa <main+0x10a>
//			main_buffer_index++;
		}

		if(flash_tx_data != 0)
 8000a58:	4b3f      	ldr	r3, [pc, #252]	@ (8000b58 <main+0x2b8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d021      	beq.n	8000aa4 <main+0x204>
		{
//			local_count = 0;

			// Read data from FLASH
			Flash_Read_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000a60:	4b3e      	ldr	r3, [pc, #248]	@ (8000b5c <main+0x2bc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a3e      	ldr	r2, [pc, #248]	@ (8000b60 <main+0x2c0>)
 8000a66:	8812      	ldrh	r2, [r2, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	483e      	ldr	r0, [pc, #248]	@ (8000b64 <main+0x2c4>)
 8000a6c:	f7ff fea0 	bl	80007b0 <Flash_Read_Data>

			*(flash_rx_data + total_number_of_words) = flash_tx_data;
 8000a70:	4b3a      	ldr	r3, [pc, #232]	@ (8000b5c <main+0x2bc>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b3a      	ldr	r3, [pc, #232]	@ (8000b60 <main+0x2c0>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a36      	ldr	r2, [pc, #216]	@ (8000b58 <main+0x2b8>)
 8000a7e:	6812      	ldr	r2, [r2, #0]
 8000a80:	601a      	str	r2, [r3, #0]
			total_number_of_words++;
 8000a82:	4b37      	ldr	r3, [pc, #220]	@ (8000b60 <main+0x2c0>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4b35      	ldr	r3, [pc, #212]	@ (8000b60 <main+0x2c0>)
 8000a8c:	801a      	strh	r2, [r3, #0]

			// Write data into FLASH
			Flash_Write_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000a8e:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <main+0x2bc>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a33      	ldr	r2, [pc, #204]	@ (8000b60 <main+0x2c0>)
 8000a94:	8812      	ldrh	r2, [r2, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	4832      	ldr	r0, [pc, #200]	@ (8000b64 <main+0x2c4>)
 8000a9a:	f7ff fe29 	bl	80006f0 <Flash_Write_Data>


			flash_tx_data = 0;
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b58 <main+0x2b8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
		}

		if(data_reception_complete)
 8000aa4:	4b30      	ldr	r3, [pc, #192]	@ (8000b68 <main+0x2c8>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 80d5 	beq.w	8000c5a <main+0x3ba>
		{
			data_reception_complete = 0;
 8000ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b68 <main+0x2c8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]

			data_copying_complete = 1;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <main+0x2cc>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
			received_data_length = receive_buffer_index;
 8000abc:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <main+0x2ac>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8000b70 <main+0x2d0>)
 8000ac2:	6013      	str	r3, [r2, #0]

			receive_buffer_index = 0;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <main+0x2ac>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
			main_buffer_index = 0;
 8000aca:	4b2a      	ldr	r3, [pc, #168]	@ (8000b74 <main+0x2d4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]

			memset(received_data, '\0', BUFFER_SIZE);
 8000ad0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <main+0x264>)
 8000ad8:	f009 fa12 	bl	8009f00 <memset>
//			memset(buffer, '\0', BUFFER_SIZE);

			previous_received_data_size = temp;
 8000adc:	4b26      	ldr	r3, [pc, #152]	@ (8000b78 <main+0x2d8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <main+0x2b0>)
 8000ae2:	6013      	str	r3, [r2, #0]
			if(previous_received_data_size > BUFFER_SIZE)
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <main+0x2b0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000aec:	d946      	bls.n	8000b7c <main+0x2dc>
				previous_received_data_size = previous_received_data_size - BUFFER_SIZE;
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <main+0x2b0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000af6:	4a16      	ldr	r2, [pc, #88]	@ (8000b50 <main+0x2b0>)
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e047      	b.n	8000b8c <main+0x2ec>
 8000afc:	08009f70 	.word	0x08009f70
 8000b00:	24000040 	.word	0x24000040
 8000b04:	2400014c 	.word	0x2400014c
 8000b08:	240000d4 	.word	0x240000d4
 8000b0c:	40020010 	.word	0x40020010
 8000b10:	40020028 	.word	0x40020028
 8000b14:	40020040 	.word	0x40020040
 8000b18:	40020058 	.word	0x40020058
 8000b1c:	40020070 	.word	0x40020070
 8000b20:	40020088 	.word	0x40020088
 8000b24:	400200a0 	.word	0x400200a0
 8000b28:	400200b8 	.word	0x400200b8
 8000b2c:	40020410 	.word	0x40020410
 8000b30:	40020428 	.word	0x40020428
 8000b34:	40020440 	.word	0x40020440
 8000b38:	40020458 	.word	0x40020458
 8000b3c:	40020470 	.word	0x40020470
 8000b40:	40020488 	.word	0x40020488
 8000b44:	400204a0 	.word	0x400204a0
 8000b48:	400204b8 	.word	0x400204b8
 8000b4c:	24000d54 	.word	0x24000d54
 8000b50:	24000d5c 	.word	0x24000d5c
 8000b54:	24000d4e 	.word	0x24000d4e
 8000b58:	24000d68 	.word	0x24000d68
 8000b5c:	24000d6c 	.word	0x24000d6c
 8000b60:	24000d4c 	.word	0x24000d4c
 8000b64:	08060000 	.word	0x08060000
 8000b68:	24000d4f 	.word	0x24000d4f
 8000b6c:	24000d50 	.word	0x24000d50
 8000b70:	24000d64 	.word	0x24000d64
 8000b74:	24000d58 	.word	0x24000d58
 8000b78:	24000d60 	.word	0x24000d60
			else if(previous_received_data_size == BUFFER_SIZE)
 8000b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8000cb4 <main+0x414>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b84:	d102      	bne.n	8000b8c <main+0x2ec>
				previous_received_data_size = 0;
 8000b86:	4b4b      	ldr	r3, [pc, #300]	@ (8000cb4 <main+0x414>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]

			// Trigger Receive DMA
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, &received_data[0], BUFFER_SIZE);
 8000b8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b90:	4949      	ldr	r1, [pc, #292]	@ (8000cb8 <main+0x418>)
 8000b92:	484a      	ldr	r0, [pc, #296]	@ (8000cbc <main+0x41c>)
 8000b94:	f009 f911 	bl	8009dba <HAL_UARTEx_ReceiveToIdle_DMA>
			// Disable half transfer complete IRQ
			__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000b98:	4b49      	ldr	r3, [pc, #292]	@ (8000cc0 <main+0x420>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a49      	ldr	r2, [pc, #292]	@ (8000cc4 <main+0x424>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d04a      	beq.n	8000c38 <main+0x398>
 8000ba2:	4b47      	ldr	r3, [pc, #284]	@ (8000cc0 <main+0x420>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a48      	ldr	r2, [pc, #288]	@ (8000cc8 <main+0x428>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d045      	beq.n	8000c38 <main+0x398>
 8000bac:	4b44      	ldr	r3, [pc, #272]	@ (8000cc0 <main+0x420>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a46      	ldr	r2, [pc, #280]	@ (8000ccc <main+0x42c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d040      	beq.n	8000c38 <main+0x398>
 8000bb6:	4b42      	ldr	r3, [pc, #264]	@ (8000cc0 <main+0x420>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a45      	ldr	r2, [pc, #276]	@ (8000cd0 <main+0x430>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d03b      	beq.n	8000c38 <main+0x398>
 8000bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8000cc0 <main+0x420>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a43      	ldr	r2, [pc, #268]	@ (8000cd4 <main+0x434>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d036      	beq.n	8000c38 <main+0x398>
 8000bca:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc0 <main+0x420>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a42      	ldr	r2, [pc, #264]	@ (8000cd8 <main+0x438>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d031      	beq.n	8000c38 <main+0x398>
 8000bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc0 <main+0x420>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a40      	ldr	r2, [pc, #256]	@ (8000cdc <main+0x43c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d02c      	beq.n	8000c38 <main+0x398>
 8000bde:	4b38      	ldr	r3, [pc, #224]	@ (8000cc0 <main+0x420>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ce0 <main+0x440>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d027      	beq.n	8000c38 <main+0x398>
 8000be8:	4b35      	ldr	r3, [pc, #212]	@ (8000cc0 <main+0x420>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a3d      	ldr	r2, [pc, #244]	@ (8000ce4 <main+0x444>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d022      	beq.n	8000c38 <main+0x398>
 8000bf2:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <main+0x420>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a3c      	ldr	r2, [pc, #240]	@ (8000ce8 <main+0x448>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d01d      	beq.n	8000c38 <main+0x398>
 8000bfc:	4b30      	ldr	r3, [pc, #192]	@ (8000cc0 <main+0x420>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a3a      	ldr	r2, [pc, #232]	@ (8000cec <main+0x44c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d018      	beq.n	8000c38 <main+0x398>
 8000c06:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc0 <main+0x420>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a39      	ldr	r2, [pc, #228]	@ (8000cf0 <main+0x450>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d013      	beq.n	8000c38 <main+0x398>
 8000c10:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc0 <main+0x420>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a37      	ldr	r2, [pc, #220]	@ (8000cf4 <main+0x454>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d00e      	beq.n	8000c38 <main+0x398>
 8000c1a:	4b29      	ldr	r3, [pc, #164]	@ (8000cc0 <main+0x420>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a36      	ldr	r2, [pc, #216]	@ (8000cf8 <main+0x458>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d009      	beq.n	8000c38 <main+0x398>
 8000c24:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <main+0x420>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a34      	ldr	r2, [pc, #208]	@ (8000cfc <main+0x45c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d004      	beq.n	8000c38 <main+0x398>
 8000c2e:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <main+0x420>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a33      	ldr	r2, [pc, #204]	@ (8000d00 <main+0x460>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d108      	bne.n	8000c4a <main+0x3aa>
 8000c38:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <main+0x420>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <main+0x420>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0208 	bic.w	r2, r2, #8
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	e007      	b.n	8000c5a <main+0x3ba>
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <main+0x420>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <main+0x420>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0204 	bic.w	r2, r2, #4
 8000c58:	601a      	str	r2, [r3, #0]
		}

		if(data_copying_complete)
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d04 <main+0x464>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d024      	beq.n	8000cac <main+0x40c>
		{
//			uint32_t i = 0;
			int numberofbytes = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]

			data_copying_complete = 0;
 8000c66:	4b27      	ldr	r3, [pc, #156]	@ (8000d04 <main+0x464>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]

			// Read data from FLASH
			Flash_Read_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000c6c:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <main+0x468>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a26      	ldr	r2, [pc, #152]	@ (8000d0c <main+0x46c>)
 8000c72:	8812      	ldrh	r2, [r2, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	4826      	ldr	r0, [pc, #152]	@ (8000d10 <main+0x470>)
 8000c78:	f7ff fd9a 	bl	80007b0 <Flash_Read_Data>

			numberofbytes = Convert_To_Str(flash_rx_data, &tx_data[0]);
 8000c7c:	4b22      	ldr	r3, [pc, #136]	@ (8000d08 <main+0x468>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4924      	ldr	r1, [pc, #144]	@ (8000d14 <main+0x474>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fdb2 	bl	80007ec <Convert_To_Str>
 8000c88:	6078      	str	r0, [r7, #4]

			HAL_UART_Transmit(&huart2, (uint8_t *)tx_data, numberofbytes, 30000);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c92:	4920      	ldr	r1, [pc, #128]	@ (8000d14 <main+0x474>)
 8000c94:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <main+0x41c>)
 8000c96:	f007 f8a5 	bl	8007de4 <HAL_UART_Transmit>

			memset(tx_data, '\0', STRING_BUFFER_SIZE);
 8000c9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	481c      	ldr	r0, [pc, #112]	@ (8000d14 <main+0x474>)
 8000ca2:	f009 f92d 	bl	8009f00 <memset>

			total_number_of_words = 0;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <main+0x46c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	801a      	strh	r2, [r3, #0]
		}

		HAL_Delay(1);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 fcdf 	bl	8001670 <HAL_Delay>
		while((received_data[receive_buffer_index + previous_received_data_size] != '\0') && ((receive_buffer_index + previous_received_data_size) < BUFFER_SIZE))
 8000cb2:	e6c0      	b.n	8000a36 <main+0x196>
 8000cb4:	24000d5c 	.word	0x24000d5c
 8000cb8:	2400014c 	.word	0x2400014c
 8000cbc:	24000040 	.word	0x24000040
 8000cc0:	240000d4 	.word	0x240000d4
 8000cc4:	40020010 	.word	0x40020010
 8000cc8:	40020028 	.word	0x40020028
 8000ccc:	40020040 	.word	0x40020040
 8000cd0:	40020058 	.word	0x40020058
 8000cd4:	40020070 	.word	0x40020070
 8000cd8:	40020088 	.word	0x40020088
 8000cdc:	400200a0 	.word	0x400200a0
 8000ce0:	400200b8 	.word	0x400200b8
 8000ce4:	40020410 	.word	0x40020410
 8000ce8:	40020428 	.word	0x40020428
 8000cec:	40020440 	.word	0x40020440
 8000cf0:	40020458 	.word	0x40020458
 8000cf4:	40020470 	.word	0x40020470
 8000cf8:	40020488 	.word	0x40020488
 8000cfc:	400204a0 	.word	0x400204a0
 8000d00:	400204b8 	.word	0x400204b8
 8000d04:	24000d50 	.word	0x24000d50
 8000d08:	24000d6c 	.word	0x24000d6c
 8000d0c:	24000d4c 	.word	0x24000d4c
 8000d10:	08060000 	.word	0x08060000
 8000d14:	2400094c 	.word	0x2400094c

08000d18 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09c      	sub	sp, #112	@ 0x70
 8000d1c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d22:	224c      	movs	r2, #76	@ 0x4c
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f009 f8ea 	bl	8009f00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2220      	movs	r2, #32
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f009 f8e4 	bl	8009f00 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f003 ff77 	bl	8004c2c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <SystemClock_Config+0xdc>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000df4 <SystemClock_Config+0xdc>)
 8000d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <SystemClock_Config+0xdc>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d5e:	bf00      	nop
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <SystemClock_Config+0xdc>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d6c:	d1f8      	bne.n	8000d60 <SystemClock_Config+0x48>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8000d76:	2340      	movs	r3, #64	@ 0x40
 8000d78:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d82:	2304      	movs	r3, #4
 8000d84:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000d86:	230c      	movs	r3, #12
 8000d88:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d96:	230c      	movs	r3, #12
 8000d98:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 ff7a 	bl	8004ca0 <HAL_RCC_OscConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000db2:	f000 f9e1 	bl	8001178 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	233f      	movs	r3, #63	@ 0x3f
 8000db8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dc6:	2340      	movs	r3, #64	@ 0x40
 8000dc8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dca:	2340      	movs	r3, #64	@ 0x40
 8000dcc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dd2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dd4:	2340      	movs	r3, #64	@ 0x40
 8000dd6:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 fb39 	bl	8005454 <HAL_RCC_ClockConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000de8:	f000 f9c6 	bl	8001178 <Error_Handler>
	}
}
 8000dec:	bf00      	nop
 8000dee:	3770      	adds	r7, #112	@ 0x70
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	58024800 	.word	0x58024800

08000df8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000dfe:	4a23      	ldr	r2, [pc, #140]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e00:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 2400;
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e04:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000e08:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e40:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e42:	f006 ff7f 	bl	8007d44 <HAL_UART_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8000e4c:	f000 f994 	bl	8001178 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e50:	2100      	movs	r1, #0
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e54:	f008 ff35 	bl	8009cc2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8000e5e:	f000 f98b 	bl	8001178 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e66:	f008 ff6a 	bl	8009d3e <HAL_UARTEx_SetRxFifoThreshold>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8000e70:	f000 f982 	bl	8001178 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	@ (8000e88 <MX_USART2_UART_Init+0x90>)
 8000e76:	f008 feeb 	bl	8009c50 <HAL_UARTEx_DisableFifoMode>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8000e80:	f000 f97a 	bl	8001178 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	24000040 	.word	0x24000040
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <MX_DMA_Init+0x3c>)
 8000e98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ecc <MX_DMA_Init+0x3c>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_DMA_Init+0x3c>)
 8000ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	200b      	movs	r0, #11
 8000eba:	f000 fcb5 	bl	8001828 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ebe:	200b      	movs	r0, #11
 8000ec0:	f000 fccc 	bl	800185c <HAL_NVIC_EnableIRQ>

}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	58024400 	.word	0x58024400

08000ed0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	@ 0x30
 8000ed4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	4b94      	ldr	r3, [pc, #592]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eec:	4a92      	ldr	r2, [pc, #584]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef6:	4b90      	ldr	r3, [pc, #576]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f04:	4b8c      	ldr	r3, [pc, #560]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	4a8b      	ldr	r2, [pc, #556]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f14:	4b88      	ldr	r3, [pc, #544]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b85      	ldr	r3, [pc, #532]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	4a83      	ldr	r2, [pc, #524]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f32:	4b81      	ldr	r3, [pc, #516]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	4b7d      	ldr	r3, [pc, #500]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f46:	4a7c      	ldr	r2, [pc, #496]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f50:	4b79      	ldr	r3, [pc, #484]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5e:	4b76      	ldr	r3, [pc, #472]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f64:	4a74      	ldr	r2, [pc, #464]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6e:	4b72      	ldr	r3, [pc, #456]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7c:	4b6e      	ldr	r3, [pc, #440]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	4a6d      	ldr	r2, [pc, #436]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9a:	4b67      	ldr	r3, [pc, #412]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa0:	4a65      	ldr	r2, [pc, #404]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000faa:	4b63      	ldr	r3, [pc, #396]	@ (8001138 <MX_GPIO_Init+0x268>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000fbe:	485f      	ldr	r0, [pc, #380]	@ (800113c <MX_GPIO_Init+0x26c>)
 8000fc0:	f003 fe1a 	bl	8004bf8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fca:	485d      	ldr	r0, [pc, #372]	@ (8001140 <MX_GPIO_Init+0x270>)
 8000fcc:	f003 fe14 	bl	8004bf8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	485b      	ldr	r0, [pc, #364]	@ (8001144 <MX_GPIO_Init+0x274>)
 8000fd6:	f003 fe0f 	bl	8004bf8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000fda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fde:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4856      	ldr	r0, [pc, #344]	@ (8001148 <MX_GPIO_Init+0x278>)
 8000ff0:	f003 fc5a 	bl	80048a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ff4:	2332      	movs	r3, #50	@ 0x32
 8000ff6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001004:	230b      	movs	r3, #11
 8001006:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	484e      	ldr	r0, [pc, #312]	@ (8001148 <MX_GPIO_Init+0x278>)
 8001010:	f003 fc4a 	bl	80048a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8001014:	2382      	movs	r3, #130	@ 0x82
 8001016:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001024:	230b      	movs	r3, #11
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	4847      	ldr	r0, [pc, #284]	@ (800114c <MX_GPIO_Init+0x27c>)
 8001030:	f003 fc3a 	bl	80048a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001034:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001038:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	483b      	ldr	r0, [pc, #236]	@ (800113c <MX_GPIO_Init+0x26c>)
 800104e:	f003 fc2b 	bl	80048a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001052:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001056:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001064:	230b      	movs	r3, #11
 8001066:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4833      	ldr	r0, [pc, #204]	@ (800113c <MX_GPIO_Init+0x26c>)
 8001070:	f003 fc1a 	bl	80048a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
	GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001074:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001078:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001086:	2307      	movs	r3, #7
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	482b      	ldr	r0, [pc, #172]	@ (8001140 <MX_GPIO_Init+0x270>)
 8001092:	f003 fc09 	bl	80048a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	4824      	ldr	r0, [pc, #144]	@ (8001140 <MX_GPIO_Init+0x270>)
 80010b0:	f003 fbfa 	bl	80048a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4821      	ldr	r0, [pc, #132]	@ (8001150 <MX_GPIO_Init+0x280>)
 80010ca:	f003 fbed 	bl	80048a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_ID_Pin */
	GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80010ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80010e0:	230a      	movs	r3, #10
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	4818      	ldr	r0, [pc, #96]	@ (800114c <MX_GPIO_Init+0x27c>)
 80010ec:	f003 fbdc 	bl	80048a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010f0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001102:	230b      	movs	r3, #11
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4810      	ldr	r0, [pc, #64]	@ (8001150 <MX_GPIO_Init+0x280>)
 800110e:	f003 fbcb 	bl	80048a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_YELLOW_Pin */
	GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001112:	2302      	movs	r3, #2
 8001114:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_GPIO_Init+0x274>)
 800112a:	f003 fbbd 	bl	80048a8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	@ 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	58024400 	.word	0x58024400
 800113c:	58020400 	.word	0x58020400
 8001140:	58020c00 	.word	0x58020c00
 8001144:	58021000 	.word	0x58021000
 8001148:	58020800 	.word	0x58020800
 800114c:	58020000 	.word	0x58020000
 8001150:	58021800 	.word	0x58021800

08001154 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001166:	f000 fa63 	bl	8001630 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40000800 	.word	0x40000800

08001178 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <Error_Handler+0x8>

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_MspInit+0x30>)
 800118c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001190:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_MspInit+0x30>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_MspInit+0x30>)
 800119c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	58024400 	.word	0x58024400

080011b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0b8      	sub	sp, #224	@ 0xe0
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	22b8      	movs	r2, #184	@ 0xb8
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f008 fe91 	bl	8009f00 <memset>
  if(huart->Instance==USART2)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a42      	ldr	r2, [pc, #264]	@ (80012ec <HAL_UART_MspInit+0x134>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d17c      	bne.n	80012e2 <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011e8:	f04f 0202 	mov.w	r2, #2
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 fcf6 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800120a:	f7ff ffb5 	bl	8001178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800120e:	4b38      	ldr	r3, [pc, #224]	@ (80012f0 <HAL_UART_MspInit+0x138>)
 8001210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001214:	4a36      	ldr	r2, [pc, #216]	@ (80012f0 <HAL_UART_MspInit+0x138>)
 8001216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800121e:	4b34      	ldr	r3, [pc, #208]	@ (80012f0 <HAL_UART_MspInit+0x138>)
 8001220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800122c:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <HAL_UART_MspInit+0x138>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001232:	4a2f      	ldr	r2, [pc, #188]	@ (80012f0 <HAL_UART_MspInit+0x138>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123c:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <HAL_UART_MspInit+0x138>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800124a:	2360      	movs	r3, #96	@ 0x60
 800124c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001262:	2307      	movs	r3, #7
 8001264:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001268:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800126c:	4619      	mov	r1, r3
 800126e:	4821      	ldr	r0, [pc, #132]	@ (80012f4 <HAL_UART_MspInit+0x13c>)
 8001270:	f003 fb1a 	bl	80048a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8001274:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 8001276:	4a21      	ldr	r2, [pc, #132]	@ (80012fc <HAL_UART_MspInit+0x144>)
 8001278:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800127a:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 800127c:	222b      	movs	r2, #43	@ 0x2b
 800127e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 800128e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001292:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 80012a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ae:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012b4:	4810      	ldr	r0, [pc, #64]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 80012b6:	f000 fadf 	bl	8001878 <HAL_DMA_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80012c0:	f7ff ff5a 	bl	8001178 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a0c      	ldr	r2, [pc, #48]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 80012c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80012cc:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <HAL_UART_MspInit+0x140>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2026      	movs	r0, #38	@ 0x26
 80012d8:	f000 faa6 	bl	8001828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012dc:	2026      	movs	r0, #38	@ 0x26
 80012de:	f000 fabd 	bl	800185c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80012e2:	bf00      	nop
 80012e4:	37e0      	adds	r7, #224	@ 0xe0
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40004400 	.word	0x40004400
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58020c00 	.word	0x58020c00
 80012f8:	240000d4 	.word	0x240000d4
 80012fc:	40020010 	.word	0x40020010

08001300 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b090      	sub	sp, #64	@ 0x40
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	d827      	bhi.n	800135e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800130e:	2200      	movs	r2, #0
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	201e      	movs	r0, #30
 8001314:	f000 fa88 	bl	8001828 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001318:	201e      	movs	r0, #30
 800131a:	f000 fa9f 	bl	800185c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800131e:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <HAL_InitTick+0xc4>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001324:	4b28      	ldr	r3, [pc, #160]	@ (80013c8 <HAL_InitTick+0xc8>)
 8001326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800132a:	4a27      	ldr	r2, [pc, #156]	@ (80013c8 <HAL_InitTick+0xc8>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001334:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <HAL_InitTick+0xc8>)
 8001336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001342:	f107 0210 	add.w	r2, r7, #16
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f004 fc0d 	bl	8005b6c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001354:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001358:	2b00      	cmp	r3, #0
 800135a:	d106      	bne.n	800136a <HAL_InitTick+0x6a>
 800135c:	e001      	b.n	8001362 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e02b      	b.n	80013ba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001362:	f004 fbd7 	bl	8005b14 <HAL_RCC_GetPCLK1Freq>
 8001366:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001368:	e004      	b.n	8001374 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800136a:	f004 fbd3 	bl	8005b14 <HAL_RCC_GetPCLK1Freq>
 800136e:	4603      	mov	r3, r0
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001376:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <HAL_InitTick+0xcc>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	3b01      	subs	r3, #1
 8001380:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_InitTick+0xd0>)
 8001384:	4a13      	ldr	r2, [pc, #76]	@ (80013d4 <HAL_InitTick+0xd4>)
 8001386:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_InitTick+0xd0>)
 800138a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800138e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001390:	4a0f      	ldr	r2, [pc, #60]	@ (80013d0 <HAL_InitTick+0xd0>)
 8001392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001394:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_InitTick+0xd0>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <HAL_InitTick+0xd0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80013a2:	480b      	ldr	r0, [pc, #44]	@ (80013d0 <HAL_InitTick+0xd0>)
 80013a4:	f006 f9e6 	bl	8007774 <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d104      	bne.n	80013b8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80013ae:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <HAL_InitTick+0xd0>)
 80013b0:	f006 fa42 	bl	8007838 <HAL_TIM_Base_Start_IT>
 80013b4:	4603      	mov	r3, r0
 80013b6:	e000      	b.n	80013ba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3740      	adds	r7, #64	@ 0x40
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	24000008 	.word	0x24000008
 80013c8:	58024400 	.word	0x58024400
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	24000d70 	.word	0x24000d70
 80013d4:	40000800 	.word	0x40000800

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <NMI_Handler+0x4>

080013e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <MemManage_Handler+0x4>

080013f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <UsageFault_Handler+0x4>

08001400 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <DMA1_Stream0_IRQHandler+0x10>)
 800143e:	f001 fd41 	bl	8002ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	240000d4 	.word	0x240000d4

0800144c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <TIM4_IRQHandler+0x10>)
 8001452:	f006 fa77 	bl	8007944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24000d70 	.word	0x24000d70

08001460 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <USART2_IRQHandler+0x10>)
 8001466:	f006 fd4b 	bl	8007f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24000040 	.word	0x24000040

08001474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001478:	4b32      	ldr	r3, [pc, #200]	@ (8001544 <SystemInit+0xd0>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147e:	4a31      	ldr	r2, [pc, #196]	@ (8001544 <SystemInit+0xd0>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001488:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <SystemInit+0xd4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 030f 	and.w	r3, r3, #15
 8001490:	2b06      	cmp	r3, #6
 8001492:	d807      	bhi.n	80014a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001494:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <SystemInit+0xd4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 030f 	bic.w	r3, r3, #15
 800149c:	4a2a      	ldr	r2, [pc, #168]	@ (8001548 <SystemInit+0xd4>)
 800149e:	f043 0307 	orr.w	r3, r3, #7
 80014a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014a4:	4b29      	ldr	r3, [pc, #164]	@ (800154c <SystemInit+0xd8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a28      	ldr	r2, [pc, #160]	@ (800154c <SystemInit+0xd8>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014b0:	4b26      	ldr	r3, [pc, #152]	@ (800154c <SystemInit+0xd8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014b6:	4b25      	ldr	r3, [pc, #148]	@ (800154c <SystemInit+0xd8>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4924      	ldr	r1, [pc, #144]	@ (800154c <SystemInit+0xd8>)
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <SystemInit+0xdc>)
 80014be:	4013      	ands	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <SystemInit+0xd4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <SystemInit+0xd4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 030f 	bic.w	r3, r3, #15
 80014d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <SystemInit+0xd4>)
 80014d8:	f043 0307 	orr.w	r3, r3, #7
 80014dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014de:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <SystemInit+0xd8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <SystemInit+0xd8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <SystemInit+0xd8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <SystemInit+0xd8>)
 80014f2:	4a18      	ldr	r2, [pc, #96]	@ (8001554 <SystemInit+0xe0>)
 80014f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <SystemInit+0xd8>)
 80014f8:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <SystemInit+0xe4>)
 80014fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <SystemInit+0xd8>)
 80014fe:	4a17      	ldr	r2, [pc, #92]	@ (800155c <SystemInit+0xe8>)
 8001500:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <SystemInit+0xd8>)
 8001504:	2200      	movs	r2, #0
 8001506:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <SystemInit+0xd8>)
 800150a:	4a14      	ldr	r2, [pc, #80]	@ (800155c <SystemInit+0xe8>)
 800150c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <SystemInit+0xd8>)
 8001510:	2200      	movs	r2, #0
 8001512:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001514:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <SystemInit+0xd8>)
 8001516:	4a11      	ldr	r2, [pc, #68]	@ (800155c <SystemInit+0xe8>)
 8001518:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <SystemInit+0xd8>)
 800151c:	2200      	movs	r2, #0
 800151e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001520:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <SystemInit+0xd8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a09      	ldr	r2, [pc, #36]	@ (800154c <SystemInit+0xd8>)
 8001526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800152a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <SystemInit+0xd8>)
 800152e:	2200      	movs	r2, #0
 8001530:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <SystemInit+0xec>)
 8001534:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001538:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	52002000 	.word	0x52002000
 800154c:	58024400 	.word	0x58024400
 8001550:	eaf6ed7f 	.word	0xeaf6ed7f
 8001554:	02020200 	.word	0x02020200
 8001558:	01ff0000 	.word	0x01ff0000
 800155c:	01010280 	.word	0x01010280
 8001560:	52004000 	.word	0x52004000

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800159c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001568:	f7ff ff84 	bl	8001474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156e:	490d      	ldr	r1, [pc, #52]	@ (80015a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001584:	4c0a      	ldr	r4, [pc, #40]	@ (80015b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001592:	f008 fcbd 	bl	8009f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff f983 	bl	80008a0 <main>
  bx  lr
 800159a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800159c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015a4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80015a8:	08009fc8 	.word	0x08009fc8
  ldr r2, =_sbss
 80015ac:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80015b0:	24000ddc 	.word	0x24000ddc

080015b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC3_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015be:	2003      	movs	r0, #3
 80015c0:	f000 f927 	bl	8001812 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015c4:	f004 f8fc 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_Init+0x68>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	4913      	ldr	r1, [pc, #76]	@ (8001624 <HAL_Init+0x6c>)
 80015d6:	5ccb      	ldrb	r3, [r1, r3]
 80015d8:	f003 031f 	and.w	r3, r3, #31
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
 80015e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <HAL_Init+0x68>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001624 <HAL_Init+0x6c>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
 80015f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <HAL_Init+0x70>)
 80015fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015fc:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <HAL_Init+0x74>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001602:	200f      	movs	r0, #15
 8001604:	f7ff fe7c 	bl	8001300 <HAL_InitTick>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e002      	b.n	8001618 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001612:	f7ff fdb7 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	58024400 	.word	0x58024400
 8001624:	08009f78 	.word	0x08009f78
 8001628:	24000004 	.word	0x24000004
 800162c:	24000000 	.word	0x24000000

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2400000c 	.word	0x2400000c
 8001654:	24000dbc 	.word	0x24000dbc

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	24000dbc 	.word	0x24000dbc

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_Delay+0x44>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffde 	bl	8001658 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2400000c 	.word	0x2400000c

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x40>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x40>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00
 80016fc:	05fa0000 	.word	0x05fa0000

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db0b      	blt.n	8001746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	f003 021f 	and.w	r2, r3, #31
 8001734:	4907      	ldr	r1, [pc, #28]	@ (8001754 <__NVIC_EnableIRQ+0x38>)
 8001736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	2001      	movs	r0, #1
 800173e:	fa00 f202 	lsl.w	r2, r0, r2
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	@ (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	@ (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
         );
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	@ 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff4c 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001836:	f7ff ff63 	bl	8001700 <__NVIC_GetPriorityGrouping>
 800183a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	68b9      	ldr	r1, [r7, #8]
 8001840:	6978      	ldr	r0, [r7, #20]
 8001842:	f7ff ffb3 	bl	80017ac <NVIC_EncodePriority>
 8001846:	4602      	mov	r2, r0
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff82 	bl	8001758 <__NVIC_SetPriority>
}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff56 	bl	800171c <__NVIC_EnableIRQ>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff feea 	bl	8001658 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e312      	b.n	8001eb6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a66      	ldr	r2, [pc, #408]	@ (8001a30 <HAL_DMA_Init+0x1b8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d04a      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a65      	ldr	r2, [pc, #404]	@ (8001a34 <HAL_DMA_Init+0x1bc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d045      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a63      	ldr	r2, [pc, #396]	@ (8001a38 <HAL_DMA_Init+0x1c0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d040      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a62      	ldr	r2, [pc, #392]	@ (8001a3c <HAL_DMA_Init+0x1c4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d03b      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a60      	ldr	r2, [pc, #384]	@ (8001a40 <HAL_DMA_Init+0x1c8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d036      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a5f      	ldr	r2, [pc, #380]	@ (8001a44 <HAL_DMA_Init+0x1cc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d031      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001a48 <HAL_DMA_Init+0x1d0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d02c      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a5c      	ldr	r2, [pc, #368]	@ (8001a4c <HAL_DMA_Init+0x1d4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d027      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a50 <HAL_DMA_Init+0x1d8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d022      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a59      	ldr	r2, [pc, #356]	@ (8001a54 <HAL_DMA_Init+0x1dc>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d01d      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a57      	ldr	r2, [pc, #348]	@ (8001a58 <HAL_DMA_Init+0x1e0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d018      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a56      	ldr	r2, [pc, #344]	@ (8001a5c <HAL_DMA_Init+0x1e4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d013      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a54      	ldr	r2, [pc, #336]	@ (8001a60 <HAL_DMA_Init+0x1e8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00e      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a53      	ldr	r2, [pc, #332]	@ (8001a64 <HAL_DMA_Init+0x1ec>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d009      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a51      	ldr	r2, [pc, #324]	@ (8001a68 <HAL_DMA_Init+0x1f0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d004      	beq.n	8001930 <HAL_DMA_Init+0xb8>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a50      	ldr	r2, [pc, #320]	@ (8001a6c <HAL_DMA_Init+0x1f4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_DMA_Init+0xbc>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_DMA_Init+0xbe>
 8001934:	2300      	movs	r3, #0
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 813c 	beq.w	8001bb4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a37      	ldr	r2, [pc, #220]	@ (8001a30 <HAL_DMA_Init+0x1b8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d04a      	beq.n	80019ec <HAL_DMA_Init+0x174>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a36      	ldr	r2, [pc, #216]	@ (8001a34 <HAL_DMA_Init+0x1bc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d045      	beq.n	80019ec <HAL_DMA_Init+0x174>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a34      	ldr	r2, [pc, #208]	@ (8001a38 <HAL_DMA_Init+0x1c0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d040      	beq.n	80019ec <HAL_DMA_Init+0x174>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a33      	ldr	r2, [pc, #204]	@ (8001a3c <HAL_DMA_Init+0x1c4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d03b      	beq.n	80019ec <HAL_DMA_Init+0x174>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a31      	ldr	r2, [pc, #196]	@ (8001a40 <HAL_DMA_Init+0x1c8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d036      	beq.n	80019ec <HAL_DMA_Init+0x174>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a30      	ldr	r2, [pc, #192]	@ (8001a44 <HAL_DMA_Init+0x1cc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d031      	beq.n	80019ec <HAL_DMA_Init+0x174>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2e      	ldr	r2, [pc, #184]	@ (8001a48 <HAL_DMA_Init+0x1d0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d02c      	beq.n	80019ec <HAL_DMA_Init+0x174>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a2d      	ldr	r2, [pc, #180]	@ (8001a4c <HAL_DMA_Init+0x1d4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d027      	beq.n	80019ec <HAL_DMA_Init+0x174>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a50 <HAL_DMA_Init+0x1d8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d022      	beq.n	80019ec <HAL_DMA_Init+0x174>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001a54 <HAL_DMA_Init+0x1dc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d01d      	beq.n	80019ec <HAL_DMA_Init+0x174>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a28      	ldr	r2, [pc, #160]	@ (8001a58 <HAL_DMA_Init+0x1e0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d018      	beq.n	80019ec <HAL_DMA_Init+0x174>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a27      	ldr	r2, [pc, #156]	@ (8001a5c <HAL_DMA_Init+0x1e4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d013      	beq.n	80019ec <HAL_DMA_Init+0x174>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a25      	ldr	r2, [pc, #148]	@ (8001a60 <HAL_DMA_Init+0x1e8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00e      	beq.n	80019ec <HAL_DMA_Init+0x174>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a24      	ldr	r2, [pc, #144]	@ (8001a64 <HAL_DMA_Init+0x1ec>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d009      	beq.n	80019ec <HAL_DMA_Init+0x174>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a22      	ldr	r2, [pc, #136]	@ (8001a68 <HAL_DMA_Init+0x1f0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d004      	beq.n	80019ec <HAL_DMA_Init+0x174>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a21      	ldr	r2, [pc, #132]	@ (8001a6c <HAL_DMA_Init+0x1f4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d108      	bne.n	80019fe <HAL_DMA_Init+0x186>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	e007      	b.n	8001a0e <HAL_DMA_Init+0x196>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0201 	bic.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a0e:	e02f      	b.n	8001a70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a10:	f7ff fe22 	bl	8001658 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d928      	bls.n	8001a70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2220      	movs	r2, #32
 8001a22:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2203      	movs	r2, #3
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e242      	b.n	8001eb6 <HAL_DMA_Init+0x63e>
 8001a30:	40020010 	.word	0x40020010
 8001a34:	40020028 	.word	0x40020028
 8001a38:	40020040 	.word	0x40020040
 8001a3c:	40020058 	.word	0x40020058
 8001a40:	40020070 	.word	0x40020070
 8001a44:	40020088 	.word	0x40020088
 8001a48:	400200a0 	.word	0x400200a0
 8001a4c:	400200b8 	.word	0x400200b8
 8001a50:	40020410 	.word	0x40020410
 8001a54:	40020428 	.word	0x40020428
 8001a58:	40020440 	.word	0x40020440
 8001a5c:	40020458 	.word	0x40020458
 8001a60:	40020470 	.word	0x40020470
 8001a64:	40020488 	.word	0x40020488
 8001a68:	400204a0 	.word	0x400204a0
 8001a6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1c8      	bne.n	8001a10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4b83      	ldr	r3, [pc, #524]	@ (8001c98 <HAL_DMA_Init+0x420>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d107      	bne.n	8001ad4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001acc:	4313      	orrs	r3, r2
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b28      	cmp	r3, #40	@ 0x28
 8001ada:	d903      	bls.n	8001ae4 <HAL_DMA_Init+0x26c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ae2:	d91f      	bls.n	8001b24 <HAL_DMA_Init+0x2ac>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b3e      	cmp	r3, #62	@ 0x3e
 8001aea:	d903      	bls.n	8001af4 <HAL_DMA_Init+0x27c>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b42      	cmp	r3, #66	@ 0x42
 8001af2:	d917      	bls.n	8001b24 <HAL_DMA_Init+0x2ac>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b46      	cmp	r3, #70	@ 0x46
 8001afa:	d903      	bls.n	8001b04 <HAL_DMA_Init+0x28c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b48      	cmp	r3, #72	@ 0x48
 8001b02:	d90f      	bls.n	8001b24 <HAL_DMA_Init+0x2ac>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b4e      	cmp	r3, #78	@ 0x4e
 8001b0a:	d903      	bls.n	8001b14 <HAL_DMA_Init+0x29c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b52      	cmp	r3, #82	@ 0x52
 8001b12:	d907      	bls.n	8001b24 <HAL_DMA_Init+0x2ac>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b73      	cmp	r3, #115	@ 0x73
 8001b1a:	d905      	bls.n	8001b28 <HAL_DMA_Init+0x2b0>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b77      	cmp	r3, #119	@ 0x77
 8001b22:	d801      	bhi.n	8001b28 <HAL_DMA_Init+0x2b0>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_DMA_Init+0x2b2>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b34:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f023 0307 	bic.w	r3, r3, #7
 8001b4c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d117      	bne.n	8001b90 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00e      	beq.n	8001b90 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f002 fb2e 	bl	80041d4 <DMA_CheckFifoParam>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2240      	movs	r2, #64	@ 0x40
 8001b82:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e192      	b.n	8001eb6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f002 fa69 	bl	8004070 <DMA_CalcBaseAndBitshift>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	223f      	movs	r2, #63	@ 0x3f
 8001bac:	409a      	lsls	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	e0c8      	b.n	8001d46 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a38      	ldr	r2, [pc, #224]	@ (8001c9c <HAL_DMA_Init+0x424>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d022      	beq.n	8001c04 <HAL_DMA_Init+0x38c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a37      	ldr	r2, [pc, #220]	@ (8001ca0 <HAL_DMA_Init+0x428>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d01d      	beq.n	8001c04 <HAL_DMA_Init+0x38c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a35      	ldr	r2, [pc, #212]	@ (8001ca4 <HAL_DMA_Init+0x42c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d018      	beq.n	8001c04 <HAL_DMA_Init+0x38c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a34      	ldr	r2, [pc, #208]	@ (8001ca8 <HAL_DMA_Init+0x430>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d013      	beq.n	8001c04 <HAL_DMA_Init+0x38c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a32      	ldr	r2, [pc, #200]	@ (8001cac <HAL_DMA_Init+0x434>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00e      	beq.n	8001c04 <HAL_DMA_Init+0x38c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a31      	ldr	r2, [pc, #196]	@ (8001cb0 <HAL_DMA_Init+0x438>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d009      	beq.n	8001c04 <HAL_DMA_Init+0x38c>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb4 <HAL_DMA_Init+0x43c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d004      	beq.n	8001c04 <HAL_DMA_Init+0x38c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8001cb8 <HAL_DMA_Init+0x440>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_DMA_Init+0x390>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_DMA_Init+0x392>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8092 	beq.w	8001d34 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a21      	ldr	r2, [pc, #132]	@ (8001c9c <HAL_DMA_Init+0x424>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d021      	beq.n	8001c5e <HAL_DMA_Init+0x3e6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a20      	ldr	r2, [pc, #128]	@ (8001ca0 <HAL_DMA_Init+0x428>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d01c      	beq.n	8001c5e <HAL_DMA_Init+0x3e6>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca4 <HAL_DMA_Init+0x42c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d017      	beq.n	8001c5e <HAL_DMA_Init+0x3e6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca8 <HAL_DMA_Init+0x430>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d012      	beq.n	8001c5e <HAL_DMA_Init+0x3e6>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cac <HAL_DMA_Init+0x434>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <HAL_DMA_Init+0x3e6>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb0 <HAL_DMA_Init+0x438>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d008      	beq.n	8001c5e <HAL_DMA_Init+0x3e6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a18      	ldr	r2, [pc, #96]	@ (8001cb4 <HAL_DMA_Init+0x43c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d003      	beq.n	8001c5e <HAL_DMA_Init+0x3e6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a17      	ldr	r2, [pc, #92]	@ (8001cb8 <HAL_DMA_Init+0x440>)
 8001c5c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2202      	movs	r2, #2
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <HAL_DMA_Init+0x444>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b40      	cmp	r3, #64	@ 0x40
 8001c84:	d01c      	beq.n	8001cc0 <HAL_DMA_Init+0x448>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b80      	cmp	r3, #128	@ 0x80
 8001c8c:	d102      	bne.n	8001c94 <HAL_DMA_Init+0x41c>
 8001c8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c92:	e016      	b.n	8001cc2 <HAL_DMA_Init+0x44a>
 8001c94:	2300      	movs	r3, #0
 8001c96:	e014      	b.n	8001cc2 <HAL_DMA_Init+0x44a>
 8001c98:	fe10803f 	.word	0xfe10803f
 8001c9c:	58025408 	.word	0x58025408
 8001ca0:	5802541c 	.word	0x5802541c
 8001ca4:	58025430 	.word	0x58025430
 8001ca8:	58025444 	.word	0x58025444
 8001cac:	58025458 	.word	0x58025458
 8001cb0:	5802546c 	.word	0x5802546c
 8001cb4:	58025480 	.word	0x58025480
 8001cb8:	58025494 	.word	0x58025494
 8001cbc:	fffe000f 	.word	0xfffe000f
 8001cc0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68d2      	ldr	r2, [r2, #12]
 8001cc6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cf0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b6e      	ldr	r3, [pc, #440]	@ (8001ec0 <HAL_DMA_Init+0x648>)
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec4 <HAL_DMA_Init+0x64c>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f002 f9a9 	bl	8004070 <DMA_CalcBaseAndBitshift>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	e008      	b.n	8001d46 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2240      	movs	r2, #64	@ 0x40
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0b7      	b.n	8001eb6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ec8 <HAL_DMA_Init+0x650>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d072      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a5d      	ldr	r2, [pc, #372]	@ (8001ecc <HAL_DMA_Init+0x654>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d06d      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ed0 <HAL_DMA_Init+0x658>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d068      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5a      	ldr	r2, [pc, #360]	@ (8001ed4 <HAL_DMA_Init+0x65c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d063      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a59      	ldr	r2, [pc, #356]	@ (8001ed8 <HAL_DMA_Init+0x660>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d05e      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a57      	ldr	r2, [pc, #348]	@ (8001edc <HAL_DMA_Init+0x664>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d059      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a56      	ldr	r2, [pc, #344]	@ (8001ee0 <HAL_DMA_Init+0x668>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d054      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a54      	ldr	r2, [pc, #336]	@ (8001ee4 <HAL_DMA_Init+0x66c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d04f      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a53      	ldr	r2, [pc, #332]	@ (8001ee8 <HAL_DMA_Init+0x670>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d04a      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a51      	ldr	r2, [pc, #324]	@ (8001eec <HAL_DMA_Init+0x674>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d045      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a50      	ldr	r2, [pc, #320]	@ (8001ef0 <HAL_DMA_Init+0x678>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d040      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef4 <HAL_DMA_Init+0x67c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d03b      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ef8 <HAL_DMA_Init+0x680>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d036      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8001efc <HAL_DMA_Init+0x684>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d031      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a4a      	ldr	r2, [pc, #296]	@ (8001f00 <HAL_DMA_Init+0x688>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d02c      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a48      	ldr	r2, [pc, #288]	@ (8001f04 <HAL_DMA_Init+0x68c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d027      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a47      	ldr	r2, [pc, #284]	@ (8001f08 <HAL_DMA_Init+0x690>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d022      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a45      	ldr	r2, [pc, #276]	@ (8001f0c <HAL_DMA_Init+0x694>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01d      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a44      	ldr	r2, [pc, #272]	@ (8001f10 <HAL_DMA_Init+0x698>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d018      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a42      	ldr	r2, [pc, #264]	@ (8001f14 <HAL_DMA_Init+0x69c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a41      	ldr	r2, [pc, #260]	@ (8001f18 <HAL_DMA_Init+0x6a0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00e      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8001f1c <HAL_DMA_Init+0x6a4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d009      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3e      	ldr	r2, [pc, #248]	@ (8001f20 <HAL_DMA_Init+0x6a8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d004      	beq.n	8001e36 <HAL_DMA_Init+0x5be>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a3c      	ldr	r2, [pc, #240]	@ (8001f24 <HAL_DMA_Init+0x6ac>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_DMA_Init+0x5c2>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_DMA_Init+0x5c4>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d032      	beq.n	8001ea6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f002 fa43 	bl	80042cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b80      	cmp	r3, #128	@ 0x80
 8001e4c:	d102      	bne.n	8001e54 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d010      	beq.n	8001e94 <HAL_DMA_Init+0x61c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d80c      	bhi.n	8001e94 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f002 fac0 	bl	8004400 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	e008      	b.n	8001ea6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	a7fdabf8 	.word	0xa7fdabf8
 8001ec4:	cccccccd 	.word	0xcccccccd
 8001ec8:	40020010 	.word	0x40020010
 8001ecc:	40020028 	.word	0x40020028
 8001ed0:	40020040 	.word	0x40020040
 8001ed4:	40020058 	.word	0x40020058
 8001ed8:	40020070 	.word	0x40020070
 8001edc:	40020088 	.word	0x40020088
 8001ee0:	400200a0 	.word	0x400200a0
 8001ee4:	400200b8 	.word	0x400200b8
 8001ee8:	40020410 	.word	0x40020410
 8001eec:	40020428 	.word	0x40020428
 8001ef0:	40020440 	.word	0x40020440
 8001ef4:	40020458 	.word	0x40020458
 8001ef8:	40020470 	.word	0x40020470
 8001efc:	40020488 	.word	0x40020488
 8001f00:	400204a0 	.word	0x400204a0
 8001f04:	400204b8 	.word	0x400204b8
 8001f08:	58025408 	.word	0x58025408
 8001f0c:	5802541c 	.word	0x5802541c
 8001f10:	58025430 	.word	0x58025430
 8001f14:	58025444 	.word	0x58025444
 8001f18:	58025458 	.word	0x58025458
 8001f1c:	5802546c 	.word	0x5802546c
 8001f20:	58025480 	.word	0x58025480
 8001f24:	58025494 	.word	0x58025494

08001f28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e226      	b.n	8002392 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Start_IT+0x2a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e21f      	b.n	8002392 <HAL_DMA_Start_IT+0x46a>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	f040 820a 	bne.w	800237c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a68      	ldr	r2, [pc, #416]	@ (800211c <HAL_DMA_Start_IT+0x1f4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d04a      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a66      	ldr	r2, [pc, #408]	@ (8002120 <HAL_DMA_Start_IT+0x1f8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d045      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a65      	ldr	r2, [pc, #404]	@ (8002124 <HAL_DMA_Start_IT+0x1fc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d040      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a63      	ldr	r2, [pc, #396]	@ (8002128 <HAL_DMA_Start_IT+0x200>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d03b      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a62      	ldr	r2, [pc, #392]	@ (800212c <HAL_DMA_Start_IT+0x204>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d036      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a60      	ldr	r2, [pc, #384]	@ (8002130 <HAL_DMA_Start_IT+0x208>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d031      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a5f      	ldr	r2, [pc, #380]	@ (8002134 <HAL_DMA_Start_IT+0x20c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d02c      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8002138 <HAL_DMA_Start_IT+0x210>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d027      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a5c      	ldr	r2, [pc, #368]	@ (800213c <HAL_DMA_Start_IT+0x214>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d022      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8002140 <HAL_DMA_Start_IT+0x218>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01d      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a59      	ldr	r2, [pc, #356]	@ (8002144 <HAL_DMA_Start_IT+0x21c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d018      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a57      	ldr	r2, [pc, #348]	@ (8002148 <HAL_DMA_Start_IT+0x220>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a56      	ldr	r2, [pc, #344]	@ (800214c <HAL_DMA_Start_IT+0x224>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00e      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a54      	ldr	r2, [pc, #336]	@ (8002150 <HAL_DMA_Start_IT+0x228>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d009      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a53      	ldr	r2, [pc, #332]	@ (8002154 <HAL_DMA_Start_IT+0x22c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d004      	beq.n	8002016 <HAL_DMA_Start_IT+0xee>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a51      	ldr	r2, [pc, #324]	@ (8002158 <HAL_DMA_Start_IT+0x230>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d108      	bne.n	8002028 <HAL_DMA_Start_IT+0x100>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e007      	b.n	8002038 <HAL_DMA_Start_IT+0x110>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f001 fe6a 	bl	8003d18 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a34      	ldr	r2, [pc, #208]	@ (800211c <HAL_DMA_Start_IT+0x1f4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d04a      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a33      	ldr	r2, [pc, #204]	@ (8002120 <HAL_DMA_Start_IT+0x1f8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d045      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a31      	ldr	r2, [pc, #196]	@ (8002124 <HAL_DMA_Start_IT+0x1fc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d040      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a30      	ldr	r2, [pc, #192]	@ (8002128 <HAL_DMA_Start_IT+0x200>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d03b      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2e      	ldr	r2, [pc, #184]	@ (800212c <HAL_DMA_Start_IT+0x204>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d036      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a2d      	ldr	r2, [pc, #180]	@ (8002130 <HAL_DMA_Start_IT+0x208>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d031      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2b      	ldr	r2, [pc, #172]	@ (8002134 <HAL_DMA_Start_IT+0x20c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02c      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2a      	ldr	r2, [pc, #168]	@ (8002138 <HAL_DMA_Start_IT+0x210>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d027      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a28      	ldr	r2, [pc, #160]	@ (800213c <HAL_DMA_Start_IT+0x214>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d022      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a27      	ldr	r2, [pc, #156]	@ (8002140 <HAL_DMA_Start_IT+0x218>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d01d      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a25      	ldr	r2, [pc, #148]	@ (8002144 <HAL_DMA_Start_IT+0x21c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d018      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a24      	ldr	r2, [pc, #144]	@ (8002148 <HAL_DMA_Start_IT+0x220>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d013      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a22      	ldr	r2, [pc, #136]	@ (800214c <HAL_DMA_Start_IT+0x224>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00e      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a21      	ldr	r2, [pc, #132]	@ (8002150 <HAL_DMA_Start_IT+0x228>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d009      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002154 <HAL_DMA_Start_IT+0x22c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d004      	beq.n	80020e4 <HAL_DMA_Start_IT+0x1bc>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1e      	ldr	r2, [pc, #120]	@ (8002158 <HAL_DMA_Start_IT+0x230>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_DMA_Start_IT+0x1c0>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_DMA_Start_IT+0x1c2>
 80020e8:	2300      	movs	r3, #0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d036      	beq.n	800215c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 021e 	bic.w	r2, r3, #30
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0216 	orr.w	r2, r2, #22
 8002100:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d03e      	beq.n	8002188 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0208 	orr.w	r2, r2, #8
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e035      	b.n	8002188 <HAL_DMA_Start_IT+0x260>
 800211c:	40020010 	.word	0x40020010
 8002120:	40020028 	.word	0x40020028
 8002124:	40020040 	.word	0x40020040
 8002128:	40020058 	.word	0x40020058
 800212c:	40020070 	.word	0x40020070
 8002130:	40020088 	.word	0x40020088
 8002134:	400200a0 	.word	0x400200a0
 8002138:	400200b8 	.word	0x400200b8
 800213c:	40020410 	.word	0x40020410
 8002140:	40020428 	.word	0x40020428
 8002144:	40020440 	.word	0x40020440
 8002148:	40020458 	.word	0x40020458
 800214c:	40020470 	.word	0x40020470
 8002150:	40020488 	.word	0x40020488
 8002154:	400204a0 	.word	0x400204a0
 8002158:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 020e 	bic.w	r2, r3, #14
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 020a 	orr.w	r2, r2, #10
 800216e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0204 	orr.w	r2, r2, #4
 8002186:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a83      	ldr	r2, [pc, #524]	@ (800239c <HAL_DMA_Start_IT+0x474>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d072      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a82      	ldr	r2, [pc, #520]	@ (80023a0 <HAL_DMA_Start_IT+0x478>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d06d      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a80      	ldr	r2, [pc, #512]	@ (80023a4 <HAL_DMA_Start_IT+0x47c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d068      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7f      	ldr	r2, [pc, #508]	@ (80023a8 <HAL_DMA_Start_IT+0x480>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d063      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a7d      	ldr	r2, [pc, #500]	@ (80023ac <HAL_DMA_Start_IT+0x484>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d05e      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a7c      	ldr	r2, [pc, #496]	@ (80023b0 <HAL_DMA_Start_IT+0x488>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d059      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a7a      	ldr	r2, [pc, #488]	@ (80023b4 <HAL_DMA_Start_IT+0x48c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d054      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a79      	ldr	r2, [pc, #484]	@ (80023b8 <HAL_DMA_Start_IT+0x490>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d04f      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a77      	ldr	r2, [pc, #476]	@ (80023bc <HAL_DMA_Start_IT+0x494>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d04a      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a76      	ldr	r2, [pc, #472]	@ (80023c0 <HAL_DMA_Start_IT+0x498>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d045      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a74      	ldr	r2, [pc, #464]	@ (80023c4 <HAL_DMA_Start_IT+0x49c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d040      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a73      	ldr	r2, [pc, #460]	@ (80023c8 <HAL_DMA_Start_IT+0x4a0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d03b      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a71      	ldr	r2, [pc, #452]	@ (80023cc <HAL_DMA_Start_IT+0x4a4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d036      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a70      	ldr	r2, [pc, #448]	@ (80023d0 <HAL_DMA_Start_IT+0x4a8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d031      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6e      	ldr	r2, [pc, #440]	@ (80023d4 <HAL_DMA_Start_IT+0x4ac>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d02c      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6d      	ldr	r2, [pc, #436]	@ (80023d8 <HAL_DMA_Start_IT+0x4b0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d027      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6b      	ldr	r2, [pc, #428]	@ (80023dc <HAL_DMA_Start_IT+0x4b4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d022      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6a      	ldr	r2, [pc, #424]	@ (80023e0 <HAL_DMA_Start_IT+0x4b8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d01d      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a68      	ldr	r2, [pc, #416]	@ (80023e4 <HAL_DMA_Start_IT+0x4bc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d018      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a67      	ldr	r2, [pc, #412]	@ (80023e8 <HAL_DMA_Start_IT+0x4c0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d013      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a65      	ldr	r2, [pc, #404]	@ (80023ec <HAL_DMA_Start_IT+0x4c4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00e      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a64      	ldr	r2, [pc, #400]	@ (80023f0 <HAL_DMA_Start_IT+0x4c8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d009      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a62      	ldr	r2, [pc, #392]	@ (80023f4 <HAL_DMA_Start_IT+0x4cc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d004      	beq.n	8002278 <HAL_DMA_Start_IT+0x350>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a61      	ldr	r2, [pc, #388]	@ (80023f8 <HAL_DMA_Start_IT+0x4d0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d101      	bne.n	800227c <HAL_DMA_Start_IT+0x354>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_DMA_Start_IT+0x356>
 800227c:	2300      	movs	r3, #0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d01a      	beq.n	80022b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800229e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a37      	ldr	r2, [pc, #220]	@ (800239c <HAL_DMA_Start_IT+0x474>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d04a      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a36      	ldr	r2, [pc, #216]	@ (80023a0 <HAL_DMA_Start_IT+0x478>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d045      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a34      	ldr	r2, [pc, #208]	@ (80023a4 <HAL_DMA_Start_IT+0x47c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d040      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a33      	ldr	r2, [pc, #204]	@ (80023a8 <HAL_DMA_Start_IT+0x480>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d03b      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a31      	ldr	r2, [pc, #196]	@ (80023ac <HAL_DMA_Start_IT+0x484>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d036      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a30      	ldr	r2, [pc, #192]	@ (80023b0 <HAL_DMA_Start_IT+0x488>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d031      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a2e      	ldr	r2, [pc, #184]	@ (80023b4 <HAL_DMA_Start_IT+0x48c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02c      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a2d      	ldr	r2, [pc, #180]	@ (80023b8 <HAL_DMA_Start_IT+0x490>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d027      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2b      	ldr	r2, [pc, #172]	@ (80023bc <HAL_DMA_Start_IT+0x494>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d022      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a2a      	ldr	r2, [pc, #168]	@ (80023c0 <HAL_DMA_Start_IT+0x498>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d01d      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a28      	ldr	r2, [pc, #160]	@ (80023c4 <HAL_DMA_Start_IT+0x49c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d018      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a27      	ldr	r2, [pc, #156]	@ (80023c8 <HAL_DMA_Start_IT+0x4a0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a25      	ldr	r2, [pc, #148]	@ (80023cc <HAL_DMA_Start_IT+0x4a4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00e      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a24      	ldr	r2, [pc, #144]	@ (80023d0 <HAL_DMA_Start_IT+0x4a8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a22      	ldr	r2, [pc, #136]	@ (80023d4 <HAL_DMA_Start_IT+0x4ac>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_DMA_Start_IT+0x430>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a21      	ldr	r2, [pc, #132]	@ (80023d8 <HAL_DMA_Start_IT+0x4b0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d108      	bne.n	800236a <HAL_DMA_Start_IT+0x442>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e012      	b.n	8002390 <HAL_DMA_Start_IT+0x468>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e009      	b.n	8002390 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002382:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002390:	7dfb      	ldrb	r3, [r7, #23]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40020010 	.word	0x40020010
 80023a0:	40020028 	.word	0x40020028
 80023a4:	40020040 	.word	0x40020040
 80023a8:	40020058 	.word	0x40020058
 80023ac:	40020070 	.word	0x40020070
 80023b0:	40020088 	.word	0x40020088
 80023b4:	400200a0 	.word	0x400200a0
 80023b8:	400200b8 	.word	0x400200b8
 80023bc:	40020410 	.word	0x40020410
 80023c0:	40020428 	.word	0x40020428
 80023c4:	40020440 	.word	0x40020440
 80023c8:	40020458 	.word	0x40020458
 80023cc:	40020470 	.word	0x40020470
 80023d0:	40020488 	.word	0x40020488
 80023d4:	400204a0 	.word	0x400204a0
 80023d8:	400204b8 	.word	0x400204b8
 80023dc:	58025408 	.word	0x58025408
 80023e0:	5802541c 	.word	0x5802541c
 80023e4:	58025430 	.word	0x58025430
 80023e8:	58025444 	.word	0x58025444
 80023ec:	58025458 	.word	0x58025458
 80023f0:	5802546c 	.word	0x5802546c
 80023f4:	58025480 	.word	0x58025480
 80023f8:	58025494 	.word	0x58025494

080023fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff f928 	bl	8001658 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e2dc      	b.n	80029ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d008      	beq.n	8002432 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2280      	movs	r2, #128	@ 0x80
 8002424:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e2cd      	b.n	80029ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a76      	ldr	r2, [pc, #472]	@ (8002610 <HAL_DMA_Abort+0x214>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d04a      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a74      	ldr	r2, [pc, #464]	@ (8002614 <HAL_DMA_Abort+0x218>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d045      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a73      	ldr	r2, [pc, #460]	@ (8002618 <HAL_DMA_Abort+0x21c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d040      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a71      	ldr	r2, [pc, #452]	@ (800261c <HAL_DMA_Abort+0x220>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d03b      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a70      	ldr	r2, [pc, #448]	@ (8002620 <HAL_DMA_Abort+0x224>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d036      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a6e      	ldr	r2, [pc, #440]	@ (8002624 <HAL_DMA_Abort+0x228>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d031      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6d      	ldr	r2, [pc, #436]	@ (8002628 <HAL_DMA_Abort+0x22c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d02c      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6b      	ldr	r2, [pc, #428]	@ (800262c <HAL_DMA_Abort+0x230>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d027      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6a      	ldr	r2, [pc, #424]	@ (8002630 <HAL_DMA_Abort+0x234>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a68      	ldr	r2, [pc, #416]	@ (8002634 <HAL_DMA_Abort+0x238>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01d      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a67      	ldr	r2, [pc, #412]	@ (8002638 <HAL_DMA_Abort+0x23c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d018      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a65      	ldr	r2, [pc, #404]	@ (800263c <HAL_DMA_Abort+0x240>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a64      	ldr	r2, [pc, #400]	@ (8002640 <HAL_DMA_Abort+0x244>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00e      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a62      	ldr	r2, [pc, #392]	@ (8002644 <HAL_DMA_Abort+0x248>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a61      	ldr	r2, [pc, #388]	@ (8002648 <HAL_DMA_Abort+0x24c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d004      	beq.n	80024d2 <HAL_DMA_Abort+0xd6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a5f      	ldr	r2, [pc, #380]	@ (800264c <HAL_DMA_Abort+0x250>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_DMA_Abort+0xda>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_DMA_Abort+0xdc>
 80024d6:	2300      	movs	r3, #0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 021e 	bic.w	r2, r2, #30
 80024ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e00a      	b.n	800251a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 020e 	bic.w	r2, r2, #14
 8002512:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a3c      	ldr	r2, [pc, #240]	@ (8002610 <HAL_DMA_Abort+0x214>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d072      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a3a      	ldr	r2, [pc, #232]	@ (8002614 <HAL_DMA_Abort+0x218>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d06d      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a39      	ldr	r2, [pc, #228]	@ (8002618 <HAL_DMA_Abort+0x21c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d068      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a37      	ldr	r2, [pc, #220]	@ (800261c <HAL_DMA_Abort+0x220>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d063      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a36      	ldr	r2, [pc, #216]	@ (8002620 <HAL_DMA_Abort+0x224>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d05e      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a34      	ldr	r2, [pc, #208]	@ (8002624 <HAL_DMA_Abort+0x228>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d059      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a33      	ldr	r2, [pc, #204]	@ (8002628 <HAL_DMA_Abort+0x22c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d054      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a31      	ldr	r2, [pc, #196]	@ (800262c <HAL_DMA_Abort+0x230>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d04f      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a30      	ldr	r2, [pc, #192]	@ (8002630 <HAL_DMA_Abort+0x234>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d04a      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a2e      	ldr	r2, [pc, #184]	@ (8002634 <HAL_DMA_Abort+0x238>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d045      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a2d      	ldr	r2, [pc, #180]	@ (8002638 <HAL_DMA_Abort+0x23c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d040      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a2b      	ldr	r2, [pc, #172]	@ (800263c <HAL_DMA_Abort+0x240>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d03b      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2a      	ldr	r2, [pc, #168]	@ (8002640 <HAL_DMA_Abort+0x244>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d036      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a28      	ldr	r2, [pc, #160]	@ (8002644 <HAL_DMA_Abort+0x248>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d031      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a27      	ldr	r2, [pc, #156]	@ (8002648 <HAL_DMA_Abort+0x24c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d02c      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a25      	ldr	r2, [pc, #148]	@ (800264c <HAL_DMA_Abort+0x250>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d027      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a24      	ldr	r2, [pc, #144]	@ (8002650 <HAL_DMA_Abort+0x254>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a22      	ldr	r2, [pc, #136]	@ (8002654 <HAL_DMA_Abort+0x258>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01d      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a21      	ldr	r2, [pc, #132]	@ (8002658 <HAL_DMA_Abort+0x25c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d018      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <HAL_DMA_Abort+0x260>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002660 <HAL_DMA_Abort+0x264>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00e      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002664 <HAL_DMA_Abort+0x268>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002668 <HAL_DMA_Abort+0x26c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_DMA_Abort+0x20e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a19      	ldr	r2, [pc, #100]	@ (800266c <HAL_DMA_Abort+0x270>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d132      	bne.n	8002670 <HAL_DMA_Abort+0x274>
 800260a:	2301      	movs	r3, #1
 800260c:	e031      	b.n	8002672 <HAL_DMA_Abort+0x276>
 800260e:	bf00      	nop
 8002610:	40020010 	.word	0x40020010
 8002614:	40020028 	.word	0x40020028
 8002618:	40020040 	.word	0x40020040
 800261c:	40020058 	.word	0x40020058
 8002620:	40020070 	.word	0x40020070
 8002624:	40020088 	.word	0x40020088
 8002628:	400200a0 	.word	0x400200a0
 800262c:	400200b8 	.word	0x400200b8
 8002630:	40020410 	.word	0x40020410
 8002634:	40020428 	.word	0x40020428
 8002638:	40020440 	.word	0x40020440
 800263c:	40020458 	.word	0x40020458
 8002640:	40020470 	.word	0x40020470
 8002644:	40020488 	.word	0x40020488
 8002648:	400204a0 	.word	0x400204a0
 800264c:	400204b8 	.word	0x400204b8
 8002650:	58025408 	.word	0x58025408
 8002654:	5802541c 	.word	0x5802541c
 8002658:	58025430 	.word	0x58025430
 800265c:	58025444 	.word	0x58025444
 8002660:	58025458 	.word	0x58025458
 8002664:	5802546c 	.word	0x5802546c
 8002668:	58025480 	.word	0x58025480
 800266c:	58025494 	.word	0x58025494
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002684:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6d      	ldr	r2, [pc, #436]	@ (8002840 <HAL_DMA_Abort+0x444>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d04a      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6b      	ldr	r2, [pc, #428]	@ (8002844 <HAL_DMA_Abort+0x448>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d045      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6a      	ldr	r2, [pc, #424]	@ (8002848 <HAL_DMA_Abort+0x44c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d040      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a68      	ldr	r2, [pc, #416]	@ (800284c <HAL_DMA_Abort+0x450>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d03b      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a67      	ldr	r2, [pc, #412]	@ (8002850 <HAL_DMA_Abort+0x454>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d036      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a65      	ldr	r2, [pc, #404]	@ (8002854 <HAL_DMA_Abort+0x458>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d031      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a64      	ldr	r2, [pc, #400]	@ (8002858 <HAL_DMA_Abort+0x45c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d02c      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a62      	ldr	r2, [pc, #392]	@ (800285c <HAL_DMA_Abort+0x460>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d027      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a61      	ldr	r2, [pc, #388]	@ (8002860 <HAL_DMA_Abort+0x464>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d022      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a5f      	ldr	r2, [pc, #380]	@ (8002864 <HAL_DMA_Abort+0x468>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01d      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002868 <HAL_DMA_Abort+0x46c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d018      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a5c      	ldr	r2, [pc, #368]	@ (800286c <HAL_DMA_Abort+0x470>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a5b      	ldr	r2, [pc, #364]	@ (8002870 <HAL_DMA_Abort+0x474>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00e      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a59      	ldr	r2, [pc, #356]	@ (8002874 <HAL_DMA_Abort+0x478>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a58      	ldr	r2, [pc, #352]	@ (8002878 <HAL_DMA_Abort+0x47c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d004      	beq.n	8002726 <HAL_DMA_Abort+0x32a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a56      	ldr	r2, [pc, #344]	@ (800287c <HAL_DMA_Abort+0x480>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d108      	bne.n	8002738 <HAL_DMA_Abort+0x33c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e007      	b.n	8002748 <HAL_DMA_Abort+0x34c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002748:	e013      	b.n	8002772 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800274a:	f7fe ff85 	bl	8001658 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b05      	cmp	r3, #5
 8002756:	d90c      	bls.n	8002772 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2203      	movs	r2, #3
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e12d      	b.n	80029ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1e5      	bne.n	800274a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2f      	ldr	r2, [pc, #188]	@ (8002840 <HAL_DMA_Abort+0x444>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d04a      	beq.n	800281e <HAL_DMA_Abort+0x422>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2d      	ldr	r2, [pc, #180]	@ (8002844 <HAL_DMA_Abort+0x448>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d045      	beq.n	800281e <HAL_DMA_Abort+0x422>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2c      	ldr	r2, [pc, #176]	@ (8002848 <HAL_DMA_Abort+0x44c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d040      	beq.n	800281e <HAL_DMA_Abort+0x422>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2a      	ldr	r2, [pc, #168]	@ (800284c <HAL_DMA_Abort+0x450>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d03b      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a29      	ldr	r2, [pc, #164]	@ (8002850 <HAL_DMA_Abort+0x454>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d036      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a27      	ldr	r2, [pc, #156]	@ (8002854 <HAL_DMA_Abort+0x458>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d031      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a26      	ldr	r2, [pc, #152]	@ (8002858 <HAL_DMA_Abort+0x45c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d02c      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a24      	ldr	r2, [pc, #144]	@ (800285c <HAL_DMA_Abort+0x460>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d027      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a23      	ldr	r2, [pc, #140]	@ (8002860 <HAL_DMA_Abort+0x464>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d022      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a21      	ldr	r2, [pc, #132]	@ (8002864 <HAL_DMA_Abort+0x468>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d01d      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a20      	ldr	r2, [pc, #128]	@ (8002868 <HAL_DMA_Abort+0x46c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d018      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1e      	ldr	r2, [pc, #120]	@ (800286c <HAL_DMA_Abort+0x470>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_DMA_Abort+0x422>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_DMA_Abort+0x474>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00e      	beq.n	800281e <HAL_DMA_Abort+0x422>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1b      	ldr	r2, [pc, #108]	@ (8002874 <HAL_DMA_Abort+0x478>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d009      	beq.n	800281e <HAL_DMA_Abort+0x422>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1a      	ldr	r2, [pc, #104]	@ (8002878 <HAL_DMA_Abort+0x47c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_DMA_Abort+0x422>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a18      	ldr	r2, [pc, #96]	@ (800287c <HAL_DMA_Abort+0x480>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_DMA_Abort+0x426>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_DMA_Abort+0x428>
 8002822:	2300      	movs	r3, #0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d02b      	beq.n	8002880 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	223f      	movs	r2, #63	@ 0x3f
 8002838:	409a      	lsls	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	e02a      	b.n	8002896 <HAL_DMA_Abort+0x49a>
 8002840:	40020010 	.word	0x40020010
 8002844:	40020028 	.word	0x40020028
 8002848:	40020040 	.word	0x40020040
 800284c:	40020058 	.word	0x40020058
 8002850:	40020070 	.word	0x40020070
 8002854:	40020088 	.word	0x40020088
 8002858:	400200a0 	.word	0x400200a0
 800285c:	400200b8 	.word	0x400200b8
 8002860:	40020410 	.word	0x40020410
 8002864:	40020428 	.word	0x40020428
 8002868:	40020440 	.word	0x40020440
 800286c:	40020458 	.word	0x40020458
 8002870:	40020470 	.word	0x40020470
 8002874:	40020488 	.word	0x40020488
 8002878:	400204a0 	.word	0x400204a0
 800287c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002884:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2201      	movs	r2, #1
 8002890:	409a      	lsls	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a4f      	ldr	r2, [pc, #316]	@ (80029d8 <HAL_DMA_Abort+0x5dc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d072      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a4d      	ldr	r2, [pc, #308]	@ (80029dc <HAL_DMA_Abort+0x5e0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d06d      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a4c      	ldr	r2, [pc, #304]	@ (80029e0 <HAL_DMA_Abort+0x5e4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d068      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a4a      	ldr	r2, [pc, #296]	@ (80029e4 <HAL_DMA_Abort+0x5e8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d063      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a49      	ldr	r2, [pc, #292]	@ (80029e8 <HAL_DMA_Abort+0x5ec>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d05e      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a47      	ldr	r2, [pc, #284]	@ (80029ec <HAL_DMA_Abort+0x5f0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d059      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a46      	ldr	r2, [pc, #280]	@ (80029f0 <HAL_DMA_Abort+0x5f4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d054      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a44      	ldr	r2, [pc, #272]	@ (80029f4 <HAL_DMA_Abort+0x5f8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d04f      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a43      	ldr	r2, [pc, #268]	@ (80029f8 <HAL_DMA_Abort+0x5fc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d04a      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a41      	ldr	r2, [pc, #260]	@ (80029fc <HAL_DMA_Abort+0x600>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d045      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a40      	ldr	r2, [pc, #256]	@ (8002a00 <HAL_DMA_Abort+0x604>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d040      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a3e      	ldr	r2, [pc, #248]	@ (8002a04 <HAL_DMA_Abort+0x608>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d03b      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a3d      	ldr	r2, [pc, #244]	@ (8002a08 <HAL_DMA_Abort+0x60c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d036      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a0c <HAL_DMA_Abort+0x610>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d031      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a3a      	ldr	r2, [pc, #232]	@ (8002a10 <HAL_DMA_Abort+0x614>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d02c      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a38      	ldr	r2, [pc, #224]	@ (8002a14 <HAL_DMA_Abort+0x618>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d027      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a37      	ldr	r2, [pc, #220]	@ (8002a18 <HAL_DMA_Abort+0x61c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d022      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a35      	ldr	r2, [pc, #212]	@ (8002a1c <HAL_DMA_Abort+0x620>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01d      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a34      	ldr	r2, [pc, #208]	@ (8002a20 <HAL_DMA_Abort+0x624>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d018      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a32      	ldr	r2, [pc, #200]	@ (8002a24 <HAL_DMA_Abort+0x628>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a31      	ldr	r2, [pc, #196]	@ (8002a28 <HAL_DMA_Abort+0x62c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00e      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2f      	ldr	r2, [pc, #188]	@ (8002a2c <HAL_DMA_Abort+0x630>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d009      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2e      	ldr	r2, [pc, #184]	@ (8002a30 <HAL_DMA_Abort+0x634>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_DMA_Abort+0x58a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2c      	ldr	r2, [pc, #176]	@ (8002a34 <HAL_DMA_Abort+0x638>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_DMA_Abort+0x58e>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_DMA_Abort+0x590>
 800298a:	2300      	movs	r3, #0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d015      	beq.n	80029bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002998:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00c      	beq.n	80029bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40020010 	.word	0x40020010
 80029dc:	40020028 	.word	0x40020028
 80029e0:	40020040 	.word	0x40020040
 80029e4:	40020058 	.word	0x40020058
 80029e8:	40020070 	.word	0x40020070
 80029ec:	40020088 	.word	0x40020088
 80029f0:	400200a0 	.word	0x400200a0
 80029f4:	400200b8 	.word	0x400200b8
 80029f8:	40020410 	.word	0x40020410
 80029fc:	40020428 	.word	0x40020428
 8002a00:	40020440 	.word	0x40020440
 8002a04:	40020458 	.word	0x40020458
 8002a08:	40020470 	.word	0x40020470
 8002a0c:	40020488 	.word	0x40020488
 8002a10:	400204a0 	.word	0x400204a0
 8002a14:	400204b8 	.word	0x400204b8
 8002a18:	58025408 	.word	0x58025408
 8002a1c:	5802541c 	.word	0x5802541c
 8002a20:	58025430 	.word	0x58025430
 8002a24:	58025444 	.word	0x58025444
 8002a28:	58025458 	.word	0x58025458
 8002a2c:	5802546c 	.word	0x5802546c
 8002a30:	58025480 	.word	0x58025480
 8002a34:	58025494 	.word	0x58025494

08002a38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e237      	b.n	8002eba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d004      	beq.n	8002a60 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2280      	movs	r2, #128	@ 0x80
 8002a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e22c      	b.n	8002eba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd8 <HAL_DMA_Abort_IT+0x1a0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d04a      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bdc <HAL_DMA_Abort_IT+0x1a4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d045      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a59      	ldr	r2, [pc, #356]	@ (8002be0 <HAL_DMA_Abort_IT+0x1a8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d040      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a58      	ldr	r2, [pc, #352]	@ (8002be4 <HAL_DMA_Abort_IT+0x1ac>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d03b      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a56      	ldr	r2, [pc, #344]	@ (8002be8 <HAL_DMA_Abort_IT+0x1b0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d036      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a55      	ldr	r2, [pc, #340]	@ (8002bec <HAL_DMA_Abort_IT+0x1b4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d031      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a53      	ldr	r2, [pc, #332]	@ (8002bf0 <HAL_DMA_Abort_IT+0x1b8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d02c      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a52      	ldr	r2, [pc, #328]	@ (8002bf4 <HAL_DMA_Abort_IT+0x1bc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d027      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a50      	ldr	r2, [pc, #320]	@ (8002bf8 <HAL_DMA_Abort_IT+0x1c0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d022      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a4f      	ldr	r2, [pc, #316]	@ (8002bfc <HAL_DMA_Abort_IT+0x1c4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d01d      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a4d      	ldr	r2, [pc, #308]	@ (8002c00 <HAL_DMA_Abort_IT+0x1c8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d018      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a4c      	ldr	r2, [pc, #304]	@ (8002c04 <HAL_DMA_Abort_IT+0x1cc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a4a      	ldr	r2, [pc, #296]	@ (8002c08 <HAL_DMA_Abort_IT+0x1d0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a49      	ldr	r2, [pc, #292]	@ (8002c0c <HAL_DMA_Abort_IT+0x1d4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a47      	ldr	r2, [pc, #284]	@ (8002c10 <HAL_DMA_Abort_IT+0x1d8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_DMA_Abort_IT+0xc8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a46      	ldr	r2, [pc, #280]	@ (8002c14 <HAL_DMA_Abort_IT+0x1dc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_DMA_Abort_IT+0xcc>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_DMA_Abort_IT+0xce>
 8002b04:	2300      	movs	r3, #0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8086 	beq.w	8002c18 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2f      	ldr	r2, [pc, #188]	@ (8002bd8 <HAL_DMA_Abort_IT+0x1a0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d04a      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a2e      	ldr	r2, [pc, #184]	@ (8002bdc <HAL_DMA_Abort_IT+0x1a4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d045      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002be0 <HAL_DMA_Abort_IT+0x1a8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d040      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2b      	ldr	r2, [pc, #172]	@ (8002be4 <HAL_DMA_Abort_IT+0x1ac>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d03b      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a29      	ldr	r2, [pc, #164]	@ (8002be8 <HAL_DMA_Abort_IT+0x1b0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d036      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a28      	ldr	r2, [pc, #160]	@ (8002bec <HAL_DMA_Abort_IT+0x1b4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d031      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a26      	ldr	r2, [pc, #152]	@ (8002bf0 <HAL_DMA_Abort_IT+0x1b8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d02c      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	@ (8002bf4 <HAL_DMA_Abort_IT+0x1bc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d027      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a23      	ldr	r2, [pc, #140]	@ (8002bf8 <HAL_DMA_Abort_IT+0x1c0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d022      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a22      	ldr	r2, [pc, #136]	@ (8002bfc <HAL_DMA_Abort_IT+0x1c4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d01d      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a20      	ldr	r2, [pc, #128]	@ (8002c00 <HAL_DMA_Abort_IT+0x1c8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d018      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1f      	ldr	r2, [pc, #124]	@ (8002c04 <HAL_DMA_Abort_IT+0x1cc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <HAL_DMA_Abort_IT+0x1d0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00e      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c0c <HAL_DMA_Abort_IT+0x1d4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d009      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c10 <HAL_DMA_Abort_IT+0x1d8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <HAL_DMA_Abort_IT+0x17c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a19      	ldr	r2, [pc, #100]	@ (8002c14 <HAL_DMA_Abort_IT+0x1dc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d108      	bne.n	8002bc6 <HAL_DMA_Abort_IT+0x18e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e178      	b.n	8002eb8 <HAL_DMA_Abort_IT+0x480>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e16f      	b.n	8002eb8 <HAL_DMA_Abort_IT+0x480>
 8002bd8:	40020010 	.word	0x40020010
 8002bdc:	40020028 	.word	0x40020028
 8002be0:	40020040 	.word	0x40020040
 8002be4:	40020058 	.word	0x40020058
 8002be8:	40020070 	.word	0x40020070
 8002bec:	40020088 	.word	0x40020088
 8002bf0:	400200a0 	.word	0x400200a0
 8002bf4:	400200b8 	.word	0x400200b8
 8002bf8:	40020410 	.word	0x40020410
 8002bfc:	40020428 	.word	0x40020428
 8002c00:	40020440 	.word	0x40020440
 8002c04:	40020458 	.word	0x40020458
 8002c08:	40020470 	.word	0x40020470
 8002c0c:	40020488 	.word	0x40020488
 8002c10:	400204a0 	.word	0x400204a0
 8002c14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 020e 	bic.w	r2, r2, #14
 8002c26:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6c      	ldr	r2, [pc, #432]	@ (8002de0 <HAL_DMA_Abort_IT+0x3a8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d04a      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6b      	ldr	r2, [pc, #428]	@ (8002de4 <HAL_DMA_Abort_IT+0x3ac>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d045      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a69      	ldr	r2, [pc, #420]	@ (8002de8 <HAL_DMA_Abort_IT+0x3b0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d040      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a68      	ldr	r2, [pc, #416]	@ (8002dec <HAL_DMA_Abort_IT+0x3b4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d03b      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a66      	ldr	r2, [pc, #408]	@ (8002df0 <HAL_DMA_Abort_IT+0x3b8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d036      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a65      	ldr	r2, [pc, #404]	@ (8002df4 <HAL_DMA_Abort_IT+0x3bc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d031      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a63      	ldr	r2, [pc, #396]	@ (8002df8 <HAL_DMA_Abort_IT+0x3c0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d02c      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a62      	ldr	r2, [pc, #392]	@ (8002dfc <HAL_DMA_Abort_IT+0x3c4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d027      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a60      	ldr	r2, [pc, #384]	@ (8002e00 <HAL_DMA_Abort_IT+0x3c8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d022      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5f      	ldr	r2, [pc, #380]	@ (8002e04 <HAL_DMA_Abort_IT+0x3cc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d01d      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a5d      	ldr	r2, [pc, #372]	@ (8002e08 <HAL_DMA_Abort_IT+0x3d0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d018      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a5c      	ldr	r2, [pc, #368]	@ (8002e0c <HAL_DMA_Abort_IT+0x3d4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a5a      	ldr	r2, [pc, #360]	@ (8002e10 <HAL_DMA_Abort_IT+0x3d8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a59      	ldr	r2, [pc, #356]	@ (8002e14 <HAL_DMA_Abort_IT+0x3dc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d009      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a57      	ldr	r2, [pc, #348]	@ (8002e18 <HAL_DMA_Abort_IT+0x3e0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d004      	beq.n	8002cc8 <HAL_DMA_Abort_IT+0x290>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a56      	ldr	r2, [pc, #344]	@ (8002e1c <HAL_DMA_Abort_IT+0x3e4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d108      	bne.n	8002cda <HAL_DMA_Abort_IT+0x2a2>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e007      	b.n	8002cea <HAL_DMA_Abort_IT+0x2b2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0201 	bic.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a3c      	ldr	r2, [pc, #240]	@ (8002de0 <HAL_DMA_Abort_IT+0x3a8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d072      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8002de4 <HAL_DMA_Abort_IT+0x3ac>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d06d      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a39      	ldr	r2, [pc, #228]	@ (8002de8 <HAL_DMA_Abort_IT+0x3b0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d068      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a37      	ldr	r2, [pc, #220]	@ (8002dec <HAL_DMA_Abort_IT+0x3b4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d063      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a36      	ldr	r2, [pc, #216]	@ (8002df0 <HAL_DMA_Abort_IT+0x3b8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d05e      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a34      	ldr	r2, [pc, #208]	@ (8002df4 <HAL_DMA_Abort_IT+0x3bc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d059      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a33      	ldr	r2, [pc, #204]	@ (8002df8 <HAL_DMA_Abort_IT+0x3c0>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d054      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a31      	ldr	r2, [pc, #196]	@ (8002dfc <HAL_DMA_Abort_IT+0x3c4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d04f      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a30      	ldr	r2, [pc, #192]	@ (8002e00 <HAL_DMA_Abort_IT+0x3c8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d04a      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a2e      	ldr	r2, [pc, #184]	@ (8002e04 <HAL_DMA_Abort_IT+0x3cc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d045      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2d      	ldr	r2, [pc, #180]	@ (8002e08 <HAL_DMA_Abort_IT+0x3d0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d040      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002e0c <HAL_DMA_Abort_IT+0x3d4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d03b      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2a      	ldr	r2, [pc, #168]	@ (8002e10 <HAL_DMA_Abort_IT+0x3d8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d036      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a28      	ldr	r2, [pc, #160]	@ (8002e14 <HAL_DMA_Abort_IT+0x3dc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d031      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a27      	ldr	r2, [pc, #156]	@ (8002e18 <HAL_DMA_Abort_IT+0x3e0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d02c      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a25      	ldr	r2, [pc, #148]	@ (8002e1c <HAL_DMA_Abort_IT+0x3e4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d027      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a24      	ldr	r2, [pc, #144]	@ (8002e20 <HAL_DMA_Abort_IT+0x3e8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d022      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a22      	ldr	r2, [pc, #136]	@ (8002e24 <HAL_DMA_Abort_IT+0x3ec>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01d      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a21      	ldr	r2, [pc, #132]	@ (8002e28 <HAL_DMA_Abort_IT+0x3f0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d018      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1f      	ldr	r2, [pc, #124]	@ (8002e2c <HAL_DMA_Abort_IT+0x3f4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e30 <HAL_DMA_Abort_IT+0x3f8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00e      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e34 <HAL_DMA_Abort_IT+0x3fc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1b      	ldr	r2, [pc, #108]	@ (8002e38 <HAL_DMA_Abort_IT+0x400>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_DMA_Abort_IT+0x3a2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	@ (8002e3c <HAL_DMA_Abort_IT+0x404>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d132      	bne.n	8002e40 <HAL_DMA_Abort_IT+0x408>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e031      	b.n	8002e42 <HAL_DMA_Abort_IT+0x40a>
 8002dde:	bf00      	nop
 8002de0:	40020010 	.word	0x40020010
 8002de4:	40020028 	.word	0x40020028
 8002de8:	40020040 	.word	0x40020040
 8002dec:	40020058 	.word	0x40020058
 8002df0:	40020070 	.word	0x40020070
 8002df4:	40020088 	.word	0x40020088
 8002df8:	400200a0 	.word	0x400200a0
 8002dfc:	400200b8 	.word	0x400200b8
 8002e00:	40020410 	.word	0x40020410
 8002e04:	40020428 	.word	0x40020428
 8002e08:	40020440 	.word	0x40020440
 8002e0c:	40020458 	.word	0x40020458
 8002e10:	40020470 	.word	0x40020470
 8002e14:	40020488 	.word	0x40020488
 8002e18:	400204a0 	.word	0x400204a0
 8002e1c:	400204b8 	.word	0x400204b8
 8002e20:	58025408 	.word	0x58025408
 8002e24:	5802541c 	.word	0x5802541c
 8002e28:	58025430 	.word	0x58025430
 8002e2c:	58025444 	.word	0x58025444
 8002e30:	58025458 	.word	0x58025458
 8002e34:	5802546c 	.word	0x5802546c
 8002e38:	58025480 	.word	0x58025480
 8002e3c:	58025494 	.word	0x58025494
 8002e40:	2300      	movs	r3, #0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d028      	beq.n	8002e98 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e54:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2201      	movs	r2, #1
 8002e66:	409a      	lsls	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e74:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00c      	beq.n	8002e98 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e8c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e96:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop

08002ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ed0:	4b67      	ldr	r3, [pc, #412]	@ (8003070 <HAL_DMA_IRQHandler+0x1ac>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a67      	ldr	r2, [pc, #412]	@ (8003074 <HAL_DMA_IRQHandler+0x1b0>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	0a9b      	lsrs	r3, r3, #10
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a5f      	ldr	r2, [pc, #380]	@ (8003078 <HAL_DMA_IRQHandler+0x1b4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d04a      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5d      	ldr	r2, [pc, #372]	@ (800307c <HAL_DMA_IRQHandler+0x1b8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d045      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a5c      	ldr	r2, [pc, #368]	@ (8003080 <HAL_DMA_IRQHandler+0x1bc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d040      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a5a      	ldr	r2, [pc, #360]	@ (8003084 <HAL_DMA_IRQHandler+0x1c0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d03b      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a59      	ldr	r2, [pc, #356]	@ (8003088 <HAL_DMA_IRQHandler+0x1c4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d036      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a57      	ldr	r2, [pc, #348]	@ (800308c <HAL_DMA_IRQHandler+0x1c8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d031      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a56      	ldr	r2, [pc, #344]	@ (8003090 <HAL_DMA_IRQHandler+0x1cc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d02c      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a54      	ldr	r2, [pc, #336]	@ (8003094 <HAL_DMA_IRQHandler+0x1d0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d027      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a53      	ldr	r2, [pc, #332]	@ (8003098 <HAL_DMA_IRQHandler+0x1d4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d022      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a51      	ldr	r2, [pc, #324]	@ (800309c <HAL_DMA_IRQHandler+0x1d8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01d      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a50      	ldr	r2, [pc, #320]	@ (80030a0 <HAL_DMA_IRQHandler+0x1dc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d018      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a4e      	ldr	r2, [pc, #312]	@ (80030a4 <HAL_DMA_IRQHandler+0x1e0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4d      	ldr	r2, [pc, #308]	@ (80030a8 <HAL_DMA_IRQHandler+0x1e4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00e      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80030ac <HAL_DMA_IRQHandler+0x1e8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d009      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a4a      	ldr	r2, [pc, #296]	@ (80030b0 <HAL_DMA_IRQHandler+0x1ec>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_DMA_IRQHandler+0xd2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a48      	ldr	r2, [pc, #288]	@ (80030b4 <HAL_DMA_IRQHandler+0x1f0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <HAL_DMA_IRQHandler+0xd6>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_DMA_IRQHandler+0xd8>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 842b 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2208      	movs	r2, #8
 8002fac:	409a      	lsls	r2, r3
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80a2 	beq.w	80030fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2e      	ldr	r2, [pc, #184]	@ (8003078 <HAL_DMA_IRQHandler+0x1b4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04a      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800307c <HAL_DMA_IRQHandler+0x1b8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d045      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8003080 <HAL_DMA_IRQHandler+0x1bc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d040      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2a      	ldr	r2, [pc, #168]	@ (8003084 <HAL_DMA_IRQHandler+0x1c0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d03b      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a28      	ldr	r2, [pc, #160]	@ (8003088 <HAL_DMA_IRQHandler+0x1c4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d036      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a27      	ldr	r2, [pc, #156]	@ (800308c <HAL_DMA_IRQHandler+0x1c8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d031      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a25      	ldr	r2, [pc, #148]	@ (8003090 <HAL_DMA_IRQHandler+0x1cc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02c      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a24      	ldr	r2, [pc, #144]	@ (8003094 <HAL_DMA_IRQHandler+0x1d0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d027      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a22      	ldr	r2, [pc, #136]	@ (8003098 <HAL_DMA_IRQHandler+0x1d4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a21      	ldr	r2, [pc, #132]	@ (800309c <HAL_DMA_IRQHandler+0x1d8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1f      	ldr	r2, [pc, #124]	@ (80030a0 <HAL_DMA_IRQHandler+0x1dc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1e      	ldr	r2, [pc, #120]	@ (80030a4 <HAL_DMA_IRQHandler+0x1e0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1c      	ldr	r2, [pc, #112]	@ (80030a8 <HAL_DMA_IRQHandler+0x1e4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1b      	ldr	r2, [pc, #108]	@ (80030ac <HAL_DMA_IRQHandler+0x1e8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a19      	ldr	r2, [pc, #100]	@ (80030b0 <HAL_DMA_IRQHandler+0x1ec>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_DMA_IRQHandler+0x194>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a18      	ldr	r2, [pc, #96]	@ (80030b4 <HAL_DMA_IRQHandler+0x1f0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d12f      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x1f4>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e02e      	b.n	80030cc <HAL_DMA_IRQHandler+0x208>
 800306e:	bf00      	nop
 8003070:	24000000 	.word	0x24000000
 8003074:	1b4e81b5 	.word	0x1b4e81b5
 8003078:	40020010 	.word	0x40020010
 800307c:	40020028 	.word	0x40020028
 8003080:	40020040 	.word	0x40020040
 8003084:	40020058 	.word	0x40020058
 8003088:	40020070 	.word	0x40020070
 800308c:	40020088 	.word	0x40020088
 8003090:	400200a0 	.word	0x400200a0
 8003094:	400200b8 	.word	0x400200b8
 8003098:	40020410 	.word	0x40020410
 800309c:	40020428 	.word	0x40020428
 80030a0:	40020440 	.word	0x40020440
 80030a4:	40020458 	.word	0x40020458
 80030a8:	40020470 	.word	0x40020470
 80030ac:	40020488 	.word	0x40020488
 80030b0:	400204a0 	.word	0x400204a0
 80030b4:	400204b8 	.word	0x400204b8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d015      	beq.n	80030fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0204 	bic.w	r2, r2, #4
 80030de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	2208      	movs	r2, #8
 80030ea:	409a      	lsls	r2, r3
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d06e      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a69      	ldr	r2, [pc, #420]	@ (80032bc <HAL_DMA_IRQHandler+0x3f8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d04a      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a67      	ldr	r2, [pc, #412]	@ (80032c0 <HAL_DMA_IRQHandler+0x3fc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d045      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a66      	ldr	r2, [pc, #408]	@ (80032c4 <HAL_DMA_IRQHandler+0x400>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d040      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a64      	ldr	r2, [pc, #400]	@ (80032c8 <HAL_DMA_IRQHandler+0x404>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d03b      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a63      	ldr	r2, [pc, #396]	@ (80032cc <HAL_DMA_IRQHandler+0x408>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d036      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a61      	ldr	r2, [pc, #388]	@ (80032d0 <HAL_DMA_IRQHandler+0x40c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a60      	ldr	r2, [pc, #384]	@ (80032d4 <HAL_DMA_IRQHandler+0x410>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5e      	ldr	r2, [pc, #376]	@ (80032d8 <HAL_DMA_IRQHandler+0x414>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5d      	ldr	r2, [pc, #372]	@ (80032dc <HAL_DMA_IRQHandler+0x418>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5b      	ldr	r2, [pc, #364]	@ (80032e0 <HAL_DMA_IRQHandler+0x41c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01d      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a5a      	ldr	r2, [pc, #360]	@ (80032e4 <HAL_DMA_IRQHandler+0x420>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d018      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a58      	ldr	r2, [pc, #352]	@ (80032e8 <HAL_DMA_IRQHandler+0x424>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d013      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a57      	ldr	r2, [pc, #348]	@ (80032ec <HAL_DMA_IRQHandler+0x428>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a55      	ldr	r2, [pc, #340]	@ (80032f0 <HAL_DMA_IRQHandler+0x42c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a54      	ldr	r2, [pc, #336]	@ (80032f4 <HAL_DMA_IRQHandler+0x430>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2ee>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a52      	ldr	r2, [pc, #328]	@ (80032f8 <HAL_DMA_IRQHandler+0x434>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10a      	bne.n	80031c8 <HAL_DMA_IRQHandler+0x304>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e003      	b.n	80031d0 <HAL_DMA_IRQHandler+0x30c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2300      	movs	r3, #0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	2201      	movs	r2, #1
 80031de:	409a      	lsls	r2, r3
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e8:	f043 0202 	orr.w	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2204      	movs	r2, #4
 80031fa:	409a      	lsls	r2, r3
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 808f 	beq.w	8003324 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2c      	ldr	r2, [pc, #176]	@ (80032bc <HAL_DMA_IRQHandler+0x3f8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d04a      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2a      	ldr	r2, [pc, #168]	@ (80032c0 <HAL_DMA_IRQHandler+0x3fc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d045      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a29      	ldr	r2, [pc, #164]	@ (80032c4 <HAL_DMA_IRQHandler+0x400>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d040      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a27      	ldr	r2, [pc, #156]	@ (80032c8 <HAL_DMA_IRQHandler+0x404>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d03b      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a26      	ldr	r2, [pc, #152]	@ (80032cc <HAL_DMA_IRQHandler+0x408>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d036      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a24      	ldr	r2, [pc, #144]	@ (80032d0 <HAL_DMA_IRQHandler+0x40c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d031      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a23      	ldr	r2, [pc, #140]	@ (80032d4 <HAL_DMA_IRQHandler+0x410>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d02c      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a21      	ldr	r2, [pc, #132]	@ (80032d8 <HAL_DMA_IRQHandler+0x414>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d027      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a20      	ldr	r2, [pc, #128]	@ (80032dc <HAL_DMA_IRQHandler+0x418>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d022      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1e      	ldr	r2, [pc, #120]	@ (80032e0 <HAL_DMA_IRQHandler+0x41c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01d      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1d      	ldr	r2, [pc, #116]	@ (80032e4 <HAL_DMA_IRQHandler+0x420>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d018      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1b      	ldr	r2, [pc, #108]	@ (80032e8 <HAL_DMA_IRQHandler+0x424>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1a      	ldr	r2, [pc, #104]	@ (80032ec <HAL_DMA_IRQHandler+0x428>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00e      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a18      	ldr	r2, [pc, #96]	@ (80032f0 <HAL_DMA_IRQHandler+0x42c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a17      	ldr	r2, [pc, #92]	@ (80032f4 <HAL_DMA_IRQHandler+0x430>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d004      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x3e2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a15      	ldr	r2, [pc, #84]	@ (80032f8 <HAL_DMA_IRQHandler+0x434>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d12a      	bne.n	80032fc <HAL_DMA_IRQHandler+0x438>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e023      	b.n	8003304 <HAL_DMA_IRQHandler+0x440>
 80032bc:	40020010 	.word	0x40020010
 80032c0:	40020028 	.word	0x40020028
 80032c4:	40020040 	.word	0x40020040
 80032c8:	40020058 	.word	0x40020058
 80032cc:	40020070 	.word	0x40020070
 80032d0:	40020088 	.word	0x40020088
 80032d4:	400200a0 	.word	0x400200a0
 80032d8:	400200b8 	.word	0x400200b8
 80032dc:	40020410 	.word	0x40020410
 80032e0:	40020428 	.word	0x40020428
 80032e4:	40020440 	.word	0x40020440
 80032e8:	40020458 	.word	0x40020458
 80032ec:	40020470 	.word	0x40020470
 80032f0:	40020488 	.word	0x40020488
 80032f4:	400204a0 	.word	0x400204a0
 80032f8:	400204b8 	.word	0x400204b8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00d      	beq.n	8003324 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2204      	movs	r2, #4
 8003312:	409a      	lsls	r2, r3
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331c:	f043 0204 	orr.w	r2, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2210      	movs	r2, #16
 800332e:	409a      	lsls	r2, r3
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a6 	beq.w	8003486 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a85      	ldr	r2, [pc, #532]	@ (8003554 <HAL_DMA_IRQHandler+0x690>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d04a      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a83      	ldr	r2, [pc, #524]	@ (8003558 <HAL_DMA_IRQHandler+0x694>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d045      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a82      	ldr	r2, [pc, #520]	@ (800355c <HAL_DMA_IRQHandler+0x698>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d040      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a80      	ldr	r2, [pc, #512]	@ (8003560 <HAL_DMA_IRQHandler+0x69c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d03b      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a7f      	ldr	r2, [pc, #508]	@ (8003564 <HAL_DMA_IRQHandler+0x6a0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d036      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a7d      	ldr	r2, [pc, #500]	@ (8003568 <HAL_DMA_IRQHandler+0x6a4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d031      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7c      	ldr	r2, [pc, #496]	@ (800356c <HAL_DMA_IRQHandler+0x6a8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d02c      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a7a      	ldr	r2, [pc, #488]	@ (8003570 <HAL_DMA_IRQHandler+0x6ac>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d027      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a79      	ldr	r2, [pc, #484]	@ (8003574 <HAL_DMA_IRQHandler+0x6b0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d022      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a77      	ldr	r2, [pc, #476]	@ (8003578 <HAL_DMA_IRQHandler+0x6b4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01d      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a76      	ldr	r2, [pc, #472]	@ (800357c <HAL_DMA_IRQHandler+0x6b8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d018      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a74      	ldr	r2, [pc, #464]	@ (8003580 <HAL_DMA_IRQHandler+0x6bc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a73      	ldr	r2, [pc, #460]	@ (8003584 <HAL_DMA_IRQHandler+0x6c0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00e      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a71      	ldr	r2, [pc, #452]	@ (8003588 <HAL_DMA_IRQHandler+0x6c4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a70      	ldr	r2, [pc, #448]	@ (800358c <HAL_DMA_IRQHandler+0x6c8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_DMA_IRQHandler+0x516>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003590 <HAL_DMA_IRQHandler+0x6cc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10a      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x52c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf14      	ite	ne
 80033e8:	2301      	movne	r3, #1
 80033ea:	2300      	moveq	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e009      	b.n	8003404 <HAL_DMA_IRQHandler+0x540>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bf14      	ite	ne
 80033fe:	2301      	movne	r3, #1
 8003400:	2300      	moveq	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d03e      	beq.n	8003486 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2210      	movs	r2, #16
 8003412:	409a      	lsls	r2, r3
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d018      	beq.n	8003458 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d108      	bne.n	8003446 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d024      	beq.n	8003486 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
 8003444:	e01f      	b.n	8003486 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01b      	beq.n	8003486 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
 8003456:	e016      	b.n	8003486 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d107      	bne.n	8003476 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0208 	bic.w	r2, r2, #8
 8003474:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	2220      	movs	r2, #32
 8003490:	409a      	lsls	r2, r3
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8110 	beq.w	80036bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003554 <HAL_DMA_IRQHandler+0x690>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d04a      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003558 <HAL_DMA_IRQHandler+0x694>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d045      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a29      	ldr	r2, [pc, #164]	@ (800355c <HAL_DMA_IRQHandler+0x698>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d040      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a28      	ldr	r2, [pc, #160]	@ (8003560 <HAL_DMA_IRQHandler+0x69c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d03b      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a26      	ldr	r2, [pc, #152]	@ (8003564 <HAL_DMA_IRQHandler+0x6a0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d036      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a25      	ldr	r2, [pc, #148]	@ (8003568 <HAL_DMA_IRQHandler+0x6a4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d031      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a23      	ldr	r2, [pc, #140]	@ (800356c <HAL_DMA_IRQHandler+0x6a8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d02c      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a22      	ldr	r2, [pc, #136]	@ (8003570 <HAL_DMA_IRQHandler+0x6ac>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d027      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a20      	ldr	r2, [pc, #128]	@ (8003574 <HAL_DMA_IRQHandler+0x6b0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d022      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003578 <HAL_DMA_IRQHandler+0x6b4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d01d      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <HAL_DMA_IRQHandler+0x6b8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d018      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1c      	ldr	r2, [pc, #112]	@ (8003580 <HAL_DMA_IRQHandler+0x6bc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d013      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1a      	ldr	r2, [pc, #104]	@ (8003584 <HAL_DMA_IRQHandler+0x6c0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00e      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a19      	ldr	r2, [pc, #100]	@ (8003588 <HAL_DMA_IRQHandler+0x6c4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d009      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a17      	ldr	r2, [pc, #92]	@ (800358c <HAL_DMA_IRQHandler+0x6c8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d004      	beq.n	800353c <HAL_DMA_IRQHandler+0x678>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a16      	ldr	r2, [pc, #88]	@ (8003590 <HAL_DMA_IRQHandler+0x6cc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d12b      	bne.n	8003594 <HAL_DMA_IRQHandler+0x6d0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e02a      	b.n	80035a8 <HAL_DMA_IRQHandler+0x6e4>
 8003552:	bf00      	nop
 8003554:	40020010 	.word	0x40020010
 8003558:	40020028 	.word	0x40020028
 800355c:	40020040 	.word	0x40020040
 8003560:	40020058 	.word	0x40020058
 8003564:	40020070 	.word	0x40020070
 8003568:	40020088 	.word	0x40020088
 800356c:	400200a0 	.word	0x400200a0
 8003570:	400200b8 	.word	0x400200b8
 8003574:	40020410 	.word	0x40020410
 8003578:	40020428 	.word	0x40020428
 800357c:	40020440 	.word	0x40020440
 8003580:	40020458 	.word	0x40020458
 8003584:	40020470 	.word	0x40020470
 8003588:	40020488 	.word	0x40020488
 800358c:	400204a0 	.word	0x400204a0
 8003590:	400204b8 	.word	0x400204b8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8087 	beq.w	80036bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2220      	movs	r2, #32
 80035b8:	409a      	lsls	r2, r3
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d139      	bne.n	800363e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0216 	bic.w	r2, r2, #22
 80035d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <HAL_DMA_IRQHandler+0x736>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0208 	bic.w	r2, r2, #8
 8003608:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	223f      	movs	r2, #63	@ 0x3f
 8003614:	409a      	lsls	r2, r3
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 834a 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
          }
          return;
 800363c:	e344      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d018      	beq.n	800367e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d108      	bne.n	800366c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	2b00      	cmp	r3, #0
 8003660:	d02c      	beq.n	80036bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
 800366a:	e027      	b.n	80036bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d023      	beq.n	80036bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
 800367c:	e01e      	b.n	80036bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10f      	bne.n	80036ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0210 	bic.w	r2, r2, #16
 800369a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8306 	beq.w	8003cd2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8088 	beq.w	80037e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2204      	movs	r2, #4
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a7a      	ldr	r2, [pc, #488]	@ (80038cc <HAL_DMA_IRQHandler+0xa08>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d04a      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a79      	ldr	r2, [pc, #484]	@ (80038d0 <HAL_DMA_IRQHandler+0xa0c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d045      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a77      	ldr	r2, [pc, #476]	@ (80038d4 <HAL_DMA_IRQHandler+0xa10>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d040      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a76      	ldr	r2, [pc, #472]	@ (80038d8 <HAL_DMA_IRQHandler+0xa14>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d03b      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a74      	ldr	r2, [pc, #464]	@ (80038dc <HAL_DMA_IRQHandler+0xa18>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d036      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a73      	ldr	r2, [pc, #460]	@ (80038e0 <HAL_DMA_IRQHandler+0xa1c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d031      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a71      	ldr	r2, [pc, #452]	@ (80038e4 <HAL_DMA_IRQHandler+0xa20>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d02c      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a70      	ldr	r2, [pc, #448]	@ (80038e8 <HAL_DMA_IRQHandler+0xa24>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d027      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a6e      	ldr	r2, [pc, #440]	@ (80038ec <HAL_DMA_IRQHandler+0xa28>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d022      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6d      	ldr	r2, [pc, #436]	@ (80038f0 <HAL_DMA_IRQHandler+0xa2c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d01d      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a6b      	ldr	r2, [pc, #428]	@ (80038f4 <HAL_DMA_IRQHandler+0xa30>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a6a      	ldr	r2, [pc, #424]	@ (80038f8 <HAL_DMA_IRQHandler+0xa34>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a68      	ldr	r2, [pc, #416]	@ (80038fc <HAL_DMA_IRQHandler+0xa38>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a67      	ldr	r2, [pc, #412]	@ (8003900 <HAL_DMA_IRQHandler+0xa3c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a65      	ldr	r2, [pc, #404]	@ (8003904 <HAL_DMA_IRQHandler+0xa40>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_DMA_IRQHandler+0x8b8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a64      	ldr	r2, [pc, #400]	@ (8003908 <HAL_DMA_IRQHandler+0xa44>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d108      	bne.n	800378e <HAL_DMA_IRQHandler+0x8ca>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e007      	b.n	800379e <HAL_DMA_IRQHandler+0x8da>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3301      	adds	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d307      	bcc.n	80037ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f2      	bne.n	800379e <HAL_DMA_IRQHandler+0x8da>
 80037b8:	e000      	b.n	80037bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80037ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d004      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2203      	movs	r2, #3
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80037d2:	e003      	b.n	80037dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8272 	beq.w	8003cd2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
 80037f6:	e26c      	b.n	8003cd2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a43      	ldr	r2, [pc, #268]	@ (800390c <HAL_DMA_IRQHandler+0xa48>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d022      	beq.n	8003848 <HAL_DMA_IRQHandler+0x984>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a42      	ldr	r2, [pc, #264]	@ (8003910 <HAL_DMA_IRQHandler+0xa4c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d01d      	beq.n	8003848 <HAL_DMA_IRQHandler+0x984>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a40      	ldr	r2, [pc, #256]	@ (8003914 <HAL_DMA_IRQHandler+0xa50>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d018      	beq.n	8003848 <HAL_DMA_IRQHandler+0x984>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a3f      	ldr	r2, [pc, #252]	@ (8003918 <HAL_DMA_IRQHandler+0xa54>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d013      	beq.n	8003848 <HAL_DMA_IRQHandler+0x984>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a3d      	ldr	r2, [pc, #244]	@ (800391c <HAL_DMA_IRQHandler+0xa58>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00e      	beq.n	8003848 <HAL_DMA_IRQHandler+0x984>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a3c      	ldr	r2, [pc, #240]	@ (8003920 <HAL_DMA_IRQHandler+0xa5c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d009      	beq.n	8003848 <HAL_DMA_IRQHandler+0x984>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a3a      	ldr	r2, [pc, #232]	@ (8003924 <HAL_DMA_IRQHandler+0xa60>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_DMA_IRQHandler+0x984>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a39      	ldr	r2, [pc, #228]	@ (8003928 <HAL_DMA_IRQHandler+0xa64>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_DMA_IRQHandler+0x988>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_DMA_IRQHandler+0x98a>
 800384c:	2300      	movs	r3, #0
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 823f 	beq.w	8003cd2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	2204      	movs	r2, #4
 8003866:	409a      	lsls	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80cd 	beq.w	8003a0c <HAL_DMA_IRQHandler+0xb48>
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80c7 	beq.w	8003a0c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	2204      	movs	r2, #4
 8003888:	409a      	lsls	r2, r3
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d049      	beq.n	800392c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8210 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038b4:	e20a      	b.n	8003ccc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8206 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038c8:	e200      	b.n	8003ccc <HAL_DMA_IRQHandler+0xe08>
 80038ca:	bf00      	nop
 80038cc:	40020010 	.word	0x40020010
 80038d0:	40020028 	.word	0x40020028
 80038d4:	40020040 	.word	0x40020040
 80038d8:	40020058 	.word	0x40020058
 80038dc:	40020070 	.word	0x40020070
 80038e0:	40020088 	.word	0x40020088
 80038e4:	400200a0 	.word	0x400200a0
 80038e8:	400200b8 	.word	0x400200b8
 80038ec:	40020410 	.word	0x40020410
 80038f0:	40020428 	.word	0x40020428
 80038f4:	40020440 	.word	0x40020440
 80038f8:	40020458 	.word	0x40020458
 80038fc:	40020470 	.word	0x40020470
 8003900:	40020488 	.word	0x40020488
 8003904:	400204a0 	.word	0x400204a0
 8003908:	400204b8 	.word	0x400204b8
 800390c:	58025408 	.word	0x58025408
 8003910:	5802541c 	.word	0x5802541c
 8003914:	58025430 	.word	0x58025430
 8003918:	58025444 	.word	0x58025444
 800391c:	58025458 	.word	0x58025458
 8003920:	5802546c 	.word	0x5802546c
 8003924:	58025480 	.word	0x58025480
 8003928:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d160      	bne.n	80039f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a7f      	ldr	r2, [pc, #508]	@ (8003b38 <HAL_DMA_IRQHandler+0xc74>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d04a      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a7d      	ldr	r2, [pc, #500]	@ (8003b3c <HAL_DMA_IRQHandler+0xc78>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d045      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b40 <HAL_DMA_IRQHandler+0xc7c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d040      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a7a      	ldr	r2, [pc, #488]	@ (8003b44 <HAL_DMA_IRQHandler+0xc80>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d03b      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a79      	ldr	r2, [pc, #484]	@ (8003b48 <HAL_DMA_IRQHandler+0xc84>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d036      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a77      	ldr	r2, [pc, #476]	@ (8003b4c <HAL_DMA_IRQHandler+0xc88>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d031      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a76      	ldr	r2, [pc, #472]	@ (8003b50 <HAL_DMA_IRQHandler+0xc8c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d02c      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a74      	ldr	r2, [pc, #464]	@ (8003b54 <HAL_DMA_IRQHandler+0xc90>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d027      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a73      	ldr	r2, [pc, #460]	@ (8003b58 <HAL_DMA_IRQHandler+0xc94>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d022      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a71      	ldr	r2, [pc, #452]	@ (8003b5c <HAL_DMA_IRQHandler+0xc98>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01d      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a70      	ldr	r2, [pc, #448]	@ (8003b60 <HAL_DMA_IRQHandler+0xc9c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d018      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003b64 <HAL_DMA_IRQHandler+0xca0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003b68 <HAL_DMA_IRQHandler+0xca4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00e      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a6b      	ldr	r2, [pc, #428]	@ (8003b6c <HAL_DMA_IRQHandler+0xca8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d009      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a6a      	ldr	r2, [pc, #424]	@ (8003b70 <HAL_DMA_IRQHandler+0xcac>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d004      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xb12>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a68      	ldr	r2, [pc, #416]	@ (8003b74 <HAL_DMA_IRQHandler+0xcb0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d108      	bne.n	80039e8 <HAL_DMA_IRQHandler+0xb24>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0208 	bic.w	r2, r2, #8
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e007      	b.n	80039f8 <HAL_DMA_IRQHandler+0xb34>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0204 	bic.w	r2, r2, #4
 80039f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8165 	beq.w	8003ccc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a0a:	e15f      	b.n	8003ccc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2202      	movs	r2, #2
 8003a16:	409a      	lsls	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80c5 	beq.w	8003bac <HAL_DMA_IRQHandler+0xce8>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80bf 	beq.w	8003bac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	2202      	movs	r2, #2
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 813a 	beq.w	8003cd0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a64:	e134      	b.n	8003cd0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8130 	beq.w	8003cd0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a78:	e12a      	b.n	8003cd0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f040 8089 	bne.w	8003b98 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b38 <HAL_DMA_IRQHandler+0xc74>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d04a      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a29      	ldr	r2, [pc, #164]	@ (8003b3c <HAL_DMA_IRQHandler+0xc78>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d045      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a28      	ldr	r2, [pc, #160]	@ (8003b40 <HAL_DMA_IRQHandler+0xc7c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d040      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a26      	ldr	r2, [pc, #152]	@ (8003b44 <HAL_DMA_IRQHandler+0xc80>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d03b      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a25      	ldr	r2, [pc, #148]	@ (8003b48 <HAL_DMA_IRQHandler+0xc84>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d036      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a23      	ldr	r2, [pc, #140]	@ (8003b4c <HAL_DMA_IRQHandler+0xc88>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d031      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a22      	ldr	r2, [pc, #136]	@ (8003b50 <HAL_DMA_IRQHandler+0xc8c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d02c      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a20      	ldr	r2, [pc, #128]	@ (8003b54 <HAL_DMA_IRQHandler+0xc90>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d027      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1f      	ldr	r2, [pc, #124]	@ (8003b58 <HAL_DMA_IRQHandler+0xc94>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d022      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b5c <HAL_DMA_IRQHandler+0xc98>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01d      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1c      	ldr	r2, [pc, #112]	@ (8003b60 <HAL_DMA_IRQHandler+0xc9c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d018      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b64 <HAL_DMA_IRQHandler+0xca0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a19      	ldr	r2, [pc, #100]	@ (8003b68 <HAL_DMA_IRQHandler+0xca4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a17      	ldr	r2, [pc, #92]	@ (8003b6c <HAL_DMA_IRQHandler+0xca8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a16      	ldr	r2, [pc, #88]	@ (8003b70 <HAL_DMA_IRQHandler+0xcac>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xc62>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a14      	ldr	r2, [pc, #80]	@ (8003b74 <HAL_DMA_IRQHandler+0xcb0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d128      	bne.n	8003b78 <HAL_DMA_IRQHandler+0xcb4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0214 	bic.w	r2, r2, #20
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e027      	b.n	8003b88 <HAL_DMA_IRQHandler+0xcc4>
 8003b38:	40020010 	.word	0x40020010
 8003b3c:	40020028 	.word	0x40020028
 8003b40:	40020040 	.word	0x40020040
 8003b44:	40020058 	.word	0x40020058
 8003b48:	40020070 	.word	0x40020070
 8003b4c:	40020088 	.word	0x40020088
 8003b50:	400200a0 	.word	0x400200a0
 8003b54:	400200b8 	.word	0x400200b8
 8003b58:	40020410 	.word	0x40020410
 8003b5c:	40020428 	.word	0x40020428
 8003b60:	40020440 	.word	0x40020440
 8003b64:	40020458 	.word	0x40020458
 8003b68:	40020470 	.word	0x40020470
 8003b6c:	40020488 	.word	0x40020488
 8003b70:	400204a0 	.word	0x400204a0
 8003b74:	400204b8 	.word	0x400204b8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 020a 	bic.w	r2, r2, #10
 8003b86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8097 	beq.w	8003cd0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003baa:	e091      	b.n	8003cd0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8088 	beq.w	8003cd2 <HAL_DMA_IRQHandler+0xe0e>
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8082 	beq.w	8003cd2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a41      	ldr	r2, [pc, #260]	@ (8003cd8 <HAL_DMA_IRQHandler+0xe14>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d04a      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a3f      	ldr	r2, [pc, #252]	@ (8003cdc <HAL_DMA_IRQHandler+0xe18>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d045      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ce0 <HAL_DMA_IRQHandler+0xe1c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d040      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce4 <HAL_DMA_IRQHandler+0xe20>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d03b      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce8 <HAL_DMA_IRQHandler+0xe24>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d036      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a39      	ldr	r2, [pc, #228]	@ (8003cec <HAL_DMA_IRQHandler+0xe28>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d031      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a38      	ldr	r2, [pc, #224]	@ (8003cf0 <HAL_DMA_IRQHandler+0xe2c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d02c      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a36      	ldr	r2, [pc, #216]	@ (8003cf4 <HAL_DMA_IRQHandler+0xe30>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d027      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a35      	ldr	r2, [pc, #212]	@ (8003cf8 <HAL_DMA_IRQHandler+0xe34>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d022      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a33      	ldr	r2, [pc, #204]	@ (8003cfc <HAL_DMA_IRQHandler+0xe38>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01d      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a32      	ldr	r2, [pc, #200]	@ (8003d00 <HAL_DMA_IRQHandler+0xe3c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d018      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a30      	ldr	r2, [pc, #192]	@ (8003d04 <HAL_DMA_IRQHandler+0xe40>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d08 <HAL_DMA_IRQHandler+0xe44>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a2d      	ldr	r2, [pc, #180]	@ (8003d0c <HAL_DMA_IRQHandler+0xe48>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d10 <HAL_DMA_IRQHandler+0xe4c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xdaa>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <HAL_DMA_IRQHandler+0xe50>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d108      	bne.n	8003c80 <HAL_DMA_IRQHandler+0xdbc>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 021c 	bic.w	r2, r2, #28
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	e007      	b.n	8003c90 <HAL_DMA_IRQHandler+0xdcc>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 020e 	bic.w	r2, r2, #14
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2201      	movs	r2, #1
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	4798      	blx	r3
 8003cc6:	e004      	b.n	8003cd2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003cc8:	bf00      	nop
 8003cca:	e002      	b.n	8003cd2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ccc:	bf00      	nop
 8003cce:	e000      	b.n	8003cd2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003cd2:	3728      	adds	r7, #40	@ 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40020010 	.word	0x40020010
 8003cdc:	40020028 	.word	0x40020028
 8003ce0:	40020040 	.word	0x40020040
 8003ce4:	40020058 	.word	0x40020058
 8003ce8:	40020070 	.word	0x40020070
 8003cec:	40020088 	.word	0x40020088
 8003cf0:	400200a0 	.word	0x400200a0
 8003cf4:	400200b8 	.word	0x400200b8
 8003cf8:	40020410 	.word	0x40020410
 8003cfc:	40020428 	.word	0x40020428
 8003d00:	40020440 	.word	0x40020440
 8003d04:	40020458 	.word	0x40020458
 8003d08:	40020470 	.word	0x40020470
 8003d0c:	40020488 	.word	0x40020488
 8003d10:	400204a0 	.word	0x400204a0
 8003d14:	400204b8 	.word	0x400204b8

08003d18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d30:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7f      	ldr	r2, [pc, #508]	@ (8003f34 <DMA_SetConfig+0x21c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d072      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7d      	ldr	r2, [pc, #500]	@ (8003f38 <DMA_SetConfig+0x220>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d06d      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f3c <DMA_SetConfig+0x224>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d068      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7a      	ldr	r2, [pc, #488]	@ (8003f40 <DMA_SetConfig+0x228>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d063      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a79      	ldr	r2, [pc, #484]	@ (8003f44 <DMA_SetConfig+0x22c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d05e      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a77      	ldr	r2, [pc, #476]	@ (8003f48 <DMA_SetConfig+0x230>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d059      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a76      	ldr	r2, [pc, #472]	@ (8003f4c <DMA_SetConfig+0x234>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d054      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a74      	ldr	r2, [pc, #464]	@ (8003f50 <DMA_SetConfig+0x238>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d04f      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a73      	ldr	r2, [pc, #460]	@ (8003f54 <DMA_SetConfig+0x23c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d04a      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a71      	ldr	r2, [pc, #452]	@ (8003f58 <DMA_SetConfig+0x240>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d045      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a70      	ldr	r2, [pc, #448]	@ (8003f5c <DMA_SetConfig+0x244>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d040      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <DMA_SetConfig+0x248>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d03b      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6d      	ldr	r2, [pc, #436]	@ (8003f64 <DMA_SetConfig+0x24c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d036      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f68 <DMA_SetConfig+0x250>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d031      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f6c <DMA_SetConfig+0x254>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d02c      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a68      	ldr	r2, [pc, #416]	@ (8003f70 <DMA_SetConfig+0x258>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d027      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a67      	ldr	r2, [pc, #412]	@ (8003f74 <DMA_SetConfig+0x25c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d022      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a65      	ldr	r2, [pc, #404]	@ (8003f78 <DMA_SetConfig+0x260>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01d      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a64      	ldr	r2, [pc, #400]	@ (8003f7c <DMA_SetConfig+0x264>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d018      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a62      	ldr	r2, [pc, #392]	@ (8003f80 <DMA_SetConfig+0x268>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a61      	ldr	r2, [pc, #388]	@ (8003f84 <DMA_SetConfig+0x26c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00e      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a5f      	ldr	r2, [pc, #380]	@ (8003f88 <DMA_SetConfig+0x270>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a5e      	ldr	r2, [pc, #376]	@ (8003f8c <DMA_SetConfig+0x274>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <DMA_SetConfig+0x10a>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a5c      	ldr	r2, [pc, #368]	@ (8003f90 <DMA_SetConfig+0x278>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <DMA_SetConfig+0x10e>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <DMA_SetConfig+0x110>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00d      	beq.n	8003e48 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e46:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a39      	ldr	r2, [pc, #228]	@ (8003f34 <DMA_SetConfig+0x21c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d04a      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a38      	ldr	r2, [pc, #224]	@ (8003f38 <DMA_SetConfig+0x220>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d045      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a36      	ldr	r2, [pc, #216]	@ (8003f3c <DMA_SetConfig+0x224>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d040      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a35      	ldr	r2, [pc, #212]	@ (8003f40 <DMA_SetConfig+0x228>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d03b      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a33      	ldr	r2, [pc, #204]	@ (8003f44 <DMA_SetConfig+0x22c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d036      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a32      	ldr	r2, [pc, #200]	@ (8003f48 <DMA_SetConfig+0x230>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d031      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a30      	ldr	r2, [pc, #192]	@ (8003f4c <DMA_SetConfig+0x234>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02c      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2f      	ldr	r2, [pc, #188]	@ (8003f50 <DMA_SetConfig+0x238>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d027      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f54 <DMA_SetConfig+0x23c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d022      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8003f58 <DMA_SetConfig+0x240>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d01d      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f5c <DMA_SetConfig+0x244>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d018      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a29      	ldr	r2, [pc, #164]	@ (8003f60 <DMA_SetConfig+0x248>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a27      	ldr	r2, [pc, #156]	@ (8003f64 <DMA_SetConfig+0x24c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a26      	ldr	r2, [pc, #152]	@ (8003f68 <DMA_SetConfig+0x250>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a24      	ldr	r2, [pc, #144]	@ (8003f6c <DMA_SetConfig+0x254>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <DMA_SetConfig+0x1d0>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a23      	ldr	r2, [pc, #140]	@ (8003f70 <DMA_SetConfig+0x258>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <DMA_SetConfig+0x1d4>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <DMA_SetConfig+0x1d6>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d059      	beq.n	8003fa6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	223f      	movs	r2, #63	@ 0x3f
 8003efc:	409a      	lsls	r2, r3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b40      	cmp	r3, #64	@ 0x40
 8003f20:	d138      	bne.n	8003f94 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f32:	e086      	b.n	8004042 <DMA_SetConfig+0x32a>
 8003f34:	40020010 	.word	0x40020010
 8003f38:	40020028 	.word	0x40020028
 8003f3c:	40020040 	.word	0x40020040
 8003f40:	40020058 	.word	0x40020058
 8003f44:	40020070 	.word	0x40020070
 8003f48:	40020088 	.word	0x40020088
 8003f4c:	400200a0 	.word	0x400200a0
 8003f50:	400200b8 	.word	0x400200b8
 8003f54:	40020410 	.word	0x40020410
 8003f58:	40020428 	.word	0x40020428
 8003f5c:	40020440 	.word	0x40020440
 8003f60:	40020458 	.word	0x40020458
 8003f64:	40020470 	.word	0x40020470
 8003f68:	40020488 	.word	0x40020488
 8003f6c:	400204a0 	.word	0x400204a0
 8003f70:	400204b8 	.word	0x400204b8
 8003f74:	58025408 	.word	0x58025408
 8003f78:	5802541c 	.word	0x5802541c
 8003f7c:	58025430 	.word	0x58025430
 8003f80:	58025444 	.word	0x58025444
 8003f84:	58025458 	.word	0x58025458
 8003f88:	5802546c 	.word	0x5802546c
 8003f8c:	58025480 	.word	0x58025480
 8003f90:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]
}
 8003fa4:	e04d      	b.n	8004042 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a29      	ldr	r2, [pc, #164]	@ (8004050 <DMA_SetConfig+0x338>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a27      	ldr	r2, [pc, #156]	@ (8004054 <DMA_SetConfig+0x33c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a26      	ldr	r2, [pc, #152]	@ (8004058 <DMA_SetConfig+0x340>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a24      	ldr	r2, [pc, #144]	@ (800405c <DMA_SetConfig+0x344>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a23      	ldr	r2, [pc, #140]	@ (8004060 <DMA_SetConfig+0x348>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a21      	ldr	r2, [pc, #132]	@ (8004064 <DMA_SetConfig+0x34c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a20      	ldr	r2, [pc, #128]	@ (8004068 <DMA_SetConfig+0x350>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <DMA_SetConfig+0x2de>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800406c <DMA_SetConfig+0x354>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <DMA_SetConfig+0x2e2>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <DMA_SetConfig+0x2e4>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2201      	movs	r2, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b40      	cmp	r3, #64	@ 0x40
 800401e:	d108      	bne.n	8004032 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	60da      	str	r2, [r3, #12]
}
 8004030:	e007      	b.n	8004042 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	60da      	str	r2, [r3, #12]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	58025408 	.word	0x58025408
 8004054:	5802541c 	.word	0x5802541c
 8004058:	58025430 	.word	0x58025430
 800405c:	58025444 	.word	0x58025444
 8004060:	58025458 	.word	0x58025458
 8004064:	5802546c 	.word	0x5802546c
 8004068:	58025480 	.word	0x58025480
 800406c:	58025494 	.word	0x58025494

08004070 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a42      	ldr	r2, [pc, #264]	@ (8004188 <DMA_CalcBaseAndBitshift+0x118>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d04a      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a41      	ldr	r2, [pc, #260]	@ (800418c <DMA_CalcBaseAndBitshift+0x11c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d045      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a3f      	ldr	r2, [pc, #252]	@ (8004190 <DMA_CalcBaseAndBitshift+0x120>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d040      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a3e      	ldr	r2, [pc, #248]	@ (8004194 <DMA_CalcBaseAndBitshift+0x124>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d03b      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004198 <DMA_CalcBaseAndBitshift+0x128>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d036      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a3b      	ldr	r2, [pc, #236]	@ (800419c <DMA_CalcBaseAndBitshift+0x12c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d031      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a39      	ldr	r2, [pc, #228]	@ (80041a0 <DMA_CalcBaseAndBitshift+0x130>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d02c      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a38      	ldr	r2, [pc, #224]	@ (80041a4 <DMA_CalcBaseAndBitshift+0x134>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d027      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a36      	ldr	r2, [pc, #216]	@ (80041a8 <DMA_CalcBaseAndBitshift+0x138>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d022      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a35      	ldr	r2, [pc, #212]	@ (80041ac <DMA_CalcBaseAndBitshift+0x13c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d01d      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a33      	ldr	r2, [pc, #204]	@ (80041b0 <DMA_CalcBaseAndBitshift+0x140>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d018      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a32      	ldr	r2, [pc, #200]	@ (80041b4 <DMA_CalcBaseAndBitshift+0x144>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a30      	ldr	r2, [pc, #192]	@ (80041b8 <DMA_CalcBaseAndBitshift+0x148>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00e      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2f      	ldr	r2, [pc, #188]	@ (80041bc <DMA_CalcBaseAndBitshift+0x14c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d009      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2d      	ldr	r2, [pc, #180]	@ (80041c0 <DMA_CalcBaseAndBitshift+0x150>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <DMA_CalcBaseAndBitshift+0xa8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a2c      	ldr	r2, [pc, #176]	@ (80041c4 <DMA_CalcBaseAndBitshift+0x154>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <DMA_CalcBaseAndBitshift+0xac>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <DMA_CalcBaseAndBitshift+0xae>
 800411c:	2300      	movs	r3, #0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d024      	beq.n	800416c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	3b10      	subs	r3, #16
 800412a:	4a27      	ldr	r2, [pc, #156]	@ (80041c8 <DMA_CalcBaseAndBitshift+0x158>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	4a24      	ldr	r2, [pc, #144]	@ (80041cc <DMA_CalcBaseAndBitshift+0x15c>)
 800413c:	5cd3      	ldrb	r3, [r2, r3]
 800413e:	461a      	mov	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b03      	cmp	r3, #3
 8004148:	d908      	bls.n	800415c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	4b1f      	ldr	r3, [pc, #124]	@ (80041d0 <DMA_CalcBaseAndBitshift+0x160>)
 8004152:	4013      	ands	r3, r2
 8004154:	1d1a      	adds	r2, r3, #4
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	659a      	str	r2, [r3, #88]	@ 0x58
 800415a:	e00d      	b.n	8004178 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	4b1b      	ldr	r3, [pc, #108]	@ (80041d0 <DMA_CalcBaseAndBitshift+0x160>)
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6593      	str	r3, [r2, #88]	@ 0x58
 800416a:	e005      	b.n	8004178 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	40020010 	.word	0x40020010
 800418c:	40020028 	.word	0x40020028
 8004190:	40020040 	.word	0x40020040
 8004194:	40020058 	.word	0x40020058
 8004198:	40020070 	.word	0x40020070
 800419c:	40020088 	.word	0x40020088
 80041a0:	400200a0 	.word	0x400200a0
 80041a4:	400200b8 	.word	0x400200b8
 80041a8:	40020410 	.word	0x40020410
 80041ac:	40020428 	.word	0x40020428
 80041b0:	40020440 	.word	0x40020440
 80041b4:	40020458 	.word	0x40020458
 80041b8:	40020470 	.word	0x40020470
 80041bc:	40020488 	.word	0x40020488
 80041c0:	400204a0 	.word	0x400204a0
 80041c4:	400204b8 	.word	0x400204b8
 80041c8:	aaaaaaab 	.word	0xaaaaaaab
 80041cc:	08009f88 	.word	0x08009f88
 80041d0:	fffffc00 	.word	0xfffffc00

080041d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d120      	bne.n	800422a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d858      	bhi.n	80042a2 <DMA_CheckFifoParam+0xce>
 80041f0:	a201      	add	r2, pc, #4	@ (adr r2, 80041f8 <DMA_CheckFifoParam+0x24>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	08004209 	.word	0x08004209
 80041fc:	0800421b 	.word	0x0800421b
 8004200:	08004209 	.word	0x08004209
 8004204:	080042a3 	.word	0x080042a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d048      	beq.n	80042a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004218:	e045      	b.n	80042a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004222:	d142      	bne.n	80042aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004228:	e03f      	b.n	80042aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004232:	d123      	bne.n	800427c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	2b03      	cmp	r3, #3
 800423a:	d838      	bhi.n	80042ae <DMA_CheckFifoParam+0xda>
 800423c:	a201      	add	r2, pc, #4	@ (adr r2, 8004244 <DMA_CheckFifoParam+0x70>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004255 	.word	0x08004255
 8004248:	0800425b 	.word	0x0800425b
 800424c:	08004255 	.word	0x08004255
 8004250:	0800426d 	.word	0x0800426d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
        break;
 8004258:	e030      	b.n	80042bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d025      	beq.n	80042b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800426a:	e022      	b.n	80042b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004274:	d11f      	bne.n	80042b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800427a:	e01c      	b.n	80042b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004280:	2b02      	cmp	r3, #2
 8004282:	d902      	bls.n	800428a <DMA_CheckFifoParam+0xb6>
 8004284:	2b03      	cmp	r3, #3
 8004286:	d003      	beq.n	8004290 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004288:	e018      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
        break;
 800428e:	e015      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00e      	beq.n	80042ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
    break;
 80042a0:	e00b      	b.n	80042ba <DMA_CheckFifoParam+0xe6>
        break;
 80042a2:	bf00      	nop
 80042a4:	e00a      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
        break;
 80042a6:	bf00      	nop
 80042a8:	e008      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
        break;
 80042aa:	bf00      	nop
 80042ac:	e006      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
        break;
 80042ae:	bf00      	nop
 80042b0:	e004      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
        break;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
        break;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <DMA_CheckFifoParam+0xe8>
    break;
 80042ba:	bf00      	nop
    }
  }

  return status;
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop

080042cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a38      	ldr	r2, [pc, #224]	@ (80043c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a36      	ldr	r2, [pc, #216]	@ (80043c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01d      	beq.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a35      	ldr	r2, [pc, #212]	@ (80043c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d018      	beq.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a33      	ldr	r2, [pc, #204]	@ (80043cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a32      	ldr	r2, [pc, #200]	@ (80043d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a30      	ldr	r2, [pc, #192]	@ (80043d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2f      	ldr	r2, [pc, #188]	@ (80043d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a2d      	ldr	r2, [pc, #180]	@ (80043dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d101      	bne.n	800432e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800432e:	2300      	movs	r3, #0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01a      	beq.n	800436a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	3b08      	subs	r3, #8
 800433c:	4a28      	ldr	r2, [pc, #160]	@ (80043e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4b26      	ldr	r3, [pc, #152]	@ (80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	461a      	mov	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a24      	ldr	r2, [pc, #144]	@ (80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004358:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2201      	movs	r2, #1
 8004362:	409a      	lsls	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004368:	e024      	b.n	80043b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	3b10      	subs	r3, #16
 8004372:	4a1e      	ldr	r2, [pc, #120]	@ (80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d806      	bhi.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a1b      	ldr	r2, [pc, #108]	@ (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d902      	bls.n	8004392 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3308      	adds	r3, #8
 8004390:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4b18      	ldr	r3, [pc, #96]	@ (80043f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	461a      	mov	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a16      	ldr	r2, [pc, #88]	@ (80043fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80043a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2201      	movs	r2, #1
 80043ae:	409a      	lsls	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	58025408 	.word	0x58025408
 80043c4:	5802541c 	.word	0x5802541c
 80043c8:	58025430 	.word	0x58025430
 80043cc:	58025444 	.word	0x58025444
 80043d0:	58025458 	.word	0x58025458
 80043d4:	5802546c 	.word	0x5802546c
 80043d8:	58025480 	.word	0x58025480
 80043dc:	58025494 	.word	0x58025494
 80043e0:	cccccccd 	.word	0xcccccccd
 80043e4:	16009600 	.word	0x16009600
 80043e8:	58025880 	.word	0x58025880
 80043ec:	aaaaaaab 	.word	0xaaaaaaab
 80043f0:	400204b8 	.word	0x400204b8
 80043f4:	4002040f 	.word	0x4002040f
 80043f8:	10008200 	.word	0x10008200
 80043fc:	40020880 	.word	0x40020880

08004400 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d04a      	beq.n	80044ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d847      	bhi.n	80044ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a25      	ldr	r2, [pc, #148]	@ (80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d022      	beq.n	800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a24      	ldr	r2, [pc, #144]	@ (80044bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d01d      	beq.n	800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a22      	ldr	r2, [pc, #136]	@ (80044c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d018      	beq.n	800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a21      	ldr	r2, [pc, #132]	@ (80044c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1f      	ldr	r2, [pc, #124]	@ (80044c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00e      	beq.n	800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1e      	ldr	r2, [pc, #120]	@ (80044cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1c      	ldr	r2, [pc, #112]	@ (80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1b      	ldr	r2, [pc, #108]	@ (80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d101      	bne.n	8004470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004470:	2300      	movs	r3, #0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4b17      	ldr	r3, [pc, #92]	@ (80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	461a      	mov	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a15      	ldr	r2, [pc, #84]	@ (80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004488:	671a      	str	r2, [r3, #112]	@ 0x70
 800448a:	e009      	b.n	80044a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4b14      	ldr	r3, [pc, #80]	@ (80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	461a      	mov	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a11      	ldr	r2, [pc, #68]	@ (80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800449e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	2201      	movs	r2, #1
 80044a6:	409a      	lsls	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	58025408 	.word	0x58025408
 80044bc:	5802541c 	.word	0x5802541c
 80044c0:	58025430 	.word	0x58025430
 80044c4:	58025444 	.word	0x58025444
 80044c8:	58025458 	.word	0x58025458
 80044cc:	5802546c 	.word	0x5802546c
 80044d0:	58025480 	.word	0x58025480
 80044d4:	58025494 	.word	0x58025494
 80044d8:	1600963f 	.word	0x1600963f
 80044dc:	58025940 	.word	0x58025940
 80044e0:	1000823f 	.word	0x1000823f
 80044e4:	40020940 	.word	0x40020940

080044e8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	@ 0x28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80044fc:	2308      	movs	r3, #8
 80044fe:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004500:	4b2f      	ldr	r3, [pc, #188]	@ (80045c0 <HAL_FLASH_Program+0xd8>)
 8004502:	7d1b      	ldrb	r3, [r3, #20]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_FLASH_Program+0x24>
 8004508:	2302      	movs	r3, #2
 800450a:	e054      	b.n	80045b6 <HAL_FLASH_Program+0xce>
 800450c:	4b2c      	ldr	r3, [pc, #176]	@ (80045c0 <HAL_FLASH_Program+0xd8>)
 800450e:	2201      	movs	r2, #1
 8004510:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004518:	d316      	bcc.n	8004548 <HAL_FLASH_Program+0x60>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8004520:	d212      	bcs.n	8004548 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8004522:	2301      	movs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8004526:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004528:	4b25      	ldr	r3, [pc, #148]	@ (80045c0 <HAL_FLASH_Program+0xd8>)
 800452a:	2200      	movs	r2, #0
 800452c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004534:	f000 f88e 	bl	8004654 <FLASH_WaitForLastOperation>
 8004538:	4603      	mov	r3, r0
 800453a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800453e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004542:	2b00      	cmp	r3, #0
 8004544:	d132      	bne.n	80045ac <HAL_FLASH_Program+0xc4>
 8004546:	e001      	b.n	800454c <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e034      	b.n	80045b6 <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800454c:	4b1d      	ldr	r3, [pc, #116]	@ (80045c4 <HAL_FLASH_Program+0xdc>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a1c      	ldr	r2, [pc, #112]	@ (80045c4 <HAL_FLASH_Program+0xdc>)
 8004552:	f043 0302 	orr.w	r3, r3, #2
 8004556:	60d3      	str	r3, [r2, #12]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004558:	f3bf 8f6f 	isb	sy
}
 800455c:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800455e:	f3bf 8f4f 	dsb	sy
}
 8004562:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	3304      	adds	r3, #4
 8004570:	623b      	str	r3, [r7, #32]
        src_addr++;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3304      	adds	r3, #4
 8004576:	61fb      	str	r3, [r7, #28]
        row_index--;
 8004578:	7efb      	ldrb	r3, [r7, #27]
 800457a:	3b01      	subs	r3, #1
 800457c:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800457e:	7efb      	ldrb	r3, [r7, #27]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ef      	bne.n	8004564 <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 8004584:	f3bf 8f6f 	isb	sy
}
 8004588:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800458a:	f3bf 8f4f 	dsb	sy
}
 800458e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8004590:	6979      	ldr	r1, [r7, #20]
 8004592:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004596:	f000 f85d 	bl	8004654 <FLASH_WaitForLastOperation>
 800459a:	4603      	mov	r3, r0
 800459c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80045a0:	4b08      	ldr	r3, [pc, #32]	@ (80045c4 <HAL_FLASH_Program+0xdc>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4a07      	ldr	r2, [pc, #28]	@ (80045c4 <HAL_FLASH_Program+0xdc>)
 80045a6:	f023 0302 	bic.w	r3, r3, #2
 80045aa:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80045ac:	4b04      	ldr	r3, [pc, #16]	@ (80045c0 <HAL_FLASH_Program+0xd8>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	751a      	strb	r2, [r3, #20]

  return status;
 80045b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3728      	adds	r7, #40	@ 0x28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	24000dc0 	.word	0x24000dc0
 80045c4:	52002000 	.word	0x52002000

080045c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80045cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004600 <HAL_FLASH_Unlock+0x38>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80045d8:	4b09      	ldr	r3, [pc, #36]	@ (8004600 <HAL_FLASH_Unlock+0x38>)
 80045da:	4a0a      	ldr	r2, [pc, #40]	@ (8004604 <HAL_FLASH_Unlock+0x3c>)
 80045dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80045de:	4b08      	ldr	r3, [pc, #32]	@ (8004600 <HAL_FLASH_Unlock+0x38>)
 80045e0:	4a09      	ldr	r2, [pc, #36]	@ (8004608 <HAL_FLASH_Unlock+0x40>)
 80045e2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80045e4:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <HAL_FLASH_Unlock+0x38>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	52002000 	.word	0x52002000
 8004604:	45670123 	.word	0x45670123
 8004608:	cdef89ab 	.word	0xcdef89ab

0800460c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8004610:	4b09      	ldr	r3, [pc, #36]	@ (8004638 <HAL_FLASH_Lock+0x2c>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a08      	ldr	r2, [pc, #32]	@ (8004638 <HAL_FLASH_Lock+0x2c>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800461c:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <HAL_FLASH_Lock+0x2c>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	52002000 	.word	0x52002000

0800463c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
  */

uint32_t HAL_FLASH_GetError(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004640:	4b03      	ldr	r3, [pc, #12]	@ (8004650 <HAL_FLASH_GetError+0x14>)
 8004642:	699b      	ldr	r3, [r3, #24]
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	24000dc0 	.word	0x24000dc0

08004654 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800465e:	2304      	movs	r3, #4
 8004660:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004666:	f7fc fff7 	bl	8001658 <HAL_GetTick>
 800466a:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800466c:	e010      	b.n	8004690 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004674:	d00c      	beq.n	8004690 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fc ffef 	bl	8001658 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <FLASH_WaitForLastOperation+0x38>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e02d      	b.n	80046ec <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004690:	4b18      	ldr	r3, [pc, #96]	@ (80046f4 <FLASH_WaitForLastOperation+0xa0>)
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4013      	ands	r3, r2
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	429a      	cmp	r2, r3
 800469c:	d0e7      	beq.n	800466e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d104      	bne.n	80046ae <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80046a4:	4b13      	ldr	r3, [pc, #76]	@ (80046f4 <FLASH_WaitForLastOperation+0xa0>)
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	4b13      	ldr	r3, [pc, #76]	@ (80046f8 <FLASH_WaitForLastOperation+0xa4>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80046b8:	4b10      	ldr	r3, [pc, #64]	@ (80046fc <FLASH_WaitForLastOperation+0xa8>)
 80046ba:	699a      	ldr	r2, [r3, #24]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	4a0e      	ldr	r2, [pc, #56]	@ (80046fc <FLASH_WaitForLastOperation+0xa8>)
 80046c2:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80046c4:	4a0b      	ldr	r2, [pc, #44]	@ (80046f4 <FLASH_WaitForLastOperation+0xa0>)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e00e      	b.n	80046ec <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10a      	bne.n	80046ea <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80046d4:	4b07      	ldr	r3, [pc, #28]	@ (80046f4 <FLASH_WaitForLastOperation+0xa0>)
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e0:	d103      	bne.n	80046ea <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80046e2:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <FLASH_WaitForLastOperation+0xa0>)
 80046e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80046e8:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	52002000 	.word	0x52002000
 80046f8:	17ee0000 	.word	0x17ee0000
 80046fc:	24000dc0 	.word	0x24000dc0

08004700 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800470e:	4b3f      	ldr	r3, [pc, #252]	@ (800480c <HAL_FLASHEx_Erase+0x10c>)
 8004710:	7d1b      	ldrb	r3, [r3, #20]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_FLASHEx_Erase+0x1a>
 8004716:	2302      	movs	r3, #2
 8004718:	e074      	b.n	8004804 <HAL_FLASHEx_Erase+0x104>
 800471a:	4b3c      	ldr	r3, [pc, #240]	@ (800480c <HAL_FLASHEx_Erase+0x10c>)
 800471c:	2201      	movs	r2, #1
 800471e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004720:	4b3a      	ldr	r3, [pc, #232]	@ (800480c <HAL_FLASHEx_Erase+0x10c>)
 8004722:	2200      	movs	r2, #0
 8004724:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8004732:	2101      	movs	r1, #1
 8004734:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004738:	f7ff ff8c 	bl	8004654 <FLASH_WaitForLastOperation>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d157      	bne.n	80047fc <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d11e      	bne.n	8004792 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4619      	mov	r1, r3
 800475e:	4610      	mov	r0, r2
 8004760:	f000 f85a 	bl	8004818 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d045      	beq.n	80047fc <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8004770:	2101      	movs	r1, #1
 8004772:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004776:	f7ff ff6d 	bl	8004654 <FLASH_WaitForLastOperation>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8004784:	4b22      	ldr	r3, [pc, #136]	@ (8004810 <HAL_FLASHEx_Erase+0x110>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4a21      	ldr	r2, [pc, #132]	@ (8004810 <HAL_FLASHEx_Erase+0x110>)
 800478a:	f023 0308 	bic.w	r3, r3, #8
 800478e:	60d3      	str	r3, [r2, #12]
 8004790:	e034      	b.n	80047fc <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004798:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	e024      	b.n	80047ec <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	461a      	mov	r2, r3
 80047ac:	68b8      	ldr	r0, [r7, #8]
 80047ae:	f000 f857 	bl	8004860 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00c      	beq.n	80047d8 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80047be:	2101      	movs	r1, #1
 80047c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80047c4:	f7ff ff46 	bl	8004654 <FLASH_WaitForLastOperation>
 80047c8:	4603      	mov	r3, r0
 80047ca:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80047cc:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <HAL_FLASHEx_Erase+0x110>)
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	490f      	ldr	r1, [pc, #60]	@ (8004810 <HAL_FLASHEx_Erase+0x110>)
 80047d2:	4b10      	ldr	r3, [pc, #64]	@ (8004814 <HAL_FLASHEx_Erase+0x114>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	601a      	str	r2, [r3, #0]
          break;
 80047e4:	e00a      	b.n	80047fc <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	3301      	adds	r3, #1
 80047ea:	60bb      	str	r3, [r7, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4413      	add	r3, r2
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d3d2      	bcc.n	80047a2 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80047fc:	4b03      	ldr	r3, [pc, #12]	@ (800480c <HAL_FLASHEx_Erase+0x10c>)
 80047fe:	2200      	movs	r2, #0
 8004800:	751a      	strb	r2, [r3, #20]

  return status;
 8004802:	7bfb      	ldrb	r3, [r7, #15]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	24000dc0 	.word	0x24000dc0
 8004810:	52002000 	.word	0x52002000
 8004814:	fffff8fb 	.word	0xfffff8fb

08004818 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d011      	beq.n	8004850 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800482c:	4b0b      	ldr	r3, [pc, #44]	@ (800485c <FLASH_MassErase+0x44>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a0a      	ldr	r2, [pc, #40]	@ (800485c <FLASH_MassErase+0x44>)
 8004832:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004836:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8004838:	4b08      	ldr	r3, [pc, #32]	@ (800485c <FLASH_MassErase+0x44>)
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	4907      	ldr	r1, [pc, #28]	@ (800485c <FLASH_MassErase+0x44>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4313      	orrs	r3, r2
 8004842:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8004844:	4b05      	ldr	r3, [pc, #20]	@ (800485c <FLASH_MassErase+0x44>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a04      	ldr	r2, [pc, #16]	@ (800485c <FLASH_MassErase+0x44>)
 800484a:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800484e:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	52002000 	.word	0x52002000

08004860 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8004876:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <FLASH_Erase_Sector+0x44>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	4a0a      	ldr	r2, [pc, #40]	@ (80048a4 <FLASH_Erase_Sector+0x44>)
 800487c:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8004880:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8004882:	4b08      	ldr	r3, [pc, #32]	@ (80048a4 <FLASH_Erase_Sector+0x44>)
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	0219      	lsls	r1, r3, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	430b      	orrs	r3, r1
 800488e:	4313      	orrs	r3, r2
 8004890:	4a04      	ldr	r2, [pc, #16]	@ (80048a4 <FLASH_Erase_Sector+0x44>)
 8004892:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8004896:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8004898:	bf00      	nop
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	52002000 	.word	0x52002000

080048a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	@ 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048b6:	4b86      	ldr	r3, [pc, #536]	@ (8004ad0 <HAL_GPIO_Init+0x228>)
 80048b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048ba:	e18c      	b.n	8004bd6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2101      	movs	r1, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	4013      	ands	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 817e 	beq.w	8004bd0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d005      	beq.n	80048ec <HAL_GPIO_Init+0x44>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d130      	bne.n	800494e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2203      	movs	r2, #3
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004922:	2201      	movs	r2, #1
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0201 	and.w	r2, r3, #1
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b03      	cmp	r3, #3
 8004958:	d017      	beq.n	800498a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	2203      	movs	r2, #3
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4313      	orrs	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d123      	bne.n	80049de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	08da      	lsrs	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3208      	adds	r2, #8
 800499e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	08da      	lsrs	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3208      	adds	r2, #8
 80049d8:	69b9      	ldr	r1, [r7, #24]
 80049da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	2203      	movs	r2, #3
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4013      	ands	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 0203 	and.w	r2, r3, #3
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80d8 	beq.w	8004bd0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a20:	4b2c      	ldr	r3, [pc, #176]	@ (8004ad4 <HAL_GPIO_Init+0x22c>)
 8004a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a26:	4a2b      	ldr	r2, [pc, #172]	@ (8004ad4 <HAL_GPIO_Init+0x22c>)
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a30:	4b28      	ldr	r3, [pc, #160]	@ (8004ad4 <HAL_GPIO_Init+0x22c>)
 8004a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a3e:	4a26      	ldr	r2, [pc, #152]	@ (8004ad8 <HAL_GPIO_Init+0x230>)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3302      	adds	r3, #2
 8004a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	220f      	movs	r2, #15
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1d      	ldr	r2, [pc, #116]	@ (8004adc <HAL_GPIO_Init+0x234>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d04a      	beq.n	8004b00 <HAL_GPIO_Init+0x258>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae0 <HAL_GPIO_Init+0x238>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d02b      	beq.n	8004aca <HAL_GPIO_Init+0x222>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <HAL_GPIO_Init+0x23c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d025      	beq.n	8004ac6 <HAL_GPIO_Init+0x21e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae8 <HAL_GPIO_Init+0x240>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01f      	beq.n	8004ac2 <HAL_GPIO_Init+0x21a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <HAL_GPIO_Init+0x244>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d019      	beq.n	8004abe <HAL_GPIO_Init+0x216>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a18      	ldr	r2, [pc, #96]	@ (8004af0 <HAL_GPIO_Init+0x248>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <HAL_GPIO_Init+0x212>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a17      	ldr	r2, [pc, #92]	@ (8004af4 <HAL_GPIO_Init+0x24c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00d      	beq.n	8004ab6 <HAL_GPIO_Init+0x20e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a16      	ldr	r2, [pc, #88]	@ (8004af8 <HAL_GPIO_Init+0x250>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <HAL_GPIO_Init+0x20a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a15      	ldr	r2, [pc, #84]	@ (8004afc <HAL_GPIO_Init+0x254>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <HAL_GPIO_Init+0x206>
 8004aaa:	2309      	movs	r3, #9
 8004aac:	e029      	b.n	8004b02 <HAL_GPIO_Init+0x25a>
 8004aae:	230a      	movs	r3, #10
 8004ab0:	e027      	b.n	8004b02 <HAL_GPIO_Init+0x25a>
 8004ab2:	2307      	movs	r3, #7
 8004ab4:	e025      	b.n	8004b02 <HAL_GPIO_Init+0x25a>
 8004ab6:	2306      	movs	r3, #6
 8004ab8:	e023      	b.n	8004b02 <HAL_GPIO_Init+0x25a>
 8004aba:	2305      	movs	r3, #5
 8004abc:	e021      	b.n	8004b02 <HAL_GPIO_Init+0x25a>
 8004abe:	2304      	movs	r3, #4
 8004ac0:	e01f      	b.n	8004b02 <HAL_GPIO_Init+0x25a>
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e01d      	b.n	8004b02 <HAL_GPIO_Init+0x25a>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e01b      	b.n	8004b02 <HAL_GPIO_Init+0x25a>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e019      	b.n	8004b02 <HAL_GPIO_Init+0x25a>
 8004ace:	bf00      	nop
 8004ad0:	58000080 	.word	0x58000080
 8004ad4:	58024400 	.word	0x58024400
 8004ad8:	58000400 	.word	0x58000400
 8004adc:	58020000 	.word	0x58020000
 8004ae0:	58020400 	.word	0x58020400
 8004ae4:	58020800 	.word	0x58020800
 8004ae8:	58020c00 	.word	0x58020c00
 8004aec:	58021000 	.word	0x58021000
 8004af0:	58021400 	.word	0x58021400
 8004af4:	58021800 	.word	0x58021800
 8004af8:	58021c00 	.word	0x58021c00
 8004afc:	58022400 	.word	0x58022400
 8004b00:	2300      	movs	r3, #0
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	f002 0203 	and.w	r2, r2, #3
 8004b08:	0092      	lsls	r2, r2, #2
 8004b0a:	4093      	lsls	r3, r2
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b12:	4938      	ldr	r1, [pc, #224]	@ (8004bf4 <HAL_GPIO_Init+0x34c>)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	089b      	lsrs	r3, r3, #2
 8004b18:	3302      	adds	r3, #2
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	43db      	mvns	r3, r3
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f47f ae6b 	bne.w	80048bc <HAL_GPIO_Init+0x14>
  }
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	3724      	adds	r7, #36	@ 0x24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	58000400 	.word	0x58000400

08004bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]
 8004c04:	4613      	mov	r3, r2
 8004c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c08:	787b      	ldrb	r3, [r7, #1]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c0e:	887a      	ldrh	r2, [r7, #2]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c14:	e003      	b.n	8004c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c16:	887b      	ldrh	r3, [r7, #2]
 8004c18:	041a      	lsls	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	619a      	str	r2, [r3, #24]
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c34:	4b19      	ldr	r3, [pc, #100]	@ (8004c9c <HAL_PWREx_ConfigSupply+0x70>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d00a      	beq.n	8004c56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c40:	4b16      	ldr	r3, [pc, #88]	@ (8004c9c <HAL_PWREx_ConfigSupply+0x70>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d001      	beq.n	8004c52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e01f      	b.n	8004c92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e01d      	b.n	8004c92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c56:	4b11      	ldr	r3, [pc, #68]	@ (8004c9c <HAL_PWREx_ConfigSupply+0x70>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f023 0207 	bic.w	r2, r3, #7
 8004c5e:	490f      	ldr	r1, [pc, #60]	@ (8004c9c <HAL_PWREx_ConfigSupply+0x70>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c66:	f7fc fcf7 	bl	8001658 <HAL_GetTick>
 8004c6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c6c:	e009      	b.n	8004c82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c6e:	f7fc fcf3 	bl	8001658 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c7c:	d901      	bls.n	8004c82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e007      	b.n	8004c92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c82:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <HAL_PWREx_ConfigSupply+0x70>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c8e:	d1ee      	bne.n	8004c6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	58024800 	.word	0x58024800

08004ca0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08c      	sub	sp, #48	@ 0x30
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e3c8      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 8087 	beq.w	8004dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc0:	4b88      	ldr	r3, [pc, #544]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cca:	4b86      	ldr	r3, [pc, #536]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d007      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x46>
 8004cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd8:	2b18      	cmp	r3, #24
 8004cda:	d110      	bne.n	8004cfe <HAL_RCC_OscConfig+0x5e>
 8004cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d10b      	bne.n	8004cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d06c      	beq.n	8004dcc <HAL_RCC_OscConfig+0x12c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d168      	bne.n	8004dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e3a2      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d06:	d106      	bne.n	8004d16 <HAL_RCC_OscConfig+0x76>
 8004d08:	4b76      	ldr	r3, [pc, #472]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a75      	ldr	r2, [pc, #468]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	e02e      	b.n	8004d74 <HAL_RCC_OscConfig+0xd4>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCC_OscConfig+0x98>
 8004d1e:	4b71      	ldr	r3, [pc, #452]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a70      	ldr	r2, [pc, #448]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a6d      	ldr	r2, [pc, #436]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e01d      	b.n	8004d74 <HAL_RCC_OscConfig+0xd4>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0xbc>
 8004d42:	4b68      	ldr	r3, [pc, #416]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a67      	ldr	r2, [pc, #412]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	4b65      	ldr	r3, [pc, #404]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a64      	ldr	r2, [pc, #400]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0xd4>
 8004d5c:	4b61      	ldr	r3, [pc, #388]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a60      	ldr	r2, [pc, #384]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b5e      	ldr	r3, [pc, #376]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fc fc6c 	bl	8001658 <HAL_GetTick>
 8004d80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7fc fc68 	bl	8001658 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	@ 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e356      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d96:	4b53      	ldr	r3, [pc, #332]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0xe4>
 8004da2:	e014      	b.n	8004dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7fc fc58 	bl	8001658 <HAL_GetTick>
 8004da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dac:	f7fc fc54 	bl	8001658 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b64      	cmp	r3, #100	@ 0x64
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e342      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dbe:	4b49      	ldr	r3, [pc, #292]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x10c>
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 808c 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ddc:	4b41      	ldr	r3, [pc, #260]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004de4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004de6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <HAL_RCC_OscConfig+0x162>
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	2b18      	cmp	r3, #24
 8004df6:	d137      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1c8>
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d132      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e02:	4b38      	ldr	r3, [pc, #224]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <HAL_RCC_OscConfig+0x17a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e314      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e1a:	4b32      	ldr	r3, [pc, #200]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f023 0219 	bic.w	r2, r3, #25
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	492f      	ldr	r1, [pc, #188]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fc fc14 	bl	8001658 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e34:	f7fc fc10 	bl	8001658 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e2fe      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e46:	4b27      	ldr	r3, [pc, #156]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e52:	4b24      	ldr	r3, [pc, #144]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	061b      	lsls	r3, r3, #24
 8004e60:	4920      	ldr	r1, [pc, #128]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e66:	e045      	b.n	8004ef4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d026      	beq.n	8004ebe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f023 0219 	bic.w	r2, r3, #25
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4919      	ldr	r1, [pc, #100]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e82:	f7fc fbe9 	bl	8001658 <HAL_GetTick>
 8004e86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8a:	f7fc fbe5 	bl	8001658 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e2d3      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	061b      	lsls	r3, r3, #24
 8004eb6:	490b      	ldr	r1, [pc, #44]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]
 8004ebc:	e01a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ebe:	4b09      	ldr	r3, [pc, #36]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a08      	ldr	r2, [pc, #32]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eca:	f7fc fbc5 	bl	8001658 <HAL_GetTick>
 8004ece:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed2:	f7fc fbc1 	bl	8001658 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d903      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e2af      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
 8004ee4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ee8:	4b96      	ldr	r3, [pc, #600]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ee      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d06a      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f00:	4b90      	ldr	r3, [pc, #576]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f08:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f0a:	4b8e      	ldr	r3, [pc, #568]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d007      	beq.n	8004f26 <HAL_RCC_OscConfig+0x286>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b18      	cmp	r3, #24
 8004f1a:	d11b      	bne.n	8004f54 <HAL_RCC_OscConfig+0x2b4>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d116      	bne.n	8004f54 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f26:	4b87      	ldr	r3, [pc, #540]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_RCC_OscConfig+0x29e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	2b80      	cmp	r3, #128	@ 0x80
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e282      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f3e:	4b81      	ldr	r3, [pc, #516]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	061b      	lsls	r3, r3, #24
 8004f4c:	497d      	ldr	r1, [pc, #500]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f52:	e040      	b.n	8004fd6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d023      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f5c:	4b79      	ldr	r3, [pc, #484]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a78      	ldr	r2, [pc, #480]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f68:	f7fc fb76 	bl	8001658 <HAL_GetTick>
 8004f6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f70:	f7fc fb72 	bl	8001658 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e260      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f82:	4b70      	ldr	r3, [pc, #448]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	061b      	lsls	r3, r3, #24
 8004f9c:	4969      	ldr	r1, [pc, #420]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60cb      	str	r3, [r1, #12]
 8004fa2:	e018      	b.n	8004fd6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fa4:	4b67      	ldr	r3, [pc, #412]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a66      	ldr	r2, [pc, #408]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fc fb52 	bl	8001658 <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fb8:	f7fc fb4e 	bl	8001658 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e23c      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fca:	4b5e      	ldr	r3, [pc, #376]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d036      	beq.n	8005050 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d019      	beq.n	800501e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fea:	4b56      	ldr	r3, [pc, #344]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fee:	4a55      	ldr	r2, [pc, #340]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8004ff0:	f043 0301 	orr.w	r3, r3, #1
 8004ff4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff6:	f7fc fb2f 	bl	8001658 <HAL_GetTick>
 8004ffa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ffe:	f7fc fb2b 	bl	8001658 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e219      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005010:	4b4c      	ldr	r3, [pc, #304]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8005012:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x35e>
 800501c:	e018      	b.n	8005050 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800501e:	4b49      	ldr	r3, [pc, #292]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8005020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005022:	4a48      	ldr	r2, [pc, #288]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502a:	f7fc fb15 	bl	8001658 <HAL_GetTick>
 800502e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005032:	f7fc fb11 	bl	8001658 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e1ff      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005044:	4b3f      	ldr	r3, [pc, #252]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8005046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f0      	bne.n	8005032 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d036      	beq.n	80050ca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d019      	beq.n	8005098 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005064:	4b37      	ldr	r3, [pc, #220]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a36      	ldr	r2, [pc, #216]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 800506a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800506e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005070:	f7fc faf2 	bl	8001658 <HAL_GetTick>
 8005074:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005078:	f7fc faee 	bl	8001658 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e1dc      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800508a:	4b2e      	ldr	r3, [pc, #184]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0x3d8>
 8005096:	e018      	b.n	80050ca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005098:	4b2a      	ldr	r3, [pc, #168]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a29      	ldr	r2, [pc, #164]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 800509e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050a4:	f7fc fad8 	bl	8001658 <HAL_GetTick>
 80050a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050ac:	f7fc fad4 	bl	8001658 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e1c2      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050be:	4b21      	ldr	r3, [pc, #132]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 8086 	beq.w	80051e4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005148 <HAL_RCC_OscConfig+0x4a8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005148 <HAL_RCC_OscConfig+0x4a8>)
 80050de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050e4:	f7fc fab8 	bl	8001658 <HAL_GetTick>
 80050e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ec:	f7fc fab4 	bl	8001658 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	@ 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e1a2      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050fe:	4b12      	ldr	r3, [pc, #72]	@ (8005148 <HAL_RCC_OscConfig+0x4a8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d106      	bne.n	8005120 <HAL_RCC_OscConfig+0x480>
 8005112:	4b0c      	ldr	r3, [pc, #48]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005116:	4a0b      	ldr	r2, [pc, #44]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	6713      	str	r3, [r2, #112]	@ 0x70
 800511e:	e032      	b.n	8005186 <HAL_RCC_OscConfig+0x4e6>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d111      	bne.n	800514c <HAL_RCC_OscConfig+0x4ac>
 8005128:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512c:	4a05      	ldr	r2, [pc, #20]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	6713      	str	r3, [r2, #112]	@ 0x70
 8005134:	4b03      	ldr	r3, [pc, #12]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005138:	4a02      	ldr	r2, [pc, #8]	@ (8005144 <HAL_RCC_OscConfig+0x4a4>)
 800513a:	f023 0304 	bic.w	r3, r3, #4
 800513e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005140:	e021      	b.n	8005186 <HAL_RCC_OscConfig+0x4e6>
 8005142:	bf00      	nop
 8005144:	58024400 	.word	0x58024400
 8005148:	58024800 	.word	0x58024800
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b05      	cmp	r3, #5
 8005152:	d10c      	bne.n	800516e <HAL_RCC_OscConfig+0x4ce>
 8005154:	4b83      	ldr	r3, [pc, #524]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	4a82      	ldr	r2, [pc, #520]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 800515a:	f043 0304 	orr.w	r3, r3, #4
 800515e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005160:	4b80      	ldr	r3, [pc, #512]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005164:	4a7f      	ldr	r2, [pc, #508]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6713      	str	r3, [r2, #112]	@ 0x70
 800516c:	e00b      	b.n	8005186 <HAL_RCC_OscConfig+0x4e6>
 800516e:	4b7d      	ldr	r3, [pc, #500]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005172:	4a7c      	ldr	r2, [pc, #496]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	6713      	str	r3, [r2, #112]	@ 0x70
 800517a:	4b7a      	ldr	r3, [pc, #488]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517e:	4a79      	ldr	r2, [pc, #484]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005180:	f023 0304 	bic.w	r3, r3, #4
 8005184:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d015      	beq.n	80051ba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518e:	f7fc fa63 	bl	8001658 <HAL_GetTick>
 8005192:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7fc fa5f 	bl	8001658 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e14b      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ac:	4b6d      	ldr	r3, [pc, #436]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0ee      	beq.n	8005196 <HAL_RCC_OscConfig+0x4f6>
 80051b8:	e014      	b.n	80051e4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ba:	f7fc fa4d 	bl	8001658 <HAL_GetTick>
 80051be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051c0:	e00a      	b.n	80051d8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fc fa49 	bl	8001658 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e135      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051d8:	4b62      	ldr	r3, [pc, #392]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80051da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ee      	bne.n	80051c2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 812a 	beq.w	8005442 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051f6:	2b18      	cmp	r3, #24
 80051f8:	f000 80ba 	beq.w	8005370 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005200:	2b02      	cmp	r3, #2
 8005202:	f040 8095 	bne.w	8005330 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005206:	4b57      	ldr	r3, [pc, #348]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a56      	ldr	r2, [pc, #344]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 800520c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005212:	f7fc fa21 	bl	8001658 <HAL_GetTick>
 8005216:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800521a:	f7fc fa1d 	bl	8001658 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e10b      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800522c:	4b4d      	ldr	r3, [pc, #308]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1f0      	bne.n	800521a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005238:	4b4a      	ldr	r3, [pc, #296]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 800523a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800523c:	4b4a      	ldr	r3, [pc, #296]	@ (8005368 <HAL_RCC_OscConfig+0x6c8>)
 800523e:	4013      	ands	r3, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005248:	0112      	lsls	r2, r2, #4
 800524a:	430a      	orrs	r2, r1
 800524c:	4945      	ldr	r1, [pc, #276]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 800524e:	4313      	orrs	r3, r2
 8005250:	628b      	str	r3, [r1, #40]	@ 0x28
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005256:	3b01      	subs	r3, #1
 8005258:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005260:	3b01      	subs	r3, #1
 8005262:	025b      	lsls	r3, r3, #9
 8005264:	b29b      	uxth	r3, r3
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	3b01      	subs	r3, #1
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527a:	3b01      	subs	r3, #1
 800527c:	061b      	lsls	r3, r3, #24
 800527e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005282:	4938      	ldr	r1, [pc, #224]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005284:	4313      	orrs	r3, r2
 8005286:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005288:	4b36      	ldr	r3, [pc, #216]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	4a35      	ldr	r2, [pc, #212]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005294:	4b33      	ldr	r3, [pc, #204]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005296:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005298:	4b34      	ldr	r3, [pc, #208]	@ (800536c <HAL_RCC_OscConfig+0x6cc>)
 800529a:	4013      	ands	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80052a0:	00d2      	lsls	r2, r2, #3
 80052a2:	4930      	ldr	r1, [pc, #192]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ac:	f023 020c 	bic.w	r2, r3, #12
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	492b      	ldr	r1, [pc, #172]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	f023 0202 	bic.w	r2, r3, #2
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c6:	4927      	ldr	r1, [pc, #156]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052cc:	4b25      	ldr	r3, [pc, #148]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	4a24      	ldr	r2, [pc, #144]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d8:	4b22      	ldr	r3, [pc, #136]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	4a21      	ldr	r2, [pc, #132]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80052f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052fc:	4b19      	ldr	r3, [pc, #100]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a18      	ldr	r2, [pc, #96]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fc f9a6 	bl	8001658 <HAL_GetTick>
 800530c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005310:	f7fc f9a2 	bl	8001658 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e090      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005322:	4b10      	ldr	r3, [pc, #64]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x670>
 800532e:	e088      	b.n	8005442 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005330:	4b0c      	ldr	r3, [pc, #48]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0b      	ldr	r2, [pc, #44]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800533a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fc f98c 	bl	8001658 <HAL_GetTick>
 8005340:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005344:	f7fc f988 	bl	8001658 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e076      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005356:	4b03      	ldr	r3, [pc, #12]	@ (8005364 <HAL_RCC_OscConfig+0x6c4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x6a4>
 8005362:	e06e      	b.n	8005442 <HAL_RCC_OscConfig+0x7a2>
 8005364:	58024400 	.word	0x58024400
 8005368:	fffffc0c 	.word	0xfffffc0c
 800536c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005370:	4b36      	ldr	r3, [pc, #216]	@ (800544c <HAL_RCC_OscConfig+0x7ac>)
 8005372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005374:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005376:	4b35      	ldr	r3, [pc, #212]	@ (800544c <HAL_RCC_OscConfig+0x7ac>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	2b01      	cmp	r3, #1
 8005382:	d031      	beq.n	80053e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f003 0203 	and.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800538e:	429a      	cmp	r2, r3
 8005390:	d12a      	bne.n	80053e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d122      	bne.n	80053e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d11a      	bne.n	80053e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	0a5b      	lsrs	r3, r3, #9
 80053b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d111      	bne.n	80053e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	0c1b      	lsrs	r3, r3, #16
 80053c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d108      	bne.n	80053e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	0e1b      	lsrs	r3, r3, #24
 80053da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e02b      	b.n	8005444 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80053ec:	4b17      	ldr	r3, [pc, #92]	@ (800544c <HAL_RCC_OscConfig+0x7ac>)
 80053ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f0:	08db      	lsrs	r3, r3, #3
 80053f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d01f      	beq.n	8005442 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005402:	4b12      	ldr	r3, [pc, #72]	@ (800544c <HAL_RCC_OscConfig+0x7ac>)
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	4a11      	ldr	r2, [pc, #68]	@ (800544c <HAL_RCC_OscConfig+0x7ac>)
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800540e:	f7fc f923 	bl	8001658 <HAL_GetTick>
 8005412:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005414:	bf00      	nop
 8005416:	f7fc f91f 	bl	8001658 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	4293      	cmp	r3, r2
 8005420:	d0f9      	beq.n	8005416 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005422:	4b0a      	ldr	r3, [pc, #40]	@ (800544c <HAL_RCC_OscConfig+0x7ac>)
 8005424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005426:	4b0a      	ldr	r3, [pc, #40]	@ (8005450 <HAL_RCC_OscConfig+0x7b0>)
 8005428:	4013      	ands	r3, r2
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800542e:	00d2      	lsls	r2, r2, #3
 8005430:	4906      	ldr	r1, [pc, #24]	@ (800544c <HAL_RCC_OscConfig+0x7ac>)
 8005432:	4313      	orrs	r3, r2
 8005434:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005436:	4b05      	ldr	r3, [pc, #20]	@ (800544c <HAL_RCC_OscConfig+0x7ac>)
 8005438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543a:	4a04      	ldr	r2, [pc, #16]	@ (800544c <HAL_RCC_OscConfig+0x7ac>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3730      	adds	r7, #48	@ 0x30
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	58024400 	.word	0x58024400
 8005450:	ffff0007 	.word	0xffff0007

08005454 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e19c      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005468:	4b8a      	ldr	r3, [pc, #552]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d910      	bls.n	8005498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005476:	4b87      	ldr	r3, [pc, #540]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 020f 	bic.w	r2, r3, #15
 800547e:	4985      	ldr	r1, [pc, #532]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	4b83      	ldr	r3, [pc, #524]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d001      	beq.n	8005498 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e184      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d010      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	4b7b      	ldr	r3, [pc, #492]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d908      	bls.n	80054c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054b4:	4b78      	ldr	r3, [pc, #480]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	4975      	ldr	r1, [pc, #468]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d010      	beq.n	80054f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	4b70      	ldr	r3, [pc, #448]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054de:	429a      	cmp	r2, r3
 80054e0:	d908      	bls.n	80054f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	496a      	ldr	r1, [pc, #424]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	4b64      	ldr	r3, [pc, #400]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800550c:	429a      	cmp	r2, r3
 800550e:	d908      	bls.n	8005522 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005510:	4b61      	ldr	r3, [pc, #388]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	495e      	ldr	r1, [pc, #376]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 800551e:	4313      	orrs	r3, r2
 8005520:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d010      	beq.n	8005550 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69da      	ldr	r2, [r3, #28]
 8005532:	4b59      	ldr	r3, [pc, #356]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800553a:	429a      	cmp	r2, r3
 800553c:	d908      	bls.n	8005550 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800553e:	4b56      	ldr	r3, [pc, #344]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	4953      	ldr	r1, [pc, #332]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 800554c:	4313      	orrs	r3, r2
 800554e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d010      	beq.n	800557e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	4b4d      	ldr	r3, [pc, #308]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	429a      	cmp	r2, r3
 800556a:	d908      	bls.n	800557e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800556c:	4b4a      	ldr	r3, [pc, #296]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f023 020f 	bic.w	r2, r3, #15
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4947      	ldr	r1, [pc, #284]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 800557a:	4313      	orrs	r3, r2
 800557c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d055      	beq.n	8005636 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800558a:	4b43      	ldr	r3, [pc, #268]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	4940      	ldr	r1, [pc, #256]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005598:	4313      	orrs	r3, r2
 800559a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d107      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d121      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0f6      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d107      	bne.n	80055cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055bc:	4b36      	ldr	r3, [pc, #216]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d115      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0ea      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d107      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055d4:	4b30      	ldr	r3, [pc, #192]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0de      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0d6      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055f4:	4b28      	ldr	r3, [pc, #160]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f023 0207 	bic.w	r2, r3, #7
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4925      	ldr	r1, [pc, #148]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005602:	4313      	orrs	r3, r2
 8005604:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005606:	f7fc f827 	bl	8001658 <HAL_GetTick>
 800560a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560c:	e00a      	b.n	8005624 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560e:	f7fc f823 	bl	8001658 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800561c:	4293      	cmp	r3, r2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e0be      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005624:	4b1c      	ldr	r3, [pc, #112]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	429a      	cmp	r2, r3
 8005634:	d1eb      	bne.n	800560e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d010      	beq.n	8005664 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	4b14      	ldr	r3, [pc, #80]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	429a      	cmp	r2, r3
 8005650:	d208      	bcs.n	8005664 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005652:	4b11      	ldr	r3, [pc, #68]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f023 020f 	bic.w	r2, r3, #15
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	490e      	ldr	r1, [pc, #56]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005660:	4313      	orrs	r3, r2
 8005662:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005664:	4b0b      	ldr	r3, [pc, #44]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d214      	bcs.n	800569c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005672:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f023 020f 	bic.w	r2, r3, #15
 800567a:	4906      	ldr	r1, [pc, #24]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	4313      	orrs	r3, r2
 8005680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005682:	4b04      	ldr	r3, [pc, #16]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d005      	beq.n	800569c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e086      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
 8005694:	52002000 	.word	0x52002000
 8005698:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d010      	beq.n	80056ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	4b3f      	ldr	r3, [pc, #252]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d208      	bcs.n	80056ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056b8:	4b3c      	ldr	r3, [pc, #240]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	4939      	ldr	r1, [pc, #228]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d010      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	4b34      	ldr	r3, [pc, #208]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d208      	bcs.n	80056f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056e6:	4b31      	ldr	r3, [pc, #196]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	492e      	ldr	r1, [pc, #184]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	4b28      	ldr	r3, [pc, #160]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005710:	429a      	cmp	r2, r3
 8005712:	d208      	bcs.n	8005726 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005714:	4b25      	ldr	r3, [pc, #148]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	4922      	ldr	r1, [pc, #136]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005722:	4313      	orrs	r3, r2
 8005724:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d010      	beq.n	8005754 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69da      	ldr	r2, [r3, #28]
 8005736:	4b1d      	ldr	r3, [pc, #116]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800573e:	429a      	cmp	r2, r3
 8005740:	d208      	bcs.n	8005754 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005742:	4b1a      	ldr	r3, [pc, #104]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	4917      	ldr	r1, [pc, #92]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005750:	4313      	orrs	r3, r2
 8005752:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005754:	f000 f834 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 8005758:	4602      	mov	r2, r0
 800575a:	4b14      	ldr	r3, [pc, #80]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	4912      	ldr	r1, [pc, #72]	@ (80057b0 <HAL_RCC_ClockConfig+0x35c>)
 8005766:	5ccb      	ldrb	r3, [r1, r3]
 8005768:	f003 031f 	and.w	r3, r3, #31
 800576c:	fa22 f303 	lsr.w	r3, r2, r3
 8005770:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005772:	4b0e      	ldr	r3, [pc, #56]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	4a0d      	ldr	r2, [pc, #52]	@ (80057b0 <HAL_RCC_ClockConfig+0x35c>)
 800577c:	5cd3      	ldrb	r3, [r2, r3]
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
 8005788:	4a0a      	ldr	r2, [pc, #40]	@ (80057b4 <HAL_RCC_ClockConfig+0x360>)
 800578a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800578c:	4a0a      	ldr	r2, [pc, #40]	@ (80057b8 <HAL_RCC_ClockConfig+0x364>)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005792:	4b0a      	ldr	r3, [pc, #40]	@ (80057bc <HAL_RCC_ClockConfig+0x368>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f7fb fdb2 	bl	8001300 <HAL_InitTick>
 800579c:	4603      	mov	r3, r0
 800579e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	58024400 	.word	0x58024400
 80057b0:	08009f78 	.word	0x08009f78
 80057b4:	24000004 	.word	0x24000004
 80057b8:	24000000 	.word	0x24000000
 80057bc:	24000008 	.word	0x24000008

080057c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b089      	sub	sp, #36	@ 0x24
 80057c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c6:	4bb3      	ldr	r3, [pc, #716]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057ce:	2b18      	cmp	r3, #24
 80057d0:	f200 8155 	bhi.w	8005a7e <HAL_RCC_GetSysClockFreq+0x2be>
 80057d4:	a201      	add	r2, pc, #4	@ (adr r2, 80057dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80057d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057da:	bf00      	nop
 80057dc:	08005841 	.word	0x08005841
 80057e0:	08005a7f 	.word	0x08005a7f
 80057e4:	08005a7f 	.word	0x08005a7f
 80057e8:	08005a7f 	.word	0x08005a7f
 80057ec:	08005a7f 	.word	0x08005a7f
 80057f0:	08005a7f 	.word	0x08005a7f
 80057f4:	08005a7f 	.word	0x08005a7f
 80057f8:	08005a7f 	.word	0x08005a7f
 80057fc:	08005867 	.word	0x08005867
 8005800:	08005a7f 	.word	0x08005a7f
 8005804:	08005a7f 	.word	0x08005a7f
 8005808:	08005a7f 	.word	0x08005a7f
 800580c:	08005a7f 	.word	0x08005a7f
 8005810:	08005a7f 	.word	0x08005a7f
 8005814:	08005a7f 	.word	0x08005a7f
 8005818:	08005a7f 	.word	0x08005a7f
 800581c:	0800586d 	.word	0x0800586d
 8005820:	08005a7f 	.word	0x08005a7f
 8005824:	08005a7f 	.word	0x08005a7f
 8005828:	08005a7f 	.word	0x08005a7f
 800582c:	08005a7f 	.word	0x08005a7f
 8005830:	08005a7f 	.word	0x08005a7f
 8005834:	08005a7f 	.word	0x08005a7f
 8005838:	08005a7f 	.word	0x08005a7f
 800583c:	08005873 	.word	0x08005873
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005840:	4b94      	ldr	r3, [pc, #592]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d009      	beq.n	8005860 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800584c:	4b91      	ldr	r3, [pc, #580]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	08db      	lsrs	r3, r3, #3
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	4a90      	ldr	r2, [pc, #576]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800585e:	e111      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005860:	4b8d      	ldr	r3, [pc, #564]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005862:	61bb      	str	r3, [r7, #24]
      break;
 8005864:	e10e      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005866:	4b8d      	ldr	r3, [pc, #564]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005868:	61bb      	str	r3, [r7, #24]
      break;
 800586a:	e10b      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800586c:	4b8c      	ldr	r3, [pc, #560]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800586e:	61bb      	str	r3, [r7, #24]
      break;
 8005870:	e108      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005872:	4b88      	ldr	r3, [pc, #544]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800587c:	4b85      	ldr	r3, [pc, #532]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005886:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005888:	4b82      	ldr	r3, [pc, #520]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005892:	4b80      	ldr	r3, [pc, #512]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005896:	08db      	lsrs	r3, r3, #3
 8005898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	fb02 f303 	mul.w	r3, r2, r3
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80e1 	beq.w	8005a78 <HAL_RCC_GetSysClockFreq+0x2b8>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	f000 8083 	beq.w	80059c4 <HAL_RCC_GetSysClockFreq+0x204>
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	f200 80a1 	bhi.w	8005a08 <HAL_RCC_GetSysClockFreq+0x248>
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_RCC_GetSysClockFreq+0x114>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d056      	beq.n	8005980 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058d2:	e099      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d02d      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	08db      	lsrs	r3, r3, #3
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	4a6b      	ldr	r2, [pc, #428]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
 80058f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	ee07 3a90 	vmov	s15, r3
 80058f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800590a:	4b62      	ldr	r3, [pc, #392]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591a:	ed97 6a02 	vldr	s12, [r7, #8]
 800591e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800592a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800592e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005936:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800593a:	e087      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005946:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800594a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800594e:	4b51      	ldr	r3, [pc, #324]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005962:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800596a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800596e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800597e:	e065      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005aac <HAL_RCC_GetSysClockFreq+0x2ec>
 800598e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005992:	4b40      	ldr	r3, [pc, #256]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80059a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059c2:	e043      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ab0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a06:	e021      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005aac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a4c:	4b11      	ldr	r3, [pc, #68]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a50:	0a5b      	lsrs	r3, r3, #9
 8005a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a56:	3301      	adds	r3, #1
 8005a58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a70:	ee17 3a90 	vmov	r3, s15
 8005a74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a76:	e005      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61bb      	str	r3, [r7, #24]
      break;
 8005a7c:	e002      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a7e:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a80:	61bb      	str	r3, [r7, #24]
      break;
 8005a82:	bf00      	nop
  }

  return sysclockfreq;
 8005a84:	69bb      	ldr	r3, [r7, #24]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3724      	adds	r7, #36	@ 0x24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	58024400 	.word	0x58024400
 8005a98:	03d09000 	.word	0x03d09000
 8005a9c:	003d0900 	.word	0x003d0900
 8005aa0:	007a1200 	.word	0x007a1200
 8005aa4:	46000000 	.word	0x46000000
 8005aa8:	4c742400 	.word	0x4c742400
 8005aac:	4a742400 	.word	0x4a742400
 8005ab0:	4af42400 	.word	0x4af42400

08005ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005aba:	f7ff fe81 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4b10      	ldr	r3, [pc, #64]	@ (8005b04 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	0a1b      	lsrs	r3, r3, #8
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	490f      	ldr	r1, [pc, #60]	@ (8005b08 <HAL_RCC_GetHCLKFreq+0x54>)
 8005acc:	5ccb      	ldrb	r3, [r1, r3]
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b04 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	4a09      	ldr	r2, [pc, #36]	@ (8005b08 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ae2:	5cd3      	ldrb	r3, [r2, r3]
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	fa22 f303 	lsr.w	r3, r2, r3
 8005aee:	4a07      	ldr	r2, [pc, #28]	@ (8005b0c <HAL_RCC_GetHCLKFreq+0x58>)
 8005af0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005af2:	4a07      	ldr	r2, [pc, #28]	@ (8005b10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005af8:	4b04      	ldr	r3, [pc, #16]	@ (8005b0c <HAL_RCC_GetHCLKFreq+0x58>)
 8005afa:	681b      	ldr	r3, [r3, #0]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	58024400 	.word	0x58024400
 8005b08:	08009f78 	.word	0x08009f78
 8005b0c:	24000004 	.word	0x24000004
 8005b10:	24000000 	.word	0x24000000

08005b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b18:	f7ff ffcc 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	091b      	lsrs	r3, r3, #4
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	4904      	ldr	r1, [pc, #16]	@ (8005b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b2a:	5ccb      	ldrb	r3, [r1, r3]
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	58024400 	.word	0x58024400
 8005b3c:	08009f78 	.word	0x08009f78

08005b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b44:	f7ff ffb6 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	4904      	ldr	r1, [pc, #16]	@ (8005b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	58024400 	.word	0x58024400
 8005b68:	08009f78 	.word	0x08009f78

08005b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	223f      	movs	r2, #63	@ 0x3f
 8005b7a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005be8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0207 	and.w	r2, r3, #7
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005b88:	4b17      	ldr	r3, [pc, #92]	@ (8005be8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005b94:	4b14      	ldr	r3, [pc, #80]	@ (8005be8 <HAL_RCC_GetClockConfig+0x7c>)
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f003 020f 	and.w	r2, r3, #15
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005ba0:	4b11      	ldr	r3, [pc, #68]	@ (8005be8 <HAL_RCC_GetClockConfig+0x7c>)
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005bac:	4b0e      	ldr	r3, [pc, #56]	@ (8005be8 <HAL_RCC_GetClockConfig+0x7c>)
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005be8 <HAL_RCC_GetClockConfig+0x7c>)
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005bc4:	4b08      	ldr	r3, [pc, #32]	@ (8005be8 <HAL_RCC_GetClockConfig+0x7c>)
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005bd0:	4b06      	ldr	r3, [pc, #24]	@ (8005bec <HAL_RCC_GetClockConfig+0x80>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 020f 	and.w	r2, r3, #15
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	601a      	str	r2, [r3, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	58024400 	.word	0x58024400
 8005bec:	52002000 	.word	0x52002000

08005bf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf4:	b0c6      	sub	sp, #280	@ 0x118
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c02:	2300      	movs	r3, #0
 8005c04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005c14:	2500      	movs	r5, #0
 8005c16:	ea54 0305 	orrs.w	r3, r4, r5
 8005c1a:	d049      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c26:	d02f      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c2c:	d828      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c32:	d01a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c38:	d822      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c42:	d007      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c44:	e01c      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c46:	4bab      	ldr	r3, [pc, #684]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4a:	4aaa      	ldr	r2, [pc, #680]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c52:	e01a      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c58:	3308      	adds	r3, #8
 8005c5a:	2102      	movs	r1, #2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 fc25 	bl	80074ac <RCCEx_PLL2_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c68:	e00f      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6e:	3328      	adds	r3, #40	@ 0x28
 8005c70:	2102      	movs	r1, #2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 fccc 	bl	8007610 <RCCEx_PLL3_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c7e:	e004      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c86:	e000      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10a      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c92:	4b98      	ldr	r3, [pc, #608]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ca0:	4a94      	ldr	r2, [pc, #592]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ca6:	e003      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005cbc:	f04f 0900 	mov.w	r9, #0
 8005cc0:	ea58 0309 	orrs.w	r3, r8, r9
 8005cc4:	d047      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d82a      	bhi.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005ced 	.word	0x08005ced
 8005cdc:	08005cfb 	.word	0x08005cfb
 8005ce0:	08005d11 	.word	0x08005d11
 8005ce4:	08005d2f 	.word	0x08005d2f
 8005ce8:	08005d2f 	.word	0x08005d2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cec:	4b81      	ldr	r3, [pc, #516]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf0:	4a80      	ldr	r2, [pc, #512]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cf8:	e01a      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfe:	3308      	adds	r3, #8
 8005d00:	2100      	movs	r1, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	f001 fbd2 	bl	80074ac <RCCEx_PLL2_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d0e:	e00f      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d14:	3328      	adds	r3, #40	@ 0x28
 8005d16:	2100      	movs	r1, #0
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f001 fc79 	bl	8007610 <RCCEx_PLL3_Config>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d24:	e004      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d2c:	e000      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d38:	4b6e      	ldr	r3, [pc, #440]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d3c:	f023 0107 	bic.w	r1, r3, #7
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d46:	4a6b      	ldr	r2, [pc, #428]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d4c:	e003      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005d62:	f04f 0b00 	mov.w	fp, #0
 8005d66:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d6a:	d05b      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d74:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005d78:	d03b      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005d7a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005d7e:	d834      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d84:	d037      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d8a:	d82e      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d90:	d033      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005d92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d96:	d828      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d9c:	d01a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005d9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005da2:	d822      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005da8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dac:	d007      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005dae:	e01c      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db0:	4b50      	ldr	r3, [pc, #320]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db4:	4a4f      	ldr	r2, [pc, #316]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dbc:	e01e      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fb70 	bl	80074ac <RCCEx_PLL2_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005dd2:	e013      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd8:	3328      	adds	r3, #40	@ 0x28
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 fc17 	bl	8007610 <RCCEx_PLL3_Config>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005de8:	e008      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005df0:	e004      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005df2:	bf00      	nop
 8005df4:	e002      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005df6:	bf00      	nop
 8005df8:	e000      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10b      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e04:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e08:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e14:	4a37      	ldr	r2, [pc, #220]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e16:	430b      	orrs	r3, r1
 8005e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e1a:	e003      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005e30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e34:	2300      	movs	r3, #0
 8005e36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4313      	orrs	r3, r2
 8005e42:	d05d      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e4c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e50:	d03b      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e52:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e56:	d834      	bhi.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e5c:	d037      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005e5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e62:	d82e      	bhi.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e68:	d033      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005e6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e6e:	d828      	bhi.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e74:	d01a      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e7a:	d822      	bhi.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e84:	d007      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e86:	e01c      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e88:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8c:	4a19      	ldr	r2, [pc, #100]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e94:	e01e      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f001 fb04 	bl	80074ac <RCCEx_PLL2_Config>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005eaa:	e013      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb0:	3328      	adds	r3, #40	@ 0x28
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f001 fbab 	bl	8007610 <RCCEx_PLL3_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ec8:	e004      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005eca:	bf00      	nop
 8005ecc:	e002      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10d      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005edc:	4b05      	ldr	r3, [pc, #20]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005eec:	4a01      	ldr	r2, [pc, #4]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ef2:	e005      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005ef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005efc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005f0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005f10:	2300      	movs	r3, #0
 8005f12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005f16:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	d03a      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f26:	2b30      	cmp	r3, #48	@ 0x30
 8005f28:	d01f      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005f2a:	2b30      	cmp	r3, #48	@ 0x30
 8005f2c:	d819      	bhi.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d00c      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d815      	bhi.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d019      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f3a:	2b10      	cmp	r3, #16
 8005f3c:	d111      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f3e:	4baa      	ldr	r3, [pc, #680]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f42:	4aa9      	ldr	r2, [pc, #676]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f4a:	e011      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f50:	3308      	adds	r3, #8
 8005f52:	2102      	movs	r1, #2
 8005f54:	4618      	mov	r0, r3
 8005f56:	f001 faa9 	bl	80074ac <RCCEx_PLL2_Config>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f60:	e006      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f68:	e002      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005f6a:	bf00      	nop
 8005f6c:	e000      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005f78:	4b9b      	ldr	r3, [pc, #620]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f7c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f86:	4a98      	ldr	r2, [pc, #608]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f8c:	e003      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005fac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	d051      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fc0:	d035      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005fc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fc6:	d82e      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005fc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fcc:	d031      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005fce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fd2:	d828      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd8:	d01a      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fde:	d822      	bhi.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe8:	d007      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005fea:	e01c      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fec:	4b7e      	ldr	r3, [pc, #504]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff0:	4a7d      	ldr	r2, [pc, #500]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ff8:	e01c      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffe:	3308      	adds	r3, #8
 8006000:	2100      	movs	r1, #0
 8006002:	4618      	mov	r0, r3
 8006004:	f001 fa52 	bl	80074ac <RCCEx_PLL2_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800600e:	e011      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006014:	3328      	adds	r3, #40	@ 0x28
 8006016:	2100      	movs	r1, #0
 8006018:	4618      	mov	r0, r3
 800601a:	f001 faf9 	bl	8007610 <RCCEx_PLL3_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006024:	e006      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800602c:	e002      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800602e:	bf00      	nop
 8006030:	e000      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800603c:	4b6a      	ldr	r3, [pc, #424]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800603e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006040:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604a:	4a67      	ldr	r2, [pc, #412]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800604c:	430b      	orrs	r3, r1
 800604e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006050:	e003      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006056:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800605a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006066:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800606a:	2300      	movs	r3, #0
 800606c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006070:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006074:	460b      	mov	r3, r1
 8006076:	4313      	orrs	r3, r2
 8006078:	d053      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800607a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006084:	d033      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006086:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800608a:	d82c      	bhi.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800608c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006090:	d02f      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006092:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006096:	d826      	bhi.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006098:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800609c:	d02b      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800609e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060a2:	d820      	bhi.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060a8:	d012      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80060aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060ae:	d81a      	bhi.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d022      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80060b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060b8:	d115      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060be:	3308      	adds	r3, #8
 80060c0:	2101      	movs	r1, #1
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 f9f2 	bl	80074ac <RCCEx_PLL2_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060ce:	e015      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d4:	3328      	adds	r3, #40	@ 0x28
 80060d6:	2101      	movs	r1, #1
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 fa99 	bl	8007610 <RCCEx_PLL3_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060e4:	e00a      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060ec:	e006      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060ee:	bf00      	nop
 80060f0:	e004      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060f2:	bf00      	nop
 80060f4:	e002      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060f6:	bf00      	nop
 80060f8:	e000      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006104:	4b38      	ldr	r3, [pc, #224]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006108:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800610c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006112:	4a35      	ldr	r2, [pc, #212]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006114:	430b      	orrs	r3, r1
 8006116:	6513      	str	r3, [r2, #80]	@ 0x50
 8006118:	e003      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800611e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800612e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006132:	2300      	movs	r3, #0
 8006134:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006138:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800613c:	460b      	mov	r3, r1
 800613e:	4313      	orrs	r3, r2
 8006140:	d058      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006146:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800614a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800614e:	d033      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006154:	d82c      	bhi.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800615a:	d02f      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800615c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006160:	d826      	bhi.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006162:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006166:	d02b      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006168:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800616c:	d820      	bhi.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800616e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006172:	d012      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006178:	d81a      	bhi.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d022      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800617e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006182:	d115      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006188:	3308      	adds	r3, #8
 800618a:	2101      	movs	r1, #1
 800618c:	4618      	mov	r0, r3
 800618e:	f001 f98d 	bl	80074ac <RCCEx_PLL2_Config>
 8006192:	4603      	mov	r3, r0
 8006194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006198:	e015      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619e:	3328      	adds	r3, #40	@ 0x28
 80061a0:	2101      	movs	r1, #1
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 fa34 	bl	8007610 <RCCEx_PLL3_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061ae:	e00a      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061b6:	e006      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061b8:	bf00      	nop
 80061ba:	e004      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061bc:	bf00      	nop
 80061be:	e002      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061c0:	bf00      	nop
 80061c2:	e000      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10e      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80061ce:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80061d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061de:	4a02      	ldr	r2, [pc, #8]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061e0:	430b      	orrs	r3, r1
 80061e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80061e4:	e006      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80061e6:	bf00      	nop
 80061e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006200:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006204:	2300      	movs	r3, #0
 8006206:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800620a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800620e:	460b      	mov	r3, r1
 8006210:	4313      	orrs	r3, r2
 8006212:	d037      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800621a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800621e:	d00e      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006224:	d816      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d018      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800622a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800622e:	d111      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006230:	4bc4      	ldr	r3, [pc, #784]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006234:	4ac3      	ldr	r2, [pc, #780]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800623a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800623c:	e00f      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800623e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006242:	3308      	adds	r3, #8
 8006244:	2101      	movs	r1, #1
 8006246:	4618      	mov	r0, r3
 8006248:	f001 f930 	bl	80074ac <RCCEx_PLL2_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006252:	e004      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800625a:	e000      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800625c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006266:	4bb7      	ldr	r3, [pc, #732]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800626a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006274:	4ab3      	ldr	r2, [pc, #716]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006276:	430b      	orrs	r3, r1
 8006278:	6513      	str	r3, [r2, #80]	@ 0x50
 800627a:	e003      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006280:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006290:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006294:	2300      	movs	r3, #0
 8006296:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800629a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800629e:	460b      	mov	r3, r1
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d039      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d81c      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80062ae:	a201      	add	r2, pc, #4	@ (adr r2, 80062b4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	080062f1 	.word	0x080062f1
 80062b8:	080062c5 	.word	0x080062c5
 80062bc:	080062d3 	.word	0x080062d3
 80062c0:	080062f1 	.word	0x080062f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c4:	4b9f      	ldr	r3, [pc, #636]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c8:	4a9e      	ldr	r2, [pc, #632]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062d0:	e00f      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d6:	3308      	adds	r3, #8
 80062d8:	2102      	movs	r1, #2
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 f8e6 	bl	80074ac <RCCEx_PLL2_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062e6:	e004      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062ee:	e000      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80062f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80062fa:	4b92      	ldr	r3, [pc, #584]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062fe:	f023 0103 	bic.w	r1, r3, #3
 8006302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006308:	4a8e      	ldr	r2, [pc, #568]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800630a:	430b      	orrs	r3, r1
 800630c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800630e:	e003      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006314:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800632e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	f000 8099 	beq.w	800646c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800633a:	4b83      	ldr	r3, [pc, #524]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a82      	ldr	r2, [pc, #520]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006344:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006346:	f7fb f987 	bl	8001658 <HAL_GetTick>
 800634a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800634e:	e00b      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006350:	f7fb f982 	bl	8001658 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b64      	cmp	r3, #100	@ 0x64
 800635e:	d903      	bls.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006366:	e005      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006368:	4b77      	ldr	r3, [pc, #476]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0ed      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006378:	2b00      	cmp	r3, #0
 800637a:	d173      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800637c:	4b71      	ldr	r3, [pc, #452]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800637e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006388:	4053      	eors	r3, r2
 800638a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800638e:	2b00      	cmp	r3, #0
 8006390:	d015      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006392:	4b6c      	ldr	r3, [pc, #432]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800639a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800639e:	4b69      	ldr	r3, [pc, #420]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a2:	4a68      	ldr	r2, [pc, #416]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063aa:	4b66      	ldr	r3, [pc, #408]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ae:	4a65      	ldr	r2, [pc, #404]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80063b6:	4a63      	ldr	r2, [pc, #396]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80063be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ca:	d118      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063cc:	f7fb f944 	bl	8001658 <HAL_GetTick>
 80063d0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063d4:	e00d      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d6:	f7fb f93f 	bl	8001658 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80063e0:	1ad2      	subs	r2, r2, r3
 80063e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d903      	bls.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80063f0:	e005      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063f2:	4b54      	ldr	r3, [pc, #336]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0eb      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80063fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006402:	2b00      	cmp	r3, #0
 8006404:	d129      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800640e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006416:	d10e      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006418:	4b4a      	ldr	r3, [pc, #296]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006424:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006428:	091a      	lsrs	r2, r3, #4
 800642a:	4b48      	ldr	r3, [pc, #288]	@ (800654c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800642c:	4013      	ands	r3, r2
 800642e:	4a45      	ldr	r2, [pc, #276]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006430:	430b      	orrs	r3, r1
 8006432:	6113      	str	r3, [r2, #16]
 8006434:	e005      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006436:	4b43      	ldr	r3, [pc, #268]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	4a42      	ldr	r2, [pc, #264]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800643c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006440:	6113      	str	r3, [r2, #16]
 8006442:	4b40      	ldr	r3, [pc, #256]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006444:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800644e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006452:	4a3c      	ldr	r2, [pc, #240]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006454:	430b      	orrs	r3, r1
 8006456:	6713      	str	r3, [r2, #112]	@ 0x70
 8006458:	e008      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800645a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800645e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006462:	e003      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800646c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f002 0301 	and.w	r3, r2, #1
 8006478:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800647c:	2300      	movs	r3, #0
 800647e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006482:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006486:	460b      	mov	r3, r1
 8006488:	4313      	orrs	r3, r2
 800648a:	f000 808f 	beq.w	80065ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800648e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006494:	2b28      	cmp	r3, #40	@ 0x28
 8006496:	d871      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006498:	a201      	add	r2, pc, #4	@ (adr r2, 80064a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	08006585 	.word	0x08006585
 80064a4:	0800657d 	.word	0x0800657d
 80064a8:	0800657d 	.word	0x0800657d
 80064ac:	0800657d 	.word	0x0800657d
 80064b0:	0800657d 	.word	0x0800657d
 80064b4:	0800657d 	.word	0x0800657d
 80064b8:	0800657d 	.word	0x0800657d
 80064bc:	0800657d 	.word	0x0800657d
 80064c0:	08006551 	.word	0x08006551
 80064c4:	0800657d 	.word	0x0800657d
 80064c8:	0800657d 	.word	0x0800657d
 80064cc:	0800657d 	.word	0x0800657d
 80064d0:	0800657d 	.word	0x0800657d
 80064d4:	0800657d 	.word	0x0800657d
 80064d8:	0800657d 	.word	0x0800657d
 80064dc:	0800657d 	.word	0x0800657d
 80064e0:	08006567 	.word	0x08006567
 80064e4:	0800657d 	.word	0x0800657d
 80064e8:	0800657d 	.word	0x0800657d
 80064ec:	0800657d 	.word	0x0800657d
 80064f0:	0800657d 	.word	0x0800657d
 80064f4:	0800657d 	.word	0x0800657d
 80064f8:	0800657d 	.word	0x0800657d
 80064fc:	0800657d 	.word	0x0800657d
 8006500:	08006585 	.word	0x08006585
 8006504:	0800657d 	.word	0x0800657d
 8006508:	0800657d 	.word	0x0800657d
 800650c:	0800657d 	.word	0x0800657d
 8006510:	0800657d 	.word	0x0800657d
 8006514:	0800657d 	.word	0x0800657d
 8006518:	0800657d 	.word	0x0800657d
 800651c:	0800657d 	.word	0x0800657d
 8006520:	08006585 	.word	0x08006585
 8006524:	0800657d 	.word	0x0800657d
 8006528:	0800657d 	.word	0x0800657d
 800652c:	0800657d 	.word	0x0800657d
 8006530:	0800657d 	.word	0x0800657d
 8006534:	0800657d 	.word	0x0800657d
 8006538:	0800657d 	.word	0x0800657d
 800653c:	0800657d 	.word	0x0800657d
 8006540:	08006585 	.word	0x08006585
 8006544:	58024400 	.word	0x58024400
 8006548:	58024800 	.word	0x58024800
 800654c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006554:	3308      	adds	r3, #8
 8006556:	2101      	movs	r1, #1
 8006558:	4618      	mov	r0, r3
 800655a:	f000 ffa7 	bl	80074ac <RCCEx_PLL2_Config>
 800655e:	4603      	mov	r3, r0
 8006560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006564:	e00f      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656a:	3328      	adds	r3, #40	@ 0x28
 800656c:	2101      	movs	r1, #1
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f84e 	bl	8007610 <RCCEx_PLL3_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800657a:	e004      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006582:	e000      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006586:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800658e:	4bbf      	ldr	r3, [pc, #764]	@ (800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006592:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800659c:	4abb      	ldr	r2, [pc, #748]	@ (800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800659e:	430b      	orrs	r3, r1
 80065a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80065a2:	e003      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80065ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f002 0302 	and.w	r3, r2, #2
 80065b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065bc:	2300      	movs	r3, #0
 80065be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4313      	orrs	r3, r2
 80065ca:	d041      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80065cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d2:	2b05      	cmp	r3, #5
 80065d4:	d824      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80065d6:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	08006629 	.word	0x08006629
 80065e0:	080065f5 	.word	0x080065f5
 80065e4:	0800660b 	.word	0x0800660b
 80065e8:	08006629 	.word	0x08006629
 80065ec:	08006629 	.word	0x08006629
 80065f0:	08006629 	.word	0x08006629
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f8:	3308      	adds	r3, #8
 80065fa:	2101      	movs	r1, #1
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 ff55 	bl	80074ac <RCCEx_PLL2_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006608:	e00f      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800660a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660e:	3328      	adds	r3, #40	@ 0x28
 8006610:	2101      	movs	r1, #1
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fffc 	bl	8007610 <RCCEx_PLL3_Config>
 8006618:	4603      	mov	r3, r0
 800661a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800661e:	e004      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006626:	e000      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006632:	4b96      	ldr	r3, [pc, #600]	@ (800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006636:	f023 0107 	bic.w	r1, r3, #7
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006640:	4a92      	ldr	r2, [pc, #584]	@ (800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006642:	430b      	orrs	r3, r1
 8006644:	6553      	str	r3, [r2, #84]	@ 0x54
 8006646:	e003      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800664c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f002 0304 	and.w	r3, r2, #4
 800665c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006660:	2300      	movs	r3, #0
 8006662:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006666:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800666a:	460b      	mov	r3, r1
 800666c:	4313      	orrs	r3, r2
 800666e:	d044      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006678:	2b05      	cmp	r3, #5
 800667a:	d825      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800667c:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	080066d1 	.word	0x080066d1
 8006688:	0800669d 	.word	0x0800669d
 800668c:	080066b3 	.word	0x080066b3
 8006690:	080066d1 	.word	0x080066d1
 8006694:	080066d1 	.word	0x080066d1
 8006698:	080066d1 	.word	0x080066d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a0:	3308      	adds	r3, #8
 80066a2:	2101      	movs	r1, #1
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 ff01 	bl	80074ac <RCCEx_PLL2_Config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066b0:	e00f      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b6:	3328      	adds	r3, #40	@ 0x28
 80066b8:	2101      	movs	r1, #1
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 ffa8 	bl	8007610 <RCCEx_PLL3_Config>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066c6:	e004      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066ce:	e000      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80066d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066da:	4b6c      	ldr	r3, [pc, #432]	@ (800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066de:	f023 0107 	bic.w	r1, r3, #7
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ea:	4a68      	ldr	r2, [pc, #416]	@ (800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066ec:	430b      	orrs	r3, r1
 80066ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80066f0:	e003      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	f002 0320 	and.w	r3, r2, #32
 8006706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800670a:	2300      	movs	r3, #0
 800670c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006710:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006714:	460b      	mov	r3, r1
 8006716:	4313      	orrs	r3, r2
 8006718:	d055      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006722:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006726:	d033      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006728:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800672c:	d82c      	bhi.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800672e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006732:	d02f      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006738:	d826      	bhi.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800673a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800673e:	d02b      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006740:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006744:	d820      	bhi.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800674a:	d012      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800674c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006750:	d81a      	bhi.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d022      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006756:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800675a:	d115      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006760:	3308      	adds	r3, #8
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fea1 	bl	80074ac <RCCEx_PLL2_Config>
 800676a:	4603      	mov	r3, r0
 800676c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006770:	e015      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006776:	3328      	adds	r3, #40	@ 0x28
 8006778:	2102      	movs	r1, #2
 800677a:	4618      	mov	r0, r3
 800677c:	f000 ff48 	bl	8007610 <RCCEx_PLL3_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006786:	e00a      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800678e:	e006      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006790:	bf00      	nop
 8006792:	e004      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006794:	bf00      	nop
 8006796:	e002      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006798:	bf00      	nop
 800679a:	e000      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800679c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800679e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10b      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067a6:	4b39      	ldr	r3, [pc, #228]	@ (800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067b6:	4a35      	ldr	r2, [pc, #212]	@ (800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067b8:	430b      	orrs	r3, r1
 80067ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80067bc:	e003      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80067d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067d6:	2300      	movs	r3, #0
 80067d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067dc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80067e0:	460b      	mov	r3, r1
 80067e2:	4313      	orrs	r3, r2
 80067e4:	d058      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80067f2:	d033      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80067f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80067f8:	d82c      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80067fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067fe:	d02f      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006804:	d826      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006806:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800680a:	d02b      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800680c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006810:	d820      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006816:	d012      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800681c:	d81a      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d022      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006826:	d115      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682c:	3308      	adds	r3, #8
 800682e:	2100      	movs	r1, #0
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fe3b 	bl	80074ac <RCCEx_PLL2_Config>
 8006836:	4603      	mov	r3, r0
 8006838:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800683c:	e015      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800683e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006842:	3328      	adds	r3, #40	@ 0x28
 8006844:	2102      	movs	r1, #2
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fee2 	bl	8007610 <RCCEx_PLL3_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006852:	e00a      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800685a:	e006      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800685c:	bf00      	nop
 800685e:	e004      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006860:	bf00      	nop
 8006862:	e002      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006864:	bf00      	nop
 8006866:	e000      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10e      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006872:	4b06      	ldr	r3, [pc, #24]	@ (800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006876:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800687a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006882:	4a02      	ldr	r2, [pc, #8]	@ (800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006884:	430b      	orrs	r3, r1
 8006886:	6593      	str	r3, [r2, #88]	@ 0x58
 8006888:	e006      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800688a:	bf00      	nop
 800688c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006894:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80068a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068a8:	2300      	movs	r3, #0
 80068aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80068b2:	460b      	mov	r3, r1
 80068b4:	4313      	orrs	r3, r2
 80068b6:	d055      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80068c4:	d033      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80068c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80068ca:	d82c      	bhi.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068d0:	d02f      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80068d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068d6:	d826      	bhi.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80068dc:	d02b      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80068de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80068e2:	d820      	bhi.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068e8:	d012      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80068ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068ee:	d81a      	bhi.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d022      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80068f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068f8:	d115      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fe:	3308      	adds	r3, #8
 8006900:	2100      	movs	r1, #0
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fdd2 	bl	80074ac <RCCEx_PLL2_Config>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800690e:	e015      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006914:	3328      	adds	r3, #40	@ 0x28
 8006916:	2102      	movs	r1, #2
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fe79 	bl	8007610 <RCCEx_PLL3_Config>
 800691e:	4603      	mov	r3, r0
 8006920:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006924:	e00a      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800692c:	e006      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800692e:	bf00      	nop
 8006930:	e004      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006932:	bf00      	nop
 8006934:	e002      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800693a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800693c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006944:	4ba0      	ldr	r3, [pc, #640]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006948:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800694c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006950:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006954:	4a9c      	ldr	r2, [pc, #624]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006956:	430b      	orrs	r3, r1
 8006958:	6593      	str	r3, [r2, #88]	@ 0x58
 800695a:	e003      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006960:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f002 0308 	and.w	r3, r2, #8
 8006970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006974:	2300      	movs	r3, #0
 8006976:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800697a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800697e:	460b      	mov	r3, r1
 8006980:	4313      	orrs	r3, r2
 8006982:	d01e      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800698c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006990:	d10c      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006996:	3328      	adds	r3, #40	@ 0x28
 8006998:	2102      	movs	r1, #2
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fe38 	bl	8007610 <RCCEx_PLL3_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80069ac:	4b86      	ldr	r3, [pc, #536]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069bc:	4a82      	ldr	r2, [pc, #520]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069be:	430b      	orrs	r3, r1
 80069c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	f002 0310 	and.w	r3, r2, #16
 80069ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069d2:	2300      	movs	r3, #0
 80069d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069d8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80069dc:	460b      	mov	r3, r1
 80069de:	4313      	orrs	r3, r2
 80069e0:	d01e      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ee:	d10c      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f4:	3328      	adds	r3, #40	@ 0x28
 80069f6:	2102      	movs	r1, #2
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fe09 	bl	8007610 <RCCEx_PLL3_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a1a:	4a6b      	ldr	r2, [pc, #428]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006a2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a2e:	2300      	movs	r3, #0
 8006a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a32:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006a36:	460b      	mov	r3, r1
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	d03e      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a48:	d022      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006a4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a4e:	d81b      	bhi.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a58:	d00b      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006a5a:	e015      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a60:	3308      	adds	r3, #8
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fd21 	bl	80074ac <RCCEx_PLL2_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a70:	e00f      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a76:	3328      	adds	r3, #40	@ 0x28
 8006a78:	2102      	movs	r1, #2
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fdc8 	bl	8007610 <RCCEx_PLL3_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a86:	e004      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a8e:	e000      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10b      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a9e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006aaa:	4a47      	ldr	r2, [pc, #284]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aac:	430b      	orrs	r3, r1
 8006aae:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ab0:	e003      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ab6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006ac6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ac8:	2300      	movs	r3, #0
 8006aca:	677b      	str	r3, [r7, #116]	@ 0x74
 8006acc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	d03b      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ade:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ae2:	d01f      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006ae4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ae8:	d818      	bhi.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aee:	d003      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006af0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006af4:	d007      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006af6:	e011      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af8:	4b33      	ldr	r3, [pc, #204]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	4a32      	ldr	r2, [pc, #200]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b04:	e00f      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0a:	3328      	adds	r3, #40	@ 0x28
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fd7e 	bl	8007610 <RCCEx_PLL3_Config>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b1a:	e004      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b22:	e000      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b2e:	4b26      	ldr	r3, [pc, #152]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b3e:	4a22      	ldr	r2, [pc, #136]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b40:	430b      	orrs	r3, r1
 8006b42:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b44:	e003      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006b5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b60:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006b64:	460b      	mov	r3, r1
 8006b66:	4313      	orrs	r3, r2
 8006b68:	d034      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b78:	d007      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006b7a:	e011      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7c:	4b12      	ldr	r3, [pc, #72]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b80:	4a11      	ldr	r2, [pc, #68]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b88:	e00e      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8e:	3308      	adds	r3, #8
 8006b90:	2102      	movs	r1, #2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fc8a 	bl	80074ac <RCCEx_PLL2_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b9e:	e003      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10d      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006bb0:	4b05      	ldr	r3, [pc, #20]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bb4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bbe:	4a02      	ldr	r2, [pc, #8]	@ (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bc4:	e006      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006bc6:	bf00      	nop
 8006bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006be2:	2300      	movs	r3, #0
 8006be4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006be6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006bea:	460b      	mov	r3, r1
 8006bec:	4313      	orrs	r3, r2
 8006bee:	d00c      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf4:	3328      	adds	r3, #40	@ 0x28
 8006bf6:	2102      	movs	r1, #2
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fd09 	bl	8007610 <RCCEx_PLL3_Config>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006c16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c18:	2300      	movs	r3, #0
 8006c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c1c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006c20:	460b      	mov	r3, r1
 8006c22:	4313      	orrs	r3, r2
 8006c24:	d036      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c30:	d018      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c36:	d811      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c3c:	d014      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c42:	d80b      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d011      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c4c:	d106      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c4e:	4bb7      	ldr	r3, [pc, #732]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c52:	4ab6      	ldr	r2, [pc, #728]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c5a:	e008      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c62:	e004      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c76:	4bad      	ldr	r3, [pc, #692]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c84:	4aa9      	ldr	r2, [pc, #676]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c86:	430b      	orrs	r3, r1
 8006c88:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c8a:	e003      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ca0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ca6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006caa:	460b      	mov	r3, r1
 8006cac:	4313      	orrs	r3, r2
 8006cae:	d009      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cb0:	4b9e      	ldr	r3, [pc, #632]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cbe:	4a9b      	ldr	r2, [pc, #620]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cd6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	d009      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ce0:	4b92      	ldr	r3, [pc, #584]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ce4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cee:	4a8f      	ldr	r2, [pc, #572]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d02:	2300      	movs	r3, #0
 8006d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d06:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d10:	4b86      	ldr	r3, [pc, #536]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	4a85      	ldr	r2, [pc, #532]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d1a:	6113      	str	r3, [r2, #16]
 8006d1c:	4b83      	ldr	r3, [pc, #524]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d1e:	6919      	ldr	r1, [r3, #16]
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d28:	4a80      	ldr	r2, [pc, #512]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d40:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d44:	460b      	mov	r3, r1
 8006d46:	4313      	orrs	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d4a:	4b78      	ldr	r3, [pc, #480]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d58:	4a74      	ldr	r2, [pc, #464]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d5a:	430b      	orrs	r3, r1
 8006d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d70:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006d74:	460b      	mov	r3, r1
 8006d76:	4313      	orrs	r3, r2
 8006d78:	d00a      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d7e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d8a:	4a68      	ldr	r2, [pc, #416]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	2100      	movs	r1, #0
 8006d9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006da2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006da6:	460b      	mov	r3, r1
 8006da8:	4313      	orrs	r3, r2
 8006daa:	d011      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db0:	3308      	adds	r3, #8
 8006db2:	2100      	movs	r1, #0
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fb79 	bl	80074ac <RCCEx_PLL2_Config>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	6239      	str	r1, [r7, #32]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006de2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006de6:	460b      	mov	r3, r1
 8006de8:	4313      	orrs	r3, r2
 8006dea:	d011      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df0:	3308      	adds	r3, #8
 8006df2:	2101      	movs	r1, #1
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fb59 	bl	80074ac <RCCEx_PLL2_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	2100      	movs	r1, #0
 8006e1a:	61b9      	str	r1, [r7, #24]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e26:	460b      	mov	r3, r1
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	d011      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e30:	3308      	adds	r3, #8
 8006e32:	2102      	movs	r1, #2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 fb39 	bl	80074ac <RCCEx_PLL2_Config>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	2100      	movs	r1, #0
 8006e5a:	6139      	str	r1, [r7, #16]
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e66:	460b      	mov	r3, r1
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	d011      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e70:	3328      	adds	r3, #40	@ 0x28
 8006e72:	2100      	movs	r1, #0
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fbcb 	bl	8007610 <RCCEx_PLL3_Config>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	2100      	movs	r1, #0
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	d011      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	3328      	adds	r3, #40	@ 0x28
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fbab 	bl	8007610 <RCCEx_PLL3_Config>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ecc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	2100      	movs	r1, #0
 8006eda:	6039      	str	r1, [r7, #0]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	607b      	str	r3, [r7, #4]
 8006ee2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	d011      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef0:	3328      	adds	r3, #40	@ 0x28
 8006ef2:	2102      	movs	r1, #2
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fb8b 	bl	8007610 <RCCEx_PLL3_Config>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006f10:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e000      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006f24:	46bd      	mov	sp, r7
 8006f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f2a:	bf00      	nop
 8006f2c:	58024400 	.word	0x58024400

08006f30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f34:	f7fe fdbe 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	4b06      	ldr	r3, [pc, #24]	@ (8006f54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	091b      	lsrs	r3, r3, #4
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	4904      	ldr	r1, [pc, #16]	@ (8006f58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f46:	5ccb      	ldrb	r3, [r1, r3]
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	58024400 	.word	0x58024400
 8006f58:	08009f78 	.word	0x08009f78

08006f5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b089      	sub	sp, #36	@ 0x24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f64:	4ba1      	ldr	r3, [pc, #644]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f6e:	4b9f      	ldr	r3, [pc, #636]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	0b1b      	lsrs	r3, r3, #12
 8006f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f7a:	4b9c      	ldr	r3, [pc, #624]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	091b      	lsrs	r3, r3, #4
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f86:	4b99      	ldr	r3, [pc, #612]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8a:	08db      	lsrs	r3, r3, #3
 8006f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	fb02 f303 	mul.w	r3, r2, r3
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8111 	beq.w	80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	f000 8083 	beq.w	80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	f200 80a1 	bhi.w	80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d056      	beq.n	8007074 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006fc6:	e099      	b.n	80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc8:	4b88      	ldr	r3, [pc, #544]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d02d      	beq.n	8007030 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fd4:	4b85      	ldr	r3, [pc, #532]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	08db      	lsrs	r3, r3, #3
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	4a84      	ldr	r2, [pc, #528]	@ (80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	4b7b      	ldr	r3, [pc, #492]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007012:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800702e:	e087      	b.n	8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800703e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007042:	4b6a      	ldr	r3, [pc, #424]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007052:	ed97 6a03 	vldr	s12, [r7, #12]
 8007056:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800705a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007072:	e065      	b.n	8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007086:	4b59      	ldr	r3, [pc, #356]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007096:	ed97 6a03 	vldr	s12, [r7, #12]
 800709a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800709e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070b6:	e043      	b.n	8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80070c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ca:	4b48      	ldr	r3, [pc, #288]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070da:	ed97 6a03 	vldr	s12, [r7, #12]
 80070de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070fa:	e021      	b.n	8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007106:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800710a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710e:	4b37      	ldr	r3, [pc, #220]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007122:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007140:	4b2a      	ldr	r3, [pc, #168]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007144:	0a5b      	lsrs	r3, r3, #9
 8007146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800715a:	edd7 6a07 	vldr	s13, [r7, #28]
 800715e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007166:	ee17 2a90 	vmov	r2, s15
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800716e:	4b1f      	ldr	r3, [pc, #124]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007172:	0c1b      	lsrs	r3, r3, #16
 8007174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007178:	ee07 3a90 	vmov	s15, r3
 800717c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007180:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007184:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007188:	edd7 6a07 	vldr	s13, [r7, #28]
 800718c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007194:	ee17 2a90 	vmov	r2, s15
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800719c:	4b13      	ldr	r3, [pc, #76]	@ (80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a0:	0e1b      	lsrs	r3, r3, #24
 80071a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c2:	ee17 2a90 	vmov	r2, s15
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071ca:	e008      	b.n	80071de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	609a      	str	r2, [r3, #8]
}
 80071de:	bf00      	nop
 80071e0:	3724      	adds	r7, #36	@ 0x24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	58024400 	.word	0x58024400
 80071f0:	03d09000 	.word	0x03d09000
 80071f4:	46000000 	.word	0x46000000
 80071f8:	4c742400 	.word	0x4c742400
 80071fc:	4a742400 	.word	0x4a742400
 8007200:	4af42400 	.word	0x4af42400

08007204 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007204:	b480      	push	{r7}
 8007206:	b089      	sub	sp, #36	@ 0x24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800720c:	4ba1      	ldr	r3, [pc, #644]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007216:	4b9f      	ldr	r3, [pc, #636]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721a:	0d1b      	lsrs	r3, r3, #20
 800721c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007220:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007222:	4b9c      	ldr	r3, [pc, #624]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800722e:	4b99      	ldr	r3, [pc, #612]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007232:	08db      	lsrs	r3, r3, #3
 8007234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	fb02 f303 	mul.w	r3, r2, r3
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 8111 	beq.w	8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	2b02      	cmp	r3, #2
 8007256:	f000 8083 	beq.w	8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b02      	cmp	r3, #2
 800725e:	f200 80a1 	bhi.w	80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d056      	beq.n	800731c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800726e:	e099      	b.n	80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007270:	4b88      	ldr	r3, [pc, #544]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b00      	cmp	r3, #0
 800727a:	d02d      	beq.n	80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800727c:	4b85      	ldr	r3, [pc, #532]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	08db      	lsrs	r3, r3, #3
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	4a84      	ldr	r2, [pc, #528]	@ (8007498 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007288:	fa22 f303 	lsr.w	r3, r2, r3
 800728c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800749c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072d6:	e087      	b.n	80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800749c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800730e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800731a:	e065      	b.n	80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	4b59      	ldr	r3, [pc, #356]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007342:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800749c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800735e:	e043      	b.n	80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b48      	ldr	r3, [pc, #288]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a03 	vldr	s12, [r7, #12]
 8007386:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800749c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a2:	e021      	b.n	80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b6:	4b37      	ldr	r3, [pc, #220]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800749c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80073e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ec:	0a5b      	lsrs	r3, r3, #9
 80073ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007402:	edd7 6a07 	vldr	s13, [r7, #28]
 8007406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800740a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740e:	ee17 2a90 	vmov	r2, s15
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007416:	4b1f      	ldr	r3, [pc, #124]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007420:	ee07 3a90 	vmov	s15, r3
 8007424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007428:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800742c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007430:	edd7 6a07 	vldr	s13, [r7, #28]
 8007434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743c:	ee17 2a90 	vmov	r2, s15
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007444:	4b13      	ldr	r3, [pc, #76]	@ (8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007448:	0e1b      	lsrs	r3, r3, #24
 800744a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800745a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800745e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800746a:	ee17 2a90 	vmov	r2, s15
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007472:	e008      	b.n	8007486 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	609a      	str	r2, [r3, #8]
}
 8007486:	bf00      	nop
 8007488:	3724      	adds	r7, #36	@ 0x24
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	58024400 	.word	0x58024400
 8007498:	03d09000 	.word	0x03d09000
 800749c:	46000000 	.word	0x46000000
 80074a0:	4c742400 	.word	0x4c742400
 80074a4:	4a742400 	.word	0x4a742400
 80074a8:	4af42400 	.word	0x4af42400

080074ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074ba:	4b53      	ldr	r3, [pc, #332]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80074bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d101      	bne.n	80074ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e099      	b.n	80075fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074ca:	4b4f      	ldr	r3, [pc, #316]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a4e      	ldr	r2, [pc, #312]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80074d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d6:	f7fa f8bf 	bl	8001658 <HAL_GetTick>
 80074da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074dc:	e008      	b.n	80074f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074de:	f7fa f8bb 	bl	8001658 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d901      	bls.n	80074f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e086      	b.n	80075fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074f0:	4b45      	ldr	r3, [pc, #276]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f0      	bne.n	80074de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074fc:	4b42      	ldr	r3, [pc, #264]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80074fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007500:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	031b      	lsls	r3, r3, #12
 800750a:	493f      	ldr	r1, [pc, #252]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 800750c:	4313      	orrs	r3, r2
 800750e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	3b01      	subs	r3, #1
 8007516:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	3b01      	subs	r3, #1
 8007520:	025b      	lsls	r3, r3, #9
 8007522:	b29b      	uxth	r3, r3
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	3b01      	subs	r3, #1
 800752c:	041b      	lsls	r3, r3, #16
 800752e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	3b01      	subs	r3, #1
 800753a:	061b      	lsls	r3, r3, #24
 800753c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007540:	4931      	ldr	r1, [pc, #196]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 8007542:	4313      	orrs	r3, r2
 8007544:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007546:	4b30      	ldr	r3, [pc, #192]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 8007548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	492d      	ldr	r1, [pc, #180]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 8007554:	4313      	orrs	r3, r2
 8007556:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007558:	4b2b      	ldr	r3, [pc, #172]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 800755a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755c:	f023 0220 	bic.w	r2, r3, #32
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	4928      	ldr	r1, [pc, #160]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 8007566:	4313      	orrs	r3, r2
 8007568:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800756a:	4b27      	ldr	r3, [pc, #156]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 800756c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756e:	4a26      	ldr	r2, [pc, #152]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 8007570:	f023 0310 	bic.w	r3, r3, #16
 8007574:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007576:	4b24      	ldr	r3, [pc, #144]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 8007578:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800757a:	4b24      	ldr	r3, [pc, #144]	@ (800760c <RCCEx_PLL2_Config+0x160>)
 800757c:	4013      	ands	r3, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	69d2      	ldr	r2, [r2, #28]
 8007582:	00d2      	lsls	r2, r2, #3
 8007584:	4920      	ldr	r1, [pc, #128]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 8007586:	4313      	orrs	r3, r2
 8007588:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800758a:	4b1f      	ldr	r3, [pc, #124]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 800758c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758e:	4a1e      	ldr	r2, [pc, #120]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 8007590:	f043 0310 	orr.w	r3, r3, #16
 8007594:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d106      	bne.n	80075aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800759c:	4b1a      	ldr	r3, [pc, #104]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 800759e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a0:	4a19      	ldr	r2, [pc, #100]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80075a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075a8:	e00f      	b.n	80075ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d106      	bne.n	80075be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80075b0:	4b15      	ldr	r3, [pc, #84]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	4a14      	ldr	r2, [pc, #80]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80075b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075bc:	e005      	b.n	80075ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80075be:	4b12      	ldr	r3, [pc, #72]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80075c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c2:	4a11      	ldr	r2, [pc, #68]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80075c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a0e      	ldr	r2, [pc, #56]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80075d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d6:	f7fa f83f 	bl	8001658 <HAL_GetTick>
 80075da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075dc:	e008      	b.n	80075f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075de:	f7fa f83b 	bl	8001658 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d901      	bls.n	80075f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e006      	b.n	80075fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075f0:	4b05      	ldr	r3, [pc, #20]	@ (8007608 <RCCEx_PLL2_Config+0x15c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0f0      	beq.n	80075de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	58024400 	.word	0x58024400
 800760c:	ffff0007 	.word	0xffff0007

08007610 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800761e:	4b53      	ldr	r3, [pc, #332]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b03      	cmp	r3, #3
 8007628:	d101      	bne.n	800762e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e099      	b.n	8007762 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800762e:	4b4f      	ldr	r3, [pc, #316]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a4e      	ldr	r2, [pc, #312]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800763a:	f7fa f80d 	bl	8001658 <HAL_GetTick>
 800763e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007640:	e008      	b.n	8007654 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007642:	f7fa f809 	bl	8001658 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e086      	b.n	8007762 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007654:	4b45      	ldr	r3, [pc, #276]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f0      	bne.n	8007642 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007660:	4b42      	ldr	r3, [pc, #264]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007664:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	051b      	lsls	r3, r3, #20
 800766e:	493f      	ldr	r1, [pc, #252]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007670:	4313      	orrs	r3, r2
 8007672:	628b      	str	r3, [r1, #40]	@ 0x28
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	3b01      	subs	r3, #1
 800767a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	3b01      	subs	r3, #1
 8007684:	025b      	lsls	r3, r3, #9
 8007686:	b29b      	uxth	r3, r3
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	3b01      	subs	r3, #1
 8007690:	041b      	lsls	r3, r3, #16
 8007692:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	3b01      	subs	r3, #1
 800769e:	061b      	lsls	r3, r3, #24
 80076a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076a4:	4931      	ldr	r1, [pc, #196]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80076aa:	4b30      	ldr	r3, [pc, #192]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	492d      	ldr	r1, [pc, #180]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80076bc:	4b2b      	ldr	r3, [pc, #172]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	4928      	ldr	r1, [pc, #160]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076ce:	4b27      	ldr	r3, [pc, #156]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	4a26      	ldr	r2, [pc, #152]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 80076d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076da:	4b24      	ldr	r3, [pc, #144]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 80076dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076de:	4b24      	ldr	r3, [pc, #144]	@ (8007770 <RCCEx_PLL3_Config+0x160>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	69d2      	ldr	r2, [r2, #28]
 80076e6:	00d2      	lsls	r2, r2, #3
 80076e8:	4920      	ldr	r1, [pc, #128]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076ee:	4b1f      	ldr	r3, [pc, #124]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 80076f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f2:	4a1e      	ldr	r2, [pc, #120]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 80076f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007700:	4b1a      	ldr	r3, [pc, #104]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	4a19      	ldr	r2, [pc, #100]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007706:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800770a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800770c:	e00f      	b.n	800772e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d106      	bne.n	8007722 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007714:	4b15      	ldr	r3, [pc, #84]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007718:	4a14      	ldr	r2, [pc, #80]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 800771a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800771e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007720:	e005      	b.n	800772e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007722:	4b12      	ldr	r3, [pc, #72]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007726:	4a11      	ldr	r2, [pc, #68]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007728:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800772c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800772e:	4b0f      	ldr	r3, [pc, #60]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a0e      	ldr	r2, [pc, #56]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773a:	f7f9 ff8d 	bl	8001658 <HAL_GetTick>
 800773e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007740:	e008      	b.n	8007754 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007742:	f7f9 ff89 	bl	8001658 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e006      	b.n	8007762 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007754:	4b05      	ldr	r3, [pc, #20]	@ (800776c <RCCEx_PLL3_Config+0x15c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0f0      	beq.n	8007742 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	58024400 	.word	0x58024400
 8007770:	ffff0007 	.word	0xffff0007

08007774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e049      	b.n	800781a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f841 	bl	8007822 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3304      	adds	r3, #4
 80077b0:	4619      	mov	r1, r3
 80077b2:	4610      	mov	r0, r2
 80077b4:	f000 f9f6 	bl	8007ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
	...

08007838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b01      	cmp	r3, #1
 800784a:	d001      	beq.n	8007850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e05e      	b.n	800790e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a2b      	ldr	r2, [pc, #172]	@ (800791c <HAL_TIM_Base_Start_IT+0xe4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d02c      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x94>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787a:	d027      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x94>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a27      	ldr	r2, [pc, #156]	@ (8007920 <HAL_TIM_Base_Start_IT+0xe8>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d022      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x94>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a26      	ldr	r2, [pc, #152]	@ (8007924 <HAL_TIM_Base_Start_IT+0xec>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d01d      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x94>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a24      	ldr	r2, [pc, #144]	@ (8007928 <HAL_TIM_Base_Start_IT+0xf0>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d018      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x94>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a23      	ldr	r2, [pc, #140]	@ (800792c <HAL_TIM_Base_Start_IT+0xf4>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d013      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x94>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a21      	ldr	r2, [pc, #132]	@ (8007930 <HAL_TIM_Base_Start_IT+0xf8>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00e      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x94>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a20      	ldr	r2, [pc, #128]	@ (8007934 <HAL_TIM_Base_Start_IT+0xfc>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d009      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x94>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007938 <HAL_TIM_Base_Start_IT+0x100>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d004      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x94>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a1d      	ldr	r2, [pc, #116]	@ (800793c <HAL_TIM_Base_Start_IT+0x104>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d115      	bne.n	80078f8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007940 <HAL_TIM_Base_Start_IT+0x108>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b06      	cmp	r3, #6
 80078dc:	d015      	beq.n	800790a <HAL_TIM_Base_Start_IT+0xd2>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e4:	d011      	beq.n	800790a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f042 0201 	orr.w	r2, r2, #1
 80078f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f6:	e008      	b.n	800790a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f042 0201 	orr.w	r2, r2, #1
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	e000      	b.n	800790c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800790a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40010000 	.word	0x40010000
 8007920:	40000400 	.word	0x40000400
 8007924:	40000800 	.word	0x40000800
 8007928:	40000c00 	.word	0x40000c00
 800792c:	40010400 	.word	0x40010400
 8007930:	40001800 	.word	0x40001800
 8007934:	40014000 	.word	0x40014000
 8007938:	4000e000 	.word	0x4000e000
 800793c:	4000e400 	.word	0x4000e400
 8007940:	00010007 	.word	0x00010007

08007944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d020      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01b      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f06f 0202 	mvn.w	r2, #2
 8007978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f8e9 	bl	8007b66 <HAL_TIM_IC_CaptureCallback>
 8007994:	e005      	b.n	80079a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f8db 	bl	8007b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f8ec 	bl	8007b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 0304 	and.w	r3, r3, #4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d020      	beq.n	80079f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01b      	beq.n	80079f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0204 	mvn.w	r2, #4
 80079c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2202      	movs	r2, #2
 80079ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f8c3 	bl	8007b66 <HAL_TIM_IC_CaptureCallback>
 80079e0:	e005      	b.n	80079ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f8b5 	bl	8007b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f8c6 	bl	8007b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d020      	beq.n	8007a40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01b      	beq.n	8007a40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0208 	mvn.w	r2, #8
 8007a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2204      	movs	r2, #4
 8007a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f89d 	bl	8007b66 <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e005      	b.n	8007a3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f88f 	bl	8007b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f8a0 	bl	8007b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d020      	beq.n	8007a8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01b      	beq.n	8007a8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0210 	mvn.w	r2, #16
 8007a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2208      	movs	r2, #8
 8007a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f877 	bl	8007b66 <HAL_TIM_IC_CaptureCallback>
 8007a78:	e005      	b.n	8007a86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f869 	bl	8007b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f87a 	bl	8007b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00c      	beq.n	8007ab0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d007      	beq.n	8007ab0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0201 	mvn.w	r2, #1
 8007aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7f9 fb52 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d104      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00c      	beq.n	8007ade <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d007      	beq.n	8007ade <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f91f 	bl	8007d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d007      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f917 	bl	8007d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f834 	bl	8007b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00c      	beq.n	8007b4a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f06f 0220 	mvn.w	r2, #32
 8007b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f8df 	bl	8007d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
	...

08007ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a4a      	ldr	r2, [pc, #296]	@ (8007ce0 <TIM_Base_SetConfig+0x13c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d013      	beq.n	8007be4 <TIM_Base_SetConfig+0x40>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc2:	d00f      	beq.n	8007be4 <TIM_Base_SetConfig+0x40>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a47      	ldr	r2, [pc, #284]	@ (8007ce4 <TIM_Base_SetConfig+0x140>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00b      	beq.n	8007be4 <TIM_Base_SetConfig+0x40>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a46      	ldr	r2, [pc, #280]	@ (8007ce8 <TIM_Base_SetConfig+0x144>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d007      	beq.n	8007be4 <TIM_Base_SetConfig+0x40>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a45      	ldr	r2, [pc, #276]	@ (8007cec <TIM_Base_SetConfig+0x148>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_Base_SetConfig+0x40>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a44      	ldr	r2, [pc, #272]	@ (8007cf0 <TIM_Base_SetConfig+0x14c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d108      	bne.n	8007bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a39      	ldr	r2, [pc, #228]	@ (8007ce0 <TIM_Base_SetConfig+0x13c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d027      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c04:	d023      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a36      	ldr	r2, [pc, #216]	@ (8007ce4 <TIM_Base_SetConfig+0x140>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d01f      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a35      	ldr	r2, [pc, #212]	@ (8007ce8 <TIM_Base_SetConfig+0x144>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d01b      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a34      	ldr	r2, [pc, #208]	@ (8007cec <TIM_Base_SetConfig+0x148>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d017      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a33      	ldr	r2, [pc, #204]	@ (8007cf0 <TIM_Base_SetConfig+0x14c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d013      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a32      	ldr	r2, [pc, #200]	@ (8007cf4 <TIM_Base_SetConfig+0x150>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00f      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a31      	ldr	r2, [pc, #196]	@ (8007cf8 <TIM_Base_SetConfig+0x154>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00b      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a30      	ldr	r2, [pc, #192]	@ (8007cfc <TIM_Base_SetConfig+0x158>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d007      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a2f      	ldr	r2, [pc, #188]	@ (8007d00 <TIM_Base_SetConfig+0x15c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d003      	beq.n	8007c4e <TIM_Base_SetConfig+0xaa>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a2e      	ldr	r2, [pc, #184]	@ (8007d04 <TIM_Base_SetConfig+0x160>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d108      	bne.n	8007c60 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a16      	ldr	r2, [pc, #88]	@ (8007ce0 <TIM_Base_SetConfig+0x13c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00f      	beq.n	8007cac <TIM_Base_SetConfig+0x108>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a18      	ldr	r2, [pc, #96]	@ (8007cf0 <TIM_Base_SetConfig+0x14c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00b      	beq.n	8007cac <TIM_Base_SetConfig+0x108>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a17      	ldr	r2, [pc, #92]	@ (8007cf4 <TIM_Base_SetConfig+0x150>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d007      	beq.n	8007cac <TIM_Base_SetConfig+0x108>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a16      	ldr	r2, [pc, #88]	@ (8007cf8 <TIM_Base_SetConfig+0x154>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d003      	beq.n	8007cac <TIM_Base_SetConfig+0x108>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a15      	ldr	r2, [pc, #84]	@ (8007cfc <TIM_Base_SetConfig+0x158>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d103      	bne.n	8007cb4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d105      	bne.n	8007cd2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f023 0201 	bic.w	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	611a      	str	r2, [r3, #16]
  }
}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	40010000 	.word	0x40010000
 8007ce4:	40000400 	.word	0x40000400
 8007ce8:	40000800 	.word	0x40000800
 8007cec:	40000c00 	.word	0x40000c00
 8007cf0:	40010400 	.word	0x40010400
 8007cf4:	40014000 	.word	0x40014000
 8007cf8:	40014400 	.word	0x40014400
 8007cfc:	40014800 	.word	0x40014800
 8007d00:	4000e000 	.word	0x4000e000
 8007d04:	4000e400 	.word	0x4000e400

08007d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e042      	b.n	8007ddc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d106      	bne.n	8007d6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7f9 fa25 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2224      	movs	r2, #36	@ 0x24
 8007d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0201 	bic.w	r2, r2, #1
 8007d84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 fb04 	bl	800939c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fc95 	bl	80086c4 <UART_SetConfig>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d101      	bne.n	8007da4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e01b      	b.n	8007ddc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0201 	orr.w	r2, r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 fb83 	bl	80094e0 <UART_CheckIdleState>
 8007dda:	4603      	mov	r3, r0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b08a      	sub	sp, #40	@ 0x28
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	4613      	mov	r3, r2
 8007df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	d17b      	bne.n	8007ef6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <HAL_UART_Transmit+0x26>
 8007e04:	88fb      	ldrh	r3, [r7, #6]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e074      	b.n	8007ef8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2221      	movs	r2, #33	@ 0x21
 8007e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e1e:	f7f9 fc1b 	bl	8001658 <HAL_GetTick>
 8007e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	88fa      	ldrh	r2, [r7, #6]
 8007e28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	88fa      	ldrh	r2, [r7, #6]
 8007e30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e3c:	d108      	bne.n	8007e50 <HAL_UART_Transmit+0x6c>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d104      	bne.n	8007e50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	e003      	b.n	8007e58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e54:	2300      	movs	r3, #0
 8007e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e58:	e030      	b.n	8007ebc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2200      	movs	r2, #0
 8007e62:	2180      	movs	r1, #128	@ 0x80
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f001 fbe5 	bl	8009634 <UART_WaitOnFlagUntilTimeout>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e03d      	b.n	8007ef8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10b      	bne.n	8007e9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	3302      	adds	r3, #2
 8007e96:	61bb      	str	r3, [r7, #24]
 8007e98:	e007      	b.n	8007eaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1c8      	bne.n	8007e5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2140      	movs	r1, #64	@ 0x40
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f001 fbae 	bl	8009634 <UART_WaitOnFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d005      	beq.n	8007eea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e006      	b.n	8007ef8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e000      	b.n	8007ef8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007ef6:	2302      	movs	r3, #2
  }
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b0ba      	sub	sp, #232	@ 0xe8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007f2e:	4013      	ands	r3, r2
 8007f30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d11b      	bne.n	8007f74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d015      	beq.n	8007f74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d105      	bne.n	8007f60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d009      	beq.n	8007f74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 8377 	beq.w	8008658 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
      }
      return;
 8007f72:	e371      	b.n	8008658 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8123 	beq.w	80081c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f82:	4b8d      	ldr	r3, [pc, #564]	@ (80081b8 <HAL_UART_IRQHandler+0x2b8>)
 8007f84:	4013      	ands	r3, r2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007f8e:	4b8b      	ldr	r3, [pc, #556]	@ (80081bc <HAL_UART_IRQHandler+0x2bc>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 8116 	beq.w	80081c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d011      	beq.n	8007fc8 <HAL_UART_IRQHandler+0xc8>
 8007fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00b      	beq.n	8007fc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fbe:	f043 0201 	orr.w	r2, r3, #1
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d011      	beq.n	8007ff8 <HAL_UART_IRQHandler+0xf8>
 8007fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00b      	beq.n	8007ff8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fee:	f043 0204 	orr.w	r2, r3, #4
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	2b00      	cmp	r3, #0
 8008002:	d011      	beq.n	8008028 <HAL_UART_IRQHandler+0x128>
 8008004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00b      	beq.n	8008028 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2204      	movs	r2, #4
 8008016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800801e:	f043 0202 	orr.w	r2, r3, #2
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d017      	beq.n	8008064 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008038:	f003 0320 	and.w	r3, r3, #32
 800803c:	2b00      	cmp	r3, #0
 800803e:	d105      	bne.n	800804c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008040:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008044:	4b5c      	ldr	r3, [pc, #368]	@ (80081b8 <HAL_UART_IRQHandler+0x2b8>)
 8008046:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00b      	beq.n	8008064 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2208      	movs	r2, #8
 8008052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800805a:	f043 0208 	orr.w	r2, r3, #8
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800806c:	2b00      	cmp	r3, #0
 800806e:	d012      	beq.n	8008096 <HAL_UART_IRQHandler+0x196>
 8008070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008074:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00c      	beq.n	8008096 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808c:	f043 0220 	orr.w	r2, r3, #32
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 82dd 	beq.w	800865c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d013      	beq.n	80080d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ea:	2b40      	cmp	r3, #64	@ 0x40
 80080ec:	d005      	beq.n	80080fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d054      	beq.n	80081a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 fbf0 	bl	80098e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810a:	2b40      	cmp	r3, #64	@ 0x40
 800810c:	d146      	bne.n	800819c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3308      	adds	r3, #8
 8008114:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008124:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800812c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800813a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800813e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008146:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800814a:	e841 2300 	strex	r3, r2, [r1]
 800814e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1d9      	bne.n	800810e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008160:	2b00      	cmp	r3, #0
 8008162:	d017      	beq.n	8008194 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800816a:	4a15      	ldr	r2, [pc, #84]	@ (80081c0 <HAL_UART_IRQHandler+0x2c0>)
 800816c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008174:	4618      	mov	r0, r3
 8008176:	f7fa fc5f 	bl	8002a38 <HAL_DMA_Abort_IT>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d019      	beq.n	80081b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800818e:	4610      	mov	r0, r2
 8008190:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008192:	e00f      	b.n	80081b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fa8b 	bl	80086b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819a:	e00b      	b.n	80081b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fa87 	bl	80086b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a2:	e007      	b.n	80081b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fa83 	bl	80086b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80081b2:	e253      	b.n	800865c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b4:	bf00      	nop
    return;
 80081b6:	e251      	b.n	800865c <HAL_UART_IRQHandler+0x75c>
 80081b8:	10000001 	.word	0x10000001
 80081bc:	04000120 	.word	0x04000120
 80081c0:	08009b93 	.word	0x08009b93

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	f040 81e7 	bne.w	800859c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081d2:	f003 0310 	and.w	r3, r3, #16
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 81e0 	beq.w	800859c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081e0:	f003 0310 	and.w	r3, r3, #16
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 81d9 	beq.w	800859c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2210      	movs	r2, #16
 80081f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081fc:	2b40      	cmp	r3, #64	@ 0x40
 80081fe:	f040 8151 	bne.w	80084a4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a96      	ldr	r2, [pc, #600]	@ (8008464 <HAL_UART_IRQHandler+0x564>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d068      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a93      	ldr	r2, [pc, #588]	@ (8008468 <HAL_UART_IRQHandler+0x568>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d061      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a91      	ldr	r2, [pc, #580]	@ (800846c <HAL_UART_IRQHandler+0x56c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d05a      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a8e      	ldr	r2, [pc, #568]	@ (8008470 <HAL_UART_IRQHandler+0x570>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d053      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a8c      	ldr	r2, [pc, #560]	@ (8008474 <HAL_UART_IRQHandler+0x574>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d04c      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a89      	ldr	r2, [pc, #548]	@ (8008478 <HAL_UART_IRQHandler+0x578>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d045      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a87      	ldr	r2, [pc, #540]	@ (800847c <HAL_UART_IRQHandler+0x57c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d03e      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a84      	ldr	r2, [pc, #528]	@ (8008480 <HAL_UART_IRQHandler+0x580>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d037      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a82      	ldr	r2, [pc, #520]	@ (8008484 <HAL_UART_IRQHandler+0x584>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d030      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a7f      	ldr	r2, [pc, #508]	@ (8008488 <HAL_UART_IRQHandler+0x588>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d029      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a7d      	ldr	r2, [pc, #500]	@ (800848c <HAL_UART_IRQHandler+0x58c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d022      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a7a      	ldr	r2, [pc, #488]	@ (8008490 <HAL_UART_IRQHandler+0x590>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d01b      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a78      	ldr	r2, [pc, #480]	@ (8008494 <HAL_UART_IRQHandler+0x594>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d014      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a75      	ldr	r2, [pc, #468]	@ (8008498 <HAL_UART_IRQHandler+0x598>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00d      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a73      	ldr	r2, [pc, #460]	@ (800849c <HAL_UART_IRQHandler+0x59c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d006      	beq.n	80082e2 <HAL_UART_IRQHandler+0x3e2>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a70      	ldr	r2, [pc, #448]	@ (80084a0 <HAL_UART_IRQHandler+0x5a0>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d106      	bne.n	80082f0 <HAL_UART_IRQHandler+0x3f0>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	e005      	b.n	80082fc <HAL_UART_IRQHandler+0x3fc>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008300:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 81ab 	beq.w	8008660 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008310:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008314:	429a      	cmp	r2, r3
 8008316:	f080 81a3 	bcs.w	8008660 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008320:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008330:	f000 8087 	beq.w	8008442 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008348:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800834c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800835e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008362:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800836a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008376:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1da      	bne.n	8008334 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800838e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3308      	adds	r3, #8
 800839e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80083a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80083a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80083aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80083b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e1      	bne.n	800837e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3308      	adds	r3, #8
 80083c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80083ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3308      	adds	r3, #8
 80083da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80083de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80083ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e3      	bne.n	80083ba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2220      	movs	r2, #32
 80083f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800840e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008410:	f023 0310 	bic.w	r3, r3, #16
 8008414:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008422:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008424:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008428:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1e4      	bne.n	8008400 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800843c:	4618      	mov	r0, r3
 800843e:	f7f9 ffdd 	bl	80023fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2202      	movs	r2, #2
 8008446:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008454:	b29b      	uxth	r3, r3
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	b29b      	uxth	r3, r3
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7f8 fa05 	bl	800086c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008462:	e0fd      	b.n	8008660 <HAL_UART_IRQHandler+0x760>
 8008464:	40020010 	.word	0x40020010
 8008468:	40020028 	.word	0x40020028
 800846c:	40020040 	.word	0x40020040
 8008470:	40020058 	.word	0x40020058
 8008474:	40020070 	.word	0x40020070
 8008478:	40020088 	.word	0x40020088
 800847c:	400200a0 	.word	0x400200a0
 8008480:	400200b8 	.word	0x400200b8
 8008484:	40020410 	.word	0x40020410
 8008488:	40020428 	.word	0x40020428
 800848c:	40020440 	.word	0x40020440
 8008490:	40020458 	.word	0x40020458
 8008494:	40020470 	.word	0x40020470
 8008498:	40020488 	.word	0x40020488
 800849c:	400204a0 	.word	0x400204a0
 80084a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084be:	b29b      	uxth	r3, r3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 80cf 	beq.w	8008664 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80084c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 80ca 	beq.w	8008664 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80084f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e4      	bne.n	80084d0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3308      	adds	r3, #8
 800850c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	623b      	str	r3, [r7, #32]
   return(result);
 8008516:	6a3a      	ldr	r2, [r7, #32]
 8008518:	4b55      	ldr	r3, [pc, #340]	@ (8008670 <HAL_UART_IRQHandler+0x770>)
 800851a:	4013      	ands	r3, r2
 800851c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3308      	adds	r3, #8
 8008526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800852a:	633a      	str	r2, [r7, #48]	@ 0x30
 800852c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e3      	bne.n	8008506 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0310 	bic.w	r3, r3, #16
 8008566:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008574:	61fb      	str	r3, [r7, #28]
 8008576:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	69b9      	ldr	r1, [r7, #24]
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	617b      	str	r3, [r7, #20]
   return(result);
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e4      	bne.n	8008552 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2202      	movs	r2, #2
 800858c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800858e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7f8 f969 	bl	800086c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800859a:	e063      	b.n	8008664 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800859c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00e      	beq.n	80085c6 <HAL_UART_IRQHandler+0x6c6>
 80085a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d008      	beq.n	80085c6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80085bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f001 fb28 	bl	8009c14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085c4:	e051      	b.n	800866a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d014      	beq.n	80085fc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d105      	bne.n	80085ea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80085de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d008      	beq.n	80085fc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d03a      	beq.n	8008668 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
    }
    return;
 80085fa:	e035      	b.n	8008668 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008604:	2b00      	cmp	r3, #0
 8008606:	d009      	beq.n	800861c <HAL_UART_IRQHandler+0x71c>
 8008608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800860c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 fad2 	bl	8009bbe <UART_EndTransmit_IT>
    return;
 800861a:	e026      	b.n	800866a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800861c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008620:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d009      	beq.n	800863c <HAL_UART_IRQHandler+0x73c>
 8008628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800862c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f001 fb01 	bl	8009c3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800863a:	e016      	b.n	800866a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800863c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d010      	beq.n	800866a <HAL_UART_IRQHandler+0x76a>
 8008648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800864c:	2b00      	cmp	r3, #0
 800864e:	da0c      	bge.n	800866a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 fae9 	bl	8009c28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008656:	e008      	b.n	800866a <HAL_UART_IRQHandler+0x76a>
      return;
 8008658:	bf00      	nop
 800865a:	e006      	b.n	800866a <HAL_UART_IRQHandler+0x76a>
    return;
 800865c:	bf00      	nop
 800865e:	e004      	b.n	800866a <HAL_UART_IRQHandler+0x76a>
      return;
 8008660:	bf00      	nop
 8008662:	e002      	b.n	800866a <HAL_UART_IRQHandler+0x76a>
      return;
 8008664:	bf00      	nop
 8008666:	e000      	b.n	800866a <HAL_UART_IRQHandler+0x76a>
    return;
 8008668:	bf00      	nop
  }
}
 800866a:	37e8      	adds	r7, #232	@ 0xe8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	effffffe 	.word	0xeffffffe

08008674 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086c8:	b092      	sub	sp, #72	@ 0x48
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	431a      	orrs	r2, r3
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	431a      	orrs	r2, r3
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	4bbe      	ldr	r3, [pc, #760]	@ (80089ec <UART_SetConfig+0x328>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	6812      	ldr	r2, [r2, #0]
 80086fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086fc:	430b      	orrs	r3, r1
 80086fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4ab3      	ldr	r2, [pc, #716]	@ (80089f0 <UART_SetConfig+0x32c>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d004      	beq.n	8008730 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800872c:	4313      	orrs	r3, r2
 800872e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	4baf      	ldr	r3, [pc, #700]	@ (80089f4 <UART_SetConfig+0x330>)
 8008738:	4013      	ands	r3, r2
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008740:	430b      	orrs	r3, r1
 8008742:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874a:	f023 010f 	bic.w	r1, r3, #15
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4aa6      	ldr	r2, [pc, #664]	@ (80089f8 <UART_SetConfig+0x334>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d177      	bne.n	8008854 <UART_SetConfig+0x190>
 8008764:	4ba5      	ldr	r3, [pc, #660]	@ (80089fc <UART_SetConfig+0x338>)
 8008766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008768:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800876c:	2b28      	cmp	r3, #40	@ 0x28
 800876e:	d86d      	bhi.n	800884c <UART_SetConfig+0x188>
 8008770:	a201      	add	r2, pc, #4	@ (adr r2, 8008778 <UART_SetConfig+0xb4>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	0800881d 	.word	0x0800881d
 800877c:	0800884d 	.word	0x0800884d
 8008780:	0800884d 	.word	0x0800884d
 8008784:	0800884d 	.word	0x0800884d
 8008788:	0800884d 	.word	0x0800884d
 800878c:	0800884d 	.word	0x0800884d
 8008790:	0800884d 	.word	0x0800884d
 8008794:	0800884d 	.word	0x0800884d
 8008798:	08008825 	.word	0x08008825
 800879c:	0800884d 	.word	0x0800884d
 80087a0:	0800884d 	.word	0x0800884d
 80087a4:	0800884d 	.word	0x0800884d
 80087a8:	0800884d 	.word	0x0800884d
 80087ac:	0800884d 	.word	0x0800884d
 80087b0:	0800884d 	.word	0x0800884d
 80087b4:	0800884d 	.word	0x0800884d
 80087b8:	0800882d 	.word	0x0800882d
 80087bc:	0800884d 	.word	0x0800884d
 80087c0:	0800884d 	.word	0x0800884d
 80087c4:	0800884d 	.word	0x0800884d
 80087c8:	0800884d 	.word	0x0800884d
 80087cc:	0800884d 	.word	0x0800884d
 80087d0:	0800884d 	.word	0x0800884d
 80087d4:	0800884d 	.word	0x0800884d
 80087d8:	08008835 	.word	0x08008835
 80087dc:	0800884d 	.word	0x0800884d
 80087e0:	0800884d 	.word	0x0800884d
 80087e4:	0800884d 	.word	0x0800884d
 80087e8:	0800884d 	.word	0x0800884d
 80087ec:	0800884d 	.word	0x0800884d
 80087f0:	0800884d 	.word	0x0800884d
 80087f4:	0800884d 	.word	0x0800884d
 80087f8:	0800883d 	.word	0x0800883d
 80087fc:	0800884d 	.word	0x0800884d
 8008800:	0800884d 	.word	0x0800884d
 8008804:	0800884d 	.word	0x0800884d
 8008808:	0800884d 	.word	0x0800884d
 800880c:	0800884d 	.word	0x0800884d
 8008810:	0800884d 	.word	0x0800884d
 8008814:	0800884d 	.word	0x0800884d
 8008818:	08008845 	.word	0x08008845
 800881c:	2301      	movs	r3, #1
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008822:	e326      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008824:	2304      	movs	r3, #4
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800882a:	e322      	b.n	8008e72 <UART_SetConfig+0x7ae>
 800882c:	2308      	movs	r3, #8
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008832:	e31e      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008834:	2310      	movs	r3, #16
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883a:	e31a      	b.n	8008e72 <UART_SetConfig+0x7ae>
 800883c:	2320      	movs	r3, #32
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008842:	e316      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008844:	2340      	movs	r3, #64	@ 0x40
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884a:	e312      	b.n	8008e72 <UART_SetConfig+0x7ae>
 800884c:	2380      	movs	r3, #128	@ 0x80
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e30e      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a69      	ldr	r2, [pc, #420]	@ (8008a00 <UART_SetConfig+0x33c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d130      	bne.n	80088c0 <UART_SetConfig+0x1fc>
 800885e:	4b67      	ldr	r3, [pc, #412]	@ (80089fc <UART_SetConfig+0x338>)
 8008860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	2b05      	cmp	r3, #5
 8008868:	d826      	bhi.n	80088b8 <UART_SetConfig+0x1f4>
 800886a:	a201      	add	r2, pc, #4	@ (adr r2, 8008870 <UART_SetConfig+0x1ac>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	08008889 	.word	0x08008889
 8008874:	08008891 	.word	0x08008891
 8008878:	08008899 	.word	0x08008899
 800887c:	080088a1 	.word	0x080088a1
 8008880:	080088a9 	.word	0x080088a9
 8008884:	080088b1 	.word	0x080088b1
 8008888:	2300      	movs	r3, #0
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888e:	e2f0      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008890:	2304      	movs	r3, #4
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008896:	e2ec      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008898:	2308      	movs	r3, #8
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889e:	e2e8      	b.n	8008e72 <UART_SetConfig+0x7ae>
 80088a0:	2310      	movs	r3, #16
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a6:	e2e4      	b.n	8008e72 <UART_SetConfig+0x7ae>
 80088a8:	2320      	movs	r3, #32
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ae:	e2e0      	b.n	8008e72 <UART_SetConfig+0x7ae>
 80088b0:	2340      	movs	r3, #64	@ 0x40
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088b6:	e2dc      	b.n	8008e72 <UART_SetConfig+0x7ae>
 80088b8:	2380      	movs	r3, #128	@ 0x80
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088be:	e2d8      	b.n	8008e72 <UART_SetConfig+0x7ae>
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a4f      	ldr	r2, [pc, #316]	@ (8008a04 <UART_SetConfig+0x340>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d130      	bne.n	800892c <UART_SetConfig+0x268>
 80088ca:	4b4c      	ldr	r3, [pc, #304]	@ (80089fc <UART_SetConfig+0x338>)
 80088cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	2b05      	cmp	r3, #5
 80088d4:	d826      	bhi.n	8008924 <UART_SetConfig+0x260>
 80088d6:	a201      	add	r2, pc, #4	@ (adr r2, 80088dc <UART_SetConfig+0x218>)
 80088d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088dc:	080088f5 	.word	0x080088f5
 80088e0:	080088fd 	.word	0x080088fd
 80088e4:	08008905 	.word	0x08008905
 80088e8:	0800890d 	.word	0x0800890d
 80088ec:	08008915 	.word	0x08008915
 80088f0:	0800891d 	.word	0x0800891d
 80088f4:	2300      	movs	r3, #0
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e2ba      	b.n	8008e72 <UART_SetConfig+0x7ae>
 80088fc:	2304      	movs	r3, #4
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008902:	e2b6      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008904:	2308      	movs	r3, #8
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890a:	e2b2      	b.n	8008e72 <UART_SetConfig+0x7ae>
 800890c:	2310      	movs	r3, #16
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e2ae      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008914:	2320      	movs	r3, #32
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891a:	e2aa      	b.n	8008e72 <UART_SetConfig+0x7ae>
 800891c:	2340      	movs	r3, #64	@ 0x40
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008922:	e2a6      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008924:	2380      	movs	r3, #128	@ 0x80
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892a:	e2a2      	b.n	8008e72 <UART_SetConfig+0x7ae>
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a35      	ldr	r2, [pc, #212]	@ (8008a08 <UART_SetConfig+0x344>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d130      	bne.n	8008998 <UART_SetConfig+0x2d4>
 8008936:	4b31      	ldr	r3, [pc, #196]	@ (80089fc <UART_SetConfig+0x338>)
 8008938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	2b05      	cmp	r3, #5
 8008940:	d826      	bhi.n	8008990 <UART_SetConfig+0x2cc>
 8008942:	a201      	add	r2, pc, #4	@ (adr r2, 8008948 <UART_SetConfig+0x284>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	08008961 	.word	0x08008961
 800894c:	08008969 	.word	0x08008969
 8008950:	08008971 	.word	0x08008971
 8008954:	08008979 	.word	0x08008979
 8008958:	08008981 	.word	0x08008981
 800895c:	08008989 	.word	0x08008989
 8008960:	2300      	movs	r3, #0
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e284      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008968:	2304      	movs	r3, #4
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896e:	e280      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008970:	2308      	movs	r3, #8
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e27c      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008978:	2310      	movs	r3, #16
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e278      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008980:	2320      	movs	r3, #32
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e274      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008988:	2340      	movs	r3, #64	@ 0x40
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898e:	e270      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008990:	2380      	movs	r3, #128	@ 0x80
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e26c      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a1b      	ldr	r2, [pc, #108]	@ (8008a0c <UART_SetConfig+0x348>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d142      	bne.n	8008a28 <UART_SetConfig+0x364>
 80089a2:	4b16      	ldr	r3, [pc, #88]	@ (80089fc <UART_SetConfig+0x338>)
 80089a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a6:	f003 0307 	and.w	r3, r3, #7
 80089aa:	2b05      	cmp	r3, #5
 80089ac:	d838      	bhi.n	8008a20 <UART_SetConfig+0x35c>
 80089ae:	a201      	add	r2, pc, #4	@ (adr r2, 80089b4 <UART_SetConfig+0x2f0>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	080089cd 	.word	0x080089cd
 80089b8:	080089d5 	.word	0x080089d5
 80089bc:	080089dd 	.word	0x080089dd
 80089c0:	080089e5 	.word	0x080089e5
 80089c4:	08008a11 	.word	0x08008a11
 80089c8:	08008a19 	.word	0x08008a19
 80089cc:	2300      	movs	r3, #0
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d2:	e24e      	b.n	8008e72 <UART_SetConfig+0x7ae>
 80089d4:	2304      	movs	r3, #4
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089da:	e24a      	b.n	8008e72 <UART_SetConfig+0x7ae>
 80089dc:	2308      	movs	r3, #8
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e246      	b.n	8008e72 <UART_SetConfig+0x7ae>
 80089e4:	2310      	movs	r3, #16
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e242      	b.n	8008e72 <UART_SetConfig+0x7ae>
 80089ec:	cfff69f3 	.word	0xcfff69f3
 80089f0:	58000c00 	.word	0x58000c00
 80089f4:	11fff4ff 	.word	0x11fff4ff
 80089f8:	40011000 	.word	0x40011000
 80089fc:	58024400 	.word	0x58024400
 8008a00:	40004400 	.word	0x40004400
 8008a04:	40004800 	.word	0x40004800
 8008a08:	40004c00 	.word	0x40004c00
 8008a0c:	40005000 	.word	0x40005000
 8008a10:	2320      	movs	r3, #32
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a16:	e22c      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008a18:	2340      	movs	r3, #64	@ 0x40
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1e:	e228      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008a20:	2380      	movs	r3, #128	@ 0x80
 8008a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a26:	e224      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4ab1      	ldr	r2, [pc, #708]	@ (8008cf4 <UART_SetConfig+0x630>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d176      	bne.n	8008b20 <UART_SetConfig+0x45c>
 8008a32:	4bb1      	ldr	r3, [pc, #708]	@ (8008cf8 <UART_SetConfig+0x634>)
 8008a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a3a:	2b28      	cmp	r3, #40	@ 0x28
 8008a3c:	d86c      	bhi.n	8008b18 <UART_SetConfig+0x454>
 8008a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a44 <UART_SetConfig+0x380>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008ae9 	.word	0x08008ae9
 8008a48:	08008b19 	.word	0x08008b19
 8008a4c:	08008b19 	.word	0x08008b19
 8008a50:	08008b19 	.word	0x08008b19
 8008a54:	08008b19 	.word	0x08008b19
 8008a58:	08008b19 	.word	0x08008b19
 8008a5c:	08008b19 	.word	0x08008b19
 8008a60:	08008b19 	.word	0x08008b19
 8008a64:	08008af1 	.word	0x08008af1
 8008a68:	08008b19 	.word	0x08008b19
 8008a6c:	08008b19 	.word	0x08008b19
 8008a70:	08008b19 	.word	0x08008b19
 8008a74:	08008b19 	.word	0x08008b19
 8008a78:	08008b19 	.word	0x08008b19
 8008a7c:	08008b19 	.word	0x08008b19
 8008a80:	08008b19 	.word	0x08008b19
 8008a84:	08008af9 	.word	0x08008af9
 8008a88:	08008b19 	.word	0x08008b19
 8008a8c:	08008b19 	.word	0x08008b19
 8008a90:	08008b19 	.word	0x08008b19
 8008a94:	08008b19 	.word	0x08008b19
 8008a98:	08008b19 	.word	0x08008b19
 8008a9c:	08008b19 	.word	0x08008b19
 8008aa0:	08008b19 	.word	0x08008b19
 8008aa4:	08008b01 	.word	0x08008b01
 8008aa8:	08008b19 	.word	0x08008b19
 8008aac:	08008b19 	.word	0x08008b19
 8008ab0:	08008b19 	.word	0x08008b19
 8008ab4:	08008b19 	.word	0x08008b19
 8008ab8:	08008b19 	.word	0x08008b19
 8008abc:	08008b19 	.word	0x08008b19
 8008ac0:	08008b19 	.word	0x08008b19
 8008ac4:	08008b09 	.word	0x08008b09
 8008ac8:	08008b19 	.word	0x08008b19
 8008acc:	08008b19 	.word	0x08008b19
 8008ad0:	08008b19 	.word	0x08008b19
 8008ad4:	08008b19 	.word	0x08008b19
 8008ad8:	08008b19 	.word	0x08008b19
 8008adc:	08008b19 	.word	0x08008b19
 8008ae0:	08008b19 	.word	0x08008b19
 8008ae4:	08008b11 	.word	0x08008b11
 8008ae8:	2301      	movs	r3, #1
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aee:	e1c0      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008af0:	2304      	movs	r3, #4
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af6:	e1bc      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008af8:	2308      	movs	r3, #8
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afe:	e1b8      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b00:	2310      	movs	r3, #16
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b06:	e1b4      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b08:	2320      	movs	r3, #32
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0e:	e1b0      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b10:	2340      	movs	r3, #64	@ 0x40
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b16:	e1ac      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b18:	2380      	movs	r3, #128	@ 0x80
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1e:	e1a8      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a75      	ldr	r2, [pc, #468]	@ (8008cfc <UART_SetConfig+0x638>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d130      	bne.n	8008b8c <UART_SetConfig+0x4c8>
 8008b2a:	4b73      	ldr	r3, [pc, #460]	@ (8008cf8 <UART_SetConfig+0x634>)
 8008b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b2e:	f003 0307 	and.w	r3, r3, #7
 8008b32:	2b05      	cmp	r3, #5
 8008b34:	d826      	bhi.n	8008b84 <UART_SetConfig+0x4c0>
 8008b36:	a201      	add	r2, pc, #4	@ (adr r2, 8008b3c <UART_SetConfig+0x478>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008b55 	.word	0x08008b55
 8008b40:	08008b5d 	.word	0x08008b5d
 8008b44:	08008b65 	.word	0x08008b65
 8008b48:	08008b6d 	.word	0x08008b6d
 8008b4c:	08008b75 	.word	0x08008b75
 8008b50:	08008b7d 	.word	0x08008b7d
 8008b54:	2300      	movs	r3, #0
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5a:	e18a      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b5c:	2304      	movs	r3, #4
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b62:	e186      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b64:	2308      	movs	r3, #8
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6a:	e182      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b6c:	2310      	movs	r3, #16
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b72:	e17e      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b74:	2320      	movs	r3, #32
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7a:	e17a      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b7c:	2340      	movs	r3, #64	@ 0x40
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b82:	e176      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b84:	2380      	movs	r3, #128	@ 0x80
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8a:	e172      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a5b      	ldr	r2, [pc, #364]	@ (8008d00 <UART_SetConfig+0x63c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d130      	bne.n	8008bf8 <UART_SetConfig+0x534>
 8008b96:	4b58      	ldr	r3, [pc, #352]	@ (8008cf8 <UART_SetConfig+0x634>)
 8008b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	2b05      	cmp	r3, #5
 8008ba0:	d826      	bhi.n	8008bf0 <UART_SetConfig+0x52c>
 8008ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba8 <UART_SetConfig+0x4e4>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008bc9 	.word	0x08008bc9
 8008bb0:	08008bd1 	.word	0x08008bd1
 8008bb4:	08008bd9 	.word	0x08008bd9
 8008bb8:	08008be1 	.word	0x08008be1
 8008bbc:	08008be9 	.word	0x08008be9
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc6:	e154      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008bc8:	2304      	movs	r3, #4
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e150      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e14c      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008bd8:	2310      	movs	r3, #16
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e148      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008be0:	2320      	movs	r3, #32
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e144      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008be8:	2340      	movs	r3, #64	@ 0x40
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e140      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008bf0:	2380      	movs	r3, #128	@ 0x80
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e13c      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a41      	ldr	r2, [pc, #260]	@ (8008d04 <UART_SetConfig+0x640>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	f040 8082 	bne.w	8008d08 <UART_SetConfig+0x644>
 8008c04:	4b3c      	ldr	r3, [pc, #240]	@ (8008cf8 <UART_SetConfig+0x634>)
 8008c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c0c:	2b28      	cmp	r3, #40	@ 0x28
 8008c0e:	d86d      	bhi.n	8008cec <UART_SetConfig+0x628>
 8008c10:	a201      	add	r2, pc, #4	@ (adr r2, 8008c18 <UART_SetConfig+0x554>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008cbd 	.word	0x08008cbd
 8008c1c:	08008ced 	.word	0x08008ced
 8008c20:	08008ced 	.word	0x08008ced
 8008c24:	08008ced 	.word	0x08008ced
 8008c28:	08008ced 	.word	0x08008ced
 8008c2c:	08008ced 	.word	0x08008ced
 8008c30:	08008ced 	.word	0x08008ced
 8008c34:	08008ced 	.word	0x08008ced
 8008c38:	08008cc5 	.word	0x08008cc5
 8008c3c:	08008ced 	.word	0x08008ced
 8008c40:	08008ced 	.word	0x08008ced
 8008c44:	08008ced 	.word	0x08008ced
 8008c48:	08008ced 	.word	0x08008ced
 8008c4c:	08008ced 	.word	0x08008ced
 8008c50:	08008ced 	.word	0x08008ced
 8008c54:	08008ced 	.word	0x08008ced
 8008c58:	08008ccd 	.word	0x08008ccd
 8008c5c:	08008ced 	.word	0x08008ced
 8008c60:	08008ced 	.word	0x08008ced
 8008c64:	08008ced 	.word	0x08008ced
 8008c68:	08008ced 	.word	0x08008ced
 8008c6c:	08008ced 	.word	0x08008ced
 8008c70:	08008ced 	.word	0x08008ced
 8008c74:	08008ced 	.word	0x08008ced
 8008c78:	08008cd5 	.word	0x08008cd5
 8008c7c:	08008ced 	.word	0x08008ced
 8008c80:	08008ced 	.word	0x08008ced
 8008c84:	08008ced 	.word	0x08008ced
 8008c88:	08008ced 	.word	0x08008ced
 8008c8c:	08008ced 	.word	0x08008ced
 8008c90:	08008ced 	.word	0x08008ced
 8008c94:	08008ced 	.word	0x08008ced
 8008c98:	08008cdd 	.word	0x08008cdd
 8008c9c:	08008ced 	.word	0x08008ced
 8008ca0:	08008ced 	.word	0x08008ced
 8008ca4:	08008ced 	.word	0x08008ced
 8008ca8:	08008ced 	.word	0x08008ced
 8008cac:	08008ced 	.word	0x08008ced
 8008cb0:	08008ced 	.word	0x08008ced
 8008cb4:	08008ced 	.word	0x08008ced
 8008cb8:	08008ce5 	.word	0x08008ce5
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc2:	e0d6      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008cc4:	2304      	movs	r3, #4
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e0d2      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008ccc:	2308      	movs	r3, #8
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e0ce      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008cd4:	2310      	movs	r3, #16
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e0ca      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008cdc:	2320      	movs	r3, #32
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e0c6      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008ce4:	2340      	movs	r3, #64	@ 0x40
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e0c2      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008cec:	2380      	movs	r3, #128	@ 0x80
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e0be      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008cf4:	40011400 	.word	0x40011400
 8008cf8:	58024400 	.word	0x58024400
 8008cfc:	40007800 	.word	0x40007800
 8008d00:	40007c00 	.word	0x40007c00
 8008d04:	40011800 	.word	0x40011800
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4aad      	ldr	r2, [pc, #692]	@ (8008fc4 <UART_SetConfig+0x900>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d176      	bne.n	8008e00 <UART_SetConfig+0x73c>
 8008d12:	4bad      	ldr	r3, [pc, #692]	@ (8008fc8 <UART_SetConfig+0x904>)
 8008d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d1a:	2b28      	cmp	r3, #40	@ 0x28
 8008d1c:	d86c      	bhi.n	8008df8 <UART_SetConfig+0x734>
 8008d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d24 <UART_SetConfig+0x660>)
 8008d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d24:	08008dc9 	.word	0x08008dc9
 8008d28:	08008df9 	.word	0x08008df9
 8008d2c:	08008df9 	.word	0x08008df9
 8008d30:	08008df9 	.word	0x08008df9
 8008d34:	08008df9 	.word	0x08008df9
 8008d38:	08008df9 	.word	0x08008df9
 8008d3c:	08008df9 	.word	0x08008df9
 8008d40:	08008df9 	.word	0x08008df9
 8008d44:	08008dd1 	.word	0x08008dd1
 8008d48:	08008df9 	.word	0x08008df9
 8008d4c:	08008df9 	.word	0x08008df9
 8008d50:	08008df9 	.word	0x08008df9
 8008d54:	08008df9 	.word	0x08008df9
 8008d58:	08008df9 	.word	0x08008df9
 8008d5c:	08008df9 	.word	0x08008df9
 8008d60:	08008df9 	.word	0x08008df9
 8008d64:	08008dd9 	.word	0x08008dd9
 8008d68:	08008df9 	.word	0x08008df9
 8008d6c:	08008df9 	.word	0x08008df9
 8008d70:	08008df9 	.word	0x08008df9
 8008d74:	08008df9 	.word	0x08008df9
 8008d78:	08008df9 	.word	0x08008df9
 8008d7c:	08008df9 	.word	0x08008df9
 8008d80:	08008df9 	.word	0x08008df9
 8008d84:	08008de1 	.word	0x08008de1
 8008d88:	08008df9 	.word	0x08008df9
 8008d8c:	08008df9 	.word	0x08008df9
 8008d90:	08008df9 	.word	0x08008df9
 8008d94:	08008df9 	.word	0x08008df9
 8008d98:	08008df9 	.word	0x08008df9
 8008d9c:	08008df9 	.word	0x08008df9
 8008da0:	08008df9 	.word	0x08008df9
 8008da4:	08008de9 	.word	0x08008de9
 8008da8:	08008df9 	.word	0x08008df9
 8008dac:	08008df9 	.word	0x08008df9
 8008db0:	08008df9 	.word	0x08008df9
 8008db4:	08008df9 	.word	0x08008df9
 8008db8:	08008df9 	.word	0x08008df9
 8008dbc:	08008df9 	.word	0x08008df9
 8008dc0:	08008df9 	.word	0x08008df9
 8008dc4:	08008df1 	.word	0x08008df1
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dce:	e050      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008dd0:	2304      	movs	r3, #4
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd6:	e04c      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008dd8:	2308      	movs	r3, #8
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dde:	e048      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008de0:	2310      	movs	r3, #16
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de6:	e044      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008de8:	2320      	movs	r3, #32
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dee:	e040      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008df0:	2340      	movs	r3, #64	@ 0x40
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df6:	e03c      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008df8:	2380      	movs	r3, #128	@ 0x80
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfe:	e038      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a71      	ldr	r2, [pc, #452]	@ (8008fcc <UART_SetConfig+0x908>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d130      	bne.n	8008e6c <UART_SetConfig+0x7a8>
 8008e0a:	4b6f      	ldr	r3, [pc, #444]	@ (8008fc8 <UART_SetConfig+0x904>)
 8008e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	2b05      	cmp	r3, #5
 8008e14:	d826      	bhi.n	8008e64 <UART_SetConfig+0x7a0>
 8008e16:	a201      	add	r2, pc, #4	@ (adr r2, 8008e1c <UART_SetConfig+0x758>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e35 	.word	0x08008e35
 8008e20:	08008e3d 	.word	0x08008e3d
 8008e24:	08008e45 	.word	0x08008e45
 8008e28:	08008e4d 	.word	0x08008e4d
 8008e2c:	08008e55 	.word	0x08008e55
 8008e30:	08008e5d 	.word	0x08008e5d
 8008e34:	2302      	movs	r3, #2
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e01a      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008e3c:	2304      	movs	r3, #4
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e016      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008e44:	2308      	movs	r3, #8
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e012      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008e4c:	2310      	movs	r3, #16
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e00e      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008e54:	2320      	movs	r3, #32
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e00a      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008e5c:	2340      	movs	r3, #64	@ 0x40
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e006      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008e64:	2380      	movs	r3, #128	@ 0x80
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e002      	b.n	8008e72 <UART_SetConfig+0x7ae>
 8008e6c:	2380      	movs	r3, #128	@ 0x80
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a55      	ldr	r2, [pc, #340]	@ (8008fcc <UART_SetConfig+0x908>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	f040 80f8 	bne.w	800906e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e82:	2b20      	cmp	r3, #32
 8008e84:	dc46      	bgt.n	8008f14 <UART_SetConfig+0x850>
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	db75      	blt.n	8008f76 <UART_SetConfig+0x8b2>
 8008e8a:	3b02      	subs	r3, #2
 8008e8c:	2b1e      	cmp	r3, #30
 8008e8e:	d872      	bhi.n	8008f76 <UART_SetConfig+0x8b2>
 8008e90:	a201      	add	r2, pc, #4	@ (adr r2, 8008e98 <UART_SetConfig+0x7d4>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008f1b 	.word	0x08008f1b
 8008e9c:	08008f77 	.word	0x08008f77
 8008ea0:	08008f23 	.word	0x08008f23
 8008ea4:	08008f77 	.word	0x08008f77
 8008ea8:	08008f77 	.word	0x08008f77
 8008eac:	08008f77 	.word	0x08008f77
 8008eb0:	08008f33 	.word	0x08008f33
 8008eb4:	08008f77 	.word	0x08008f77
 8008eb8:	08008f77 	.word	0x08008f77
 8008ebc:	08008f77 	.word	0x08008f77
 8008ec0:	08008f77 	.word	0x08008f77
 8008ec4:	08008f77 	.word	0x08008f77
 8008ec8:	08008f77 	.word	0x08008f77
 8008ecc:	08008f77 	.word	0x08008f77
 8008ed0:	08008f43 	.word	0x08008f43
 8008ed4:	08008f77 	.word	0x08008f77
 8008ed8:	08008f77 	.word	0x08008f77
 8008edc:	08008f77 	.word	0x08008f77
 8008ee0:	08008f77 	.word	0x08008f77
 8008ee4:	08008f77 	.word	0x08008f77
 8008ee8:	08008f77 	.word	0x08008f77
 8008eec:	08008f77 	.word	0x08008f77
 8008ef0:	08008f77 	.word	0x08008f77
 8008ef4:	08008f77 	.word	0x08008f77
 8008ef8:	08008f77 	.word	0x08008f77
 8008efc:	08008f77 	.word	0x08008f77
 8008f00:	08008f77 	.word	0x08008f77
 8008f04:	08008f77 	.word	0x08008f77
 8008f08:	08008f77 	.word	0x08008f77
 8008f0c:	08008f77 	.word	0x08008f77
 8008f10:	08008f69 	.word	0x08008f69
 8008f14:	2b40      	cmp	r3, #64	@ 0x40
 8008f16:	d02a      	beq.n	8008f6e <UART_SetConfig+0x8aa>
 8008f18:	e02d      	b.n	8008f76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008f1a:	f7fe f809 	bl	8006f30 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f20:	e02f      	b.n	8008f82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe f818 	bl	8006f5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f30:	e027      	b.n	8008f82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f32:	f107 0318 	add.w	r3, r7, #24
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe f964 	bl	8007204 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f40:	e01f      	b.n	8008f82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f42:	4b21      	ldr	r3, [pc, #132]	@ (8008fc8 <UART_SetConfig+0x904>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d009      	beq.n	8008f62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008fc8 <UART_SetConfig+0x904>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	08db      	lsrs	r3, r3, #3
 8008f54:	f003 0303 	and.w	r3, r3, #3
 8008f58:	4a1d      	ldr	r2, [pc, #116]	@ (8008fd0 <UART_SetConfig+0x90c>)
 8008f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f60:	e00f      	b.n	8008f82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008f62:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd0 <UART_SetConfig+0x90c>)
 8008f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f66:	e00c      	b.n	8008f82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f68:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd4 <UART_SetConfig+0x910>)
 8008f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f6c:	e009      	b.n	8008f82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f74:	e005      	b.n	8008f82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 81ee 	beq.w	8009366 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8e:	4a12      	ldr	r2, [pc, #72]	@ (8008fd8 <UART_SetConfig+0x914>)
 8008f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f94:	461a      	mov	r2, r3
 8008f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f9c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	4413      	add	r3, r2
 8008fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d305      	bcc.n	8008fba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d910      	bls.n	8008fdc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008fc0:	e1d1      	b.n	8009366 <UART_SetConfig+0xca2>
 8008fc2:	bf00      	nop
 8008fc4:	40011c00 	.word	0x40011c00
 8008fc8:	58024400 	.word	0x58024400
 8008fcc:	58000c00 	.word	0x58000c00
 8008fd0:	03d09000 	.word	0x03d09000
 8008fd4:	003d0900 	.word	0x003d0900
 8008fd8:	08009f90 	.word	0x08009f90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fde:	2200      	movs	r2, #0
 8008fe0:	60bb      	str	r3, [r7, #8]
 8008fe2:	60fa      	str	r2, [r7, #12]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe8:	4ac0      	ldr	r2, [pc, #768]	@ (80092ec <UART_SetConfig+0xc28>)
 8008fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	607a      	str	r2, [r7, #4]
 8008ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ffa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ffe:	f7f7 f98d 	bl	800031c <__aeabi_uldivmod>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4610      	mov	r0, r2
 8009008:	4619      	mov	r1, r3
 800900a:	f04f 0200 	mov.w	r2, #0
 800900e:	f04f 0300 	mov.w	r3, #0
 8009012:	020b      	lsls	r3, r1, #8
 8009014:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009018:	0202      	lsls	r2, r0, #8
 800901a:	6979      	ldr	r1, [r7, #20]
 800901c:	6849      	ldr	r1, [r1, #4]
 800901e:	0849      	lsrs	r1, r1, #1
 8009020:	2000      	movs	r0, #0
 8009022:	460c      	mov	r4, r1
 8009024:	4605      	mov	r5, r0
 8009026:	eb12 0804 	adds.w	r8, r2, r4
 800902a:	eb43 0905 	adc.w	r9, r3, r5
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	469a      	mov	sl, r3
 8009036:	4693      	mov	fp, r2
 8009038:	4652      	mov	r2, sl
 800903a:	465b      	mov	r3, fp
 800903c:	4640      	mov	r0, r8
 800903e:	4649      	mov	r1, r9
 8009040:	f7f7 f96c 	bl	800031c <__aeabi_uldivmod>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4613      	mov	r3, r2
 800904a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800904c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009052:	d308      	bcc.n	8009066 <UART_SetConfig+0x9a2>
 8009054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009056:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800905a:	d204      	bcs.n	8009066 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009062:	60da      	str	r2, [r3, #12]
 8009064:	e17f      	b.n	8009366 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800906c:	e17b      	b.n	8009366 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009076:	f040 80bd 	bne.w	80091f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800907a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800907e:	2b20      	cmp	r3, #32
 8009080:	dc48      	bgt.n	8009114 <UART_SetConfig+0xa50>
 8009082:	2b00      	cmp	r3, #0
 8009084:	db7b      	blt.n	800917e <UART_SetConfig+0xaba>
 8009086:	2b20      	cmp	r3, #32
 8009088:	d879      	bhi.n	800917e <UART_SetConfig+0xaba>
 800908a:	a201      	add	r2, pc, #4	@ (adr r2, 8009090 <UART_SetConfig+0x9cc>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	0800911b 	.word	0x0800911b
 8009094:	08009123 	.word	0x08009123
 8009098:	0800917f 	.word	0x0800917f
 800909c:	0800917f 	.word	0x0800917f
 80090a0:	0800912b 	.word	0x0800912b
 80090a4:	0800917f 	.word	0x0800917f
 80090a8:	0800917f 	.word	0x0800917f
 80090ac:	0800917f 	.word	0x0800917f
 80090b0:	0800913b 	.word	0x0800913b
 80090b4:	0800917f 	.word	0x0800917f
 80090b8:	0800917f 	.word	0x0800917f
 80090bc:	0800917f 	.word	0x0800917f
 80090c0:	0800917f 	.word	0x0800917f
 80090c4:	0800917f 	.word	0x0800917f
 80090c8:	0800917f 	.word	0x0800917f
 80090cc:	0800917f 	.word	0x0800917f
 80090d0:	0800914b 	.word	0x0800914b
 80090d4:	0800917f 	.word	0x0800917f
 80090d8:	0800917f 	.word	0x0800917f
 80090dc:	0800917f 	.word	0x0800917f
 80090e0:	0800917f 	.word	0x0800917f
 80090e4:	0800917f 	.word	0x0800917f
 80090e8:	0800917f 	.word	0x0800917f
 80090ec:	0800917f 	.word	0x0800917f
 80090f0:	0800917f 	.word	0x0800917f
 80090f4:	0800917f 	.word	0x0800917f
 80090f8:	0800917f 	.word	0x0800917f
 80090fc:	0800917f 	.word	0x0800917f
 8009100:	0800917f 	.word	0x0800917f
 8009104:	0800917f 	.word	0x0800917f
 8009108:	0800917f 	.word	0x0800917f
 800910c:	0800917f 	.word	0x0800917f
 8009110:	08009171 	.word	0x08009171
 8009114:	2b40      	cmp	r3, #64	@ 0x40
 8009116:	d02e      	beq.n	8009176 <UART_SetConfig+0xab2>
 8009118:	e031      	b.n	800917e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800911a:	f7fc fcfb 	bl	8005b14 <HAL_RCC_GetPCLK1Freq>
 800911e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009120:	e033      	b.n	800918a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009122:	f7fc fd0d 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 8009126:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009128:	e02f      	b.n	800918a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800912a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800912e:	4618      	mov	r0, r3
 8009130:	f7fd ff14 	bl	8006f5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009138:	e027      	b.n	800918a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800913a:	f107 0318 	add.w	r3, r7, #24
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe f860 	bl	8007204 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009148:	e01f      	b.n	800918a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800914a:	4b69      	ldr	r3, [pc, #420]	@ (80092f0 <UART_SetConfig+0xc2c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0320 	and.w	r3, r3, #32
 8009152:	2b00      	cmp	r3, #0
 8009154:	d009      	beq.n	800916a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009156:	4b66      	ldr	r3, [pc, #408]	@ (80092f0 <UART_SetConfig+0xc2c>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	08db      	lsrs	r3, r3, #3
 800915c:	f003 0303 	and.w	r3, r3, #3
 8009160:	4a64      	ldr	r2, [pc, #400]	@ (80092f4 <UART_SetConfig+0xc30>)
 8009162:	fa22 f303 	lsr.w	r3, r2, r3
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009168:	e00f      	b.n	800918a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800916a:	4b62      	ldr	r3, [pc, #392]	@ (80092f4 <UART_SetConfig+0xc30>)
 800916c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800916e:	e00c      	b.n	800918a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009170:	4b61      	ldr	r3, [pc, #388]	@ (80092f8 <UART_SetConfig+0xc34>)
 8009172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009174:	e009      	b.n	800918a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800917c:	e005      	b.n	800918a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800918a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 80ea 	beq.w	8009366 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009196:	4a55      	ldr	r2, [pc, #340]	@ (80092ec <UART_SetConfig+0xc28>)
 8009198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800919c:	461a      	mov	r2, r3
 800919e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80091a4:	005a      	lsls	r2, r3, #1
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	085b      	lsrs	r3, r3, #1
 80091ac:	441a      	add	r2, r3
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ba:	2b0f      	cmp	r3, #15
 80091bc:	d916      	bls.n	80091ec <UART_SetConfig+0xb28>
 80091be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091c4:	d212      	bcs.n	80091ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	f023 030f 	bic.w	r3, r3, #15
 80091ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d2:	085b      	lsrs	r3, r3, #1
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	b29a      	uxth	r2, r3
 80091dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80091de:	4313      	orrs	r3, r2
 80091e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80091e8:	60da      	str	r2, [r3, #12]
 80091ea:	e0bc      	b.n	8009366 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80091f2:	e0b8      	b.n	8009366 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	dc4b      	bgt.n	8009294 <UART_SetConfig+0xbd0>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f2c0 8087 	blt.w	8009310 <UART_SetConfig+0xc4c>
 8009202:	2b20      	cmp	r3, #32
 8009204:	f200 8084 	bhi.w	8009310 <UART_SetConfig+0xc4c>
 8009208:	a201      	add	r2, pc, #4	@ (adr r2, 8009210 <UART_SetConfig+0xb4c>)
 800920a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920e:	bf00      	nop
 8009210:	0800929b 	.word	0x0800929b
 8009214:	080092a3 	.word	0x080092a3
 8009218:	08009311 	.word	0x08009311
 800921c:	08009311 	.word	0x08009311
 8009220:	080092ab 	.word	0x080092ab
 8009224:	08009311 	.word	0x08009311
 8009228:	08009311 	.word	0x08009311
 800922c:	08009311 	.word	0x08009311
 8009230:	080092bb 	.word	0x080092bb
 8009234:	08009311 	.word	0x08009311
 8009238:	08009311 	.word	0x08009311
 800923c:	08009311 	.word	0x08009311
 8009240:	08009311 	.word	0x08009311
 8009244:	08009311 	.word	0x08009311
 8009248:	08009311 	.word	0x08009311
 800924c:	08009311 	.word	0x08009311
 8009250:	080092cb 	.word	0x080092cb
 8009254:	08009311 	.word	0x08009311
 8009258:	08009311 	.word	0x08009311
 800925c:	08009311 	.word	0x08009311
 8009260:	08009311 	.word	0x08009311
 8009264:	08009311 	.word	0x08009311
 8009268:	08009311 	.word	0x08009311
 800926c:	08009311 	.word	0x08009311
 8009270:	08009311 	.word	0x08009311
 8009274:	08009311 	.word	0x08009311
 8009278:	08009311 	.word	0x08009311
 800927c:	08009311 	.word	0x08009311
 8009280:	08009311 	.word	0x08009311
 8009284:	08009311 	.word	0x08009311
 8009288:	08009311 	.word	0x08009311
 800928c:	08009311 	.word	0x08009311
 8009290:	08009303 	.word	0x08009303
 8009294:	2b40      	cmp	r3, #64	@ 0x40
 8009296:	d037      	beq.n	8009308 <UART_SetConfig+0xc44>
 8009298:	e03a      	b.n	8009310 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800929a:	f7fc fc3b 	bl	8005b14 <HAL_RCC_GetPCLK1Freq>
 800929e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092a0:	e03c      	b.n	800931c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092a2:	f7fc fc4d 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 80092a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092a8:	e038      	b.n	800931c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fd fe54 	bl	8006f5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b8:	e030      	b.n	800931c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ba:	f107 0318 	add.w	r3, r7, #24
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fd ffa0 	bl	8007204 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c8:	e028      	b.n	800931c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ca:	4b09      	ldr	r3, [pc, #36]	@ (80092f0 <UART_SetConfig+0xc2c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0320 	and.w	r3, r3, #32
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d012      	beq.n	80092fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092d6:	4b06      	ldr	r3, [pc, #24]	@ (80092f0 <UART_SetConfig+0xc2c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	08db      	lsrs	r3, r3, #3
 80092dc:	f003 0303 	and.w	r3, r3, #3
 80092e0:	4a04      	ldr	r2, [pc, #16]	@ (80092f4 <UART_SetConfig+0xc30>)
 80092e2:	fa22 f303 	lsr.w	r3, r2, r3
 80092e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092e8:	e018      	b.n	800931c <UART_SetConfig+0xc58>
 80092ea:	bf00      	nop
 80092ec:	08009f90 	.word	0x08009f90
 80092f0:	58024400 	.word	0x58024400
 80092f4:	03d09000 	.word	0x03d09000
 80092f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80092fc:	4b24      	ldr	r3, [pc, #144]	@ (8009390 <UART_SetConfig+0xccc>)
 80092fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009300:	e00c      	b.n	800931c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009302:	4b24      	ldr	r3, [pc, #144]	@ (8009394 <UART_SetConfig+0xcd0>)
 8009304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009306:	e009      	b.n	800931c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800930c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800930e:	e005      	b.n	800931c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800931a:	bf00      	nop
    }

    if (pclk != 0U)
 800931c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800931e:	2b00      	cmp	r3, #0
 8009320:	d021      	beq.n	8009366 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009326:	4a1c      	ldr	r2, [pc, #112]	@ (8009398 <UART_SetConfig+0xcd4>)
 8009328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800932c:	461a      	mov	r2, r3
 800932e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009330:	fbb3 f2f2 	udiv	r2, r3, r2
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	085b      	lsrs	r3, r3, #1
 800933a:	441a      	add	r2, r3
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	fbb2 f3f3 	udiv	r3, r2, r3
 8009344:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009348:	2b0f      	cmp	r3, #15
 800934a:	d909      	bls.n	8009360 <UART_SetConfig+0xc9c>
 800934c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009352:	d205      	bcs.n	8009360 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009356:	b29a      	uxth	r2, r3
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60da      	str	r2, [r3, #12]
 800935e:	e002      	b.n	8009366 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2201      	movs	r2, #1
 800936a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2201      	movs	r2, #1
 8009372:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2200      	movs	r2, #0
 800937a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2200      	movs	r2, #0
 8009380:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009382:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009386:	4618      	mov	r0, r3
 8009388:	3748      	adds	r7, #72	@ 0x48
 800938a:	46bd      	mov	sp, r7
 800938c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009390:	03d09000 	.word	0x03d09000
 8009394:	003d0900 	.word	0x003d0900
 8009398:	08009f90 	.word	0x08009f90

0800939c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a8:	f003 0308 	and.w	r3, r3, #8
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00a      	beq.n	80093c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	430a      	orrs	r2, r1
 80093e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	430a      	orrs	r2, r1
 800942a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009430:	f003 0310 	and.w	r3, r3, #16
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00a      	beq.n	800944e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	430a      	orrs	r2, r1
 800944c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009452:	f003 0320 	and.w	r3, r3, #32
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00a      	beq.n	8009470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	430a      	orrs	r2, r1
 800946e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009478:	2b00      	cmp	r3, #0
 800947a:	d01a      	beq.n	80094b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	430a      	orrs	r2, r1
 8009490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800949a:	d10a      	bne.n	80094b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	430a      	orrs	r2, r1
 80094d2:	605a      	str	r2, [r3, #4]
  }
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b098      	sub	sp, #96	@ 0x60
 80094e4:	af02      	add	r7, sp, #8
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094f0:	f7f8 f8b2 	bl	8001658 <HAL_GetTick>
 80094f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 0308 	and.w	r3, r3, #8
 8009500:	2b08      	cmp	r3, #8
 8009502:	d12f      	bne.n	8009564 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009504:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800950c:	2200      	movs	r2, #0
 800950e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f88e 	bl	8009634 <UART_WaitOnFlagUntilTimeout>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d022      	beq.n	8009564 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009526:	e853 3f00 	ldrex	r3, [r3]
 800952a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800952c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800952e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009532:	653b      	str	r3, [r7, #80]	@ 0x50
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	461a      	mov	r2, r3
 800953a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800953c:	647b      	str	r3, [r7, #68]	@ 0x44
 800953e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009540:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009544:	e841 2300 	strex	r3, r2, [r1]
 8009548:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800954a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1e6      	bne.n	800951e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2220      	movs	r2, #32
 8009554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e063      	b.n	800962c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0304 	and.w	r3, r3, #4
 800956e:	2b04      	cmp	r3, #4
 8009570:	d149      	bne.n	8009606 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009572:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800957a:	2200      	movs	r2, #0
 800957c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f857 	bl	8009634 <UART_WaitOnFlagUntilTimeout>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d03c      	beq.n	8009606 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009594:	e853 3f00 	ldrex	r3, [r3]
 8009598:	623b      	str	r3, [r7, #32]
   return(result);
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80095ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095b2:	e841 2300 	strex	r3, r2, [r1]
 80095b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1e6      	bne.n	800958c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3308      	adds	r3, #8
 80095c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	e853 3f00 	ldrex	r3, [r3]
 80095cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f023 0301 	bic.w	r3, r3, #1
 80095d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3308      	adds	r3, #8
 80095dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095de:	61fa      	str	r2, [r7, #28]
 80095e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e2:	69b9      	ldr	r1, [r7, #24]
 80095e4:	69fa      	ldr	r2, [r7, #28]
 80095e6:	e841 2300 	strex	r3, r2, [r1]
 80095ea:	617b      	str	r3, [r7, #20]
   return(result);
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1e5      	bne.n	80095be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2220      	movs	r2, #32
 80095f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e012      	b.n	800962c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2220      	movs	r2, #32
 800960a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2220      	movs	r2, #32
 8009612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3758      	adds	r7, #88	@ 0x58
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	4613      	mov	r3, r2
 8009642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009644:	e04f      	b.n	80096e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800964c:	d04b      	beq.n	80096e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800964e:	f7f8 f803 	bl	8001658 <HAL_GetTick>
 8009652:	4602      	mov	r2, r0
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	429a      	cmp	r2, r3
 800965c:	d302      	bcc.n	8009664 <UART_WaitOnFlagUntilTimeout+0x30>
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e04e      	b.n	8009706 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0304 	and.w	r3, r3, #4
 8009672:	2b00      	cmp	r3, #0
 8009674:	d037      	beq.n	80096e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	2b80      	cmp	r3, #128	@ 0x80
 800967a:	d034      	beq.n	80096e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2b40      	cmp	r3, #64	@ 0x40
 8009680:	d031      	beq.n	80096e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	f003 0308 	and.w	r3, r3, #8
 800968c:	2b08      	cmp	r3, #8
 800968e:	d110      	bne.n	80096b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2208      	movs	r2, #8
 8009696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 f921 	bl	80098e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2208      	movs	r2, #8
 80096a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e029      	b.n	8009706 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096c0:	d111      	bne.n	80096e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 f907 	bl	80098e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2220      	movs	r2, #32
 80096d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e00f      	b.n	8009706 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69da      	ldr	r2, [r3, #28]
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4013      	ands	r3, r2
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	bf0c      	ite	eq
 80096f6:	2301      	moveq	r3, #1
 80096f8:	2300      	movne	r3, #0
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	461a      	mov	r2, r3
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	429a      	cmp	r2, r3
 8009702:	d0a0      	beq.n	8009646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b096      	sub	sp, #88	@ 0x58
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	4613      	mov	r3, r2
 800971c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	88fa      	ldrh	r2, [r7, #6]
 8009728:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2222      	movs	r2, #34	@ 0x22
 8009738:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009742:	2b00      	cmp	r3, #0
 8009744:	d02d      	beq.n	80097a2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800974c:	4a40      	ldr	r2, [pc, #256]	@ (8009850 <UART_Start_Receive_DMA+0x140>)
 800974e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009756:	4a3f      	ldr	r2, [pc, #252]	@ (8009854 <UART_Start_Receive_DMA+0x144>)
 8009758:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009760:	4a3d      	ldr	r2, [pc, #244]	@ (8009858 <UART_Start_Receive_DMA+0x148>)
 8009762:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800976a:	2200      	movs	r2, #0
 800976c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3324      	adds	r3, #36	@ 0x24
 800977a:	4619      	mov	r1, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009780:	461a      	mov	r2, r3
 8009782:	88fb      	ldrh	r3, [r7, #6]
 8009784:	f7f8 fbd0 	bl	8001f28 <HAL_DMA_Start_IT>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2210      	movs	r2, #16
 8009792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2220      	movs	r2, #32
 800979a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e051      	b.n	8009846 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d018      	beq.n	80097dc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097b2:	e853 3f00 	ldrex	r3, [r3]
 80097b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097be:	657b      	str	r3, [r7, #84]	@ 0x54
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80097ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80097d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e6      	bne.n	80097aa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3308      	adds	r3, #8
 80097e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e6:	e853 3f00 	ldrex	r3, [r3]
 80097ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ee:	f043 0301 	orr.w	r3, r3, #1
 80097f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3308      	adds	r3, #8
 80097fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80097fc:	637a      	str	r2, [r7, #52]	@ 0x34
 80097fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009800:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009802:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009804:	e841 2300 	strex	r3, r2, [r1]
 8009808:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800980a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1e5      	bne.n	80097dc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3308      	adds	r3, #8
 8009816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	e853 3f00 	ldrex	r3, [r3]
 800981e:	613b      	str	r3, [r7, #16]
   return(result);
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	3308      	adds	r3, #8
 800982e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009830:	623a      	str	r2, [r7, #32]
 8009832:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009834:	69f9      	ldr	r1, [r7, #28]
 8009836:	6a3a      	ldr	r2, [r7, #32]
 8009838:	e841 2300 	strex	r3, r2, [r1]
 800983c:	61bb      	str	r3, [r7, #24]
   return(result);
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1e5      	bne.n	8009810 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3758      	adds	r7, #88	@ 0x58
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	080099ad 	.word	0x080099ad
 8009854:	08009ad5 	.word	0x08009ad5
 8009858:	08009b13 	.word	0x08009b13

0800985c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800985c:	b480      	push	{r7}
 800985e:	b08f      	sub	sp, #60	@ 0x3c
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	e853 3f00 	ldrex	r3, [r3]
 8009870:	61fb      	str	r3, [r7, #28]
   return(result);
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009878:	637b      	str	r3, [r7, #52]	@ 0x34
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009882:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009884:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800988a:	e841 2300 	strex	r3, r2, [r1]
 800988e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1e6      	bne.n	8009864 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3308      	adds	r3, #8
 800989c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80098ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3308      	adds	r3, #8
 80098b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098b6:	61ba      	str	r2, [r7, #24]
 80098b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	6979      	ldr	r1, [r7, #20]
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	613b      	str	r3, [r7, #16]
   return(result);
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e5      	bne.n	8009896 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2220      	movs	r2, #32
 80098ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80098d2:	bf00      	nop
 80098d4:	373c      	adds	r7, #60	@ 0x3c
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
	...

080098e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b095      	sub	sp, #84	@ 0x54
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009906:	643b      	str	r3, [r7, #64]	@ 0x40
 8009908:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800990c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e6      	bne.n	80098e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3308      	adds	r3, #8
 8009920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	61fb      	str	r3, [r7, #28]
   return(result);
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	4b1e      	ldr	r3, [pc, #120]	@ (80099a8 <UART_EndRxTransfer+0xc8>)
 800992e:	4013      	ands	r3, r2
 8009930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3308      	adds	r3, #8
 8009938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800993a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800993c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009942:	e841 2300 	strex	r3, r2, [r1]
 8009946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1e5      	bne.n	800991a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009952:	2b01      	cmp	r3, #1
 8009954:	d118      	bne.n	8009988 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	e853 3f00 	ldrex	r3, [r3]
 8009962:	60bb      	str	r3, [r7, #8]
   return(result);
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	f023 0310 	bic.w	r3, r3, #16
 800996a:	647b      	str	r3, [r7, #68]	@ 0x44
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	461a      	mov	r2, r3
 8009972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009974:	61bb      	str	r3, [r7, #24]
 8009976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009978:	6979      	ldr	r1, [r7, #20]
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	e841 2300 	strex	r3, r2, [r1]
 8009980:	613b      	str	r3, [r7, #16]
   return(result);
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1e6      	bne.n	8009956 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2220      	movs	r2, #32
 800998c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800999c:	bf00      	nop
 800999e:	3754      	adds	r7, #84	@ 0x54
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	effffffe 	.word	0xeffffffe

080099ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b09c      	sub	sp, #112	@ 0x70
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099c2:	d071      	beq.n	8009aa8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80099c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099c6:	2200      	movs	r2, #0
 80099c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099d4:	e853 3f00 	ldrex	r3, [r3]
 80099d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099f2:	e841 2300 	strex	r3, r2, [r1]
 80099f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1e6      	bne.n	80099cc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3308      	adds	r3, #8
 8009a04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a08:	e853 3f00 	ldrex	r3, [r3]
 8009a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a10:	f023 0301 	bic.w	r3, r3, #1
 8009a14:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a26:	e841 2300 	strex	r3, r2, [r1]
 8009a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1e5      	bne.n	80099fe <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3308      	adds	r3, #8
 8009a38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	623b      	str	r3, [r7, #32]
   return(result);
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a48:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3308      	adds	r3, #8
 8009a50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009a52:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e5      	bne.n	8009a32 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d118      	bne.n	8009aa8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	e853 3f00 	ldrex	r3, [r3]
 8009a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f023 0310 	bic.w	r3, r3, #16
 8009a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	461a      	mov	r2, r3
 8009a92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a94:	61fb      	str	r3, [r7, #28]
 8009a96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a98:	69b9      	ldr	r1, [r7, #24]
 8009a9a:	69fa      	ldr	r2, [r7, #28]
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e6      	bne.n	8009a76 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aaa:	2200      	movs	r2, #0
 8009aac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d107      	bne.n	8009ac6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009abc:	4619      	mov	r1, r3
 8009abe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ac0:	f7f6 fed4 	bl	800086c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ac4:	e002      	b.n	8009acc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009ac6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ac8:	f7fe fdde 	bl	8008688 <HAL_UART_RxCpltCallback>
}
 8009acc:	bf00      	nop
 8009ace:	3770      	adds	r7, #112	@ 0x70
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ae0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d109      	bne.n	8009b04 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009af6:	085b      	lsrs	r3, r3, #1
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	4619      	mov	r1, r3
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f7f6 feb5 	bl	800086c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b02:	e002      	b.n	8009b0a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f7fe fdc9 	bl	800869c <HAL_UART_RxHalfCpltCallback>
}
 8009b0a:	bf00      	nop
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b1e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b26:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b2e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b3a:	2b80      	cmp	r3, #128	@ 0x80
 8009b3c:	d109      	bne.n	8009b52 <UART_DMAError+0x40>
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	2b21      	cmp	r3, #33	@ 0x21
 8009b42:	d106      	bne.n	8009b52 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009b4c:	6978      	ldr	r0, [r7, #20]
 8009b4e:	f7ff fe85 	bl	800985c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b5c:	2b40      	cmp	r3, #64	@ 0x40
 8009b5e:	d109      	bne.n	8009b74 <UART_DMAError+0x62>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b22      	cmp	r3, #34	@ 0x22
 8009b64:	d106      	bne.n	8009b74 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009b6e:	6978      	ldr	r0, [r7, #20]
 8009b70:	f7ff feb6 	bl	80098e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b7a:	f043 0210 	orr.w	r2, r3, #16
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b84:	6978      	ldr	r0, [r7, #20]
 8009b86:	f7fe fd93 	bl	80086b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b8a:	bf00      	nop
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f7fe fd7d 	bl	80086b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bb6:	bf00      	nop
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b088      	sub	sp, #32
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	e853 3f00 	ldrex	r3, [r3]
 8009bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	461a      	mov	r2, r3
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	61bb      	str	r3, [r7, #24]
 8009be6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be8:	6979      	ldr	r1, [r7, #20]
 8009bea:	69ba      	ldr	r2, [r7, #24]
 8009bec:	e841 2300 	strex	r3, r2, [r1]
 8009bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1e6      	bne.n	8009bc6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7fe fd34 	bl	8008674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c0c:	bf00      	nop
 8009c0e:	3720      	adds	r7, #32
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d101      	bne.n	8009c66 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c62:	2302      	movs	r3, #2
 8009c64:	e027      	b.n	8009cb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2224      	movs	r2, #36	@ 0x24
 8009c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0201 	bic.w	r2, r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b084      	sub	sp, #16
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d101      	bne.n	8009cda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	e02d      	b.n	8009d36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2224      	movs	r2, #36	@ 0x24
 8009ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f022 0201 	bic.w	r2, r2, #1
 8009d00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f8a4 	bl	8009e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2220      	movs	r2, #32
 8009d28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d101      	bne.n	8009d56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d52:	2302      	movs	r3, #2
 8009d54:	e02d      	b.n	8009db2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2224      	movs	r2, #36	@ 0x24
 8009d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f022 0201 	bic.w	r2, r2, #1
 8009d7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f866 	bl	8009e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2220      	movs	r2, #32
 8009da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b08c      	sub	sp, #48	@ 0x30
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	60f8      	str	r0, [r7, #12]
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dce:	2b20      	cmp	r3, #32
 8009dd0:	d142      	bne.n	8009e58 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009dd8:	88fb      	ldrh	r3, [r7, #6]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e03b      	b.n	8009e5a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2201      	movs	r2, #1
 8009de6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009dee:	88fb      	ldrh	r3, [r7, #6]
 8009df0:	461a      	mov	r2, r3
 8009df2:	68b9      	ldr	r1, [r7, #8]
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f7ff fc8b 	bl	8009710 <UART_Start_Receive_DMA>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009e00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d124      	bne.n	8009e52 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d11d      	bne.n	8009e4c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2210      	movs	r2, #16
 8009e16:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	617b      	str	r3, [r7, #20]
   return(result);
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f043 0310 	orr.w	r3, r3, #16
 8009e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e38:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	6a39      	ldr	r1, [r7, #32]
 8009e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e6      	bne.n	8009e18 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009e4a:	e002      	b.n	8009e52 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009e52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e56:	e000      	b.n	8009e5a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009e58:	2302      	movs	r3, #2
  }
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3730      	adds	r7, #48	@ 0x30
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
	...

08009e64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d108      	bne.n	8009e86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e84:	e031      	b.n	8009eea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e86:	2310      	movs	r3, #16
 8009e88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e8a:	2310      	movs	r3, #16
 8009e8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	0e5b      	lsrs	r3, r3, #25
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	f003 0307 	and.w	r3, r3, #7
 8009e9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	0f5b      	lsrs	r3, r3, #29
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	7b3a      	ldrb	r2, [r7, #12]
 8009eb2:	4911      	ldr	r1, [pc, #68]	@ (8009ef8 <UARTEx_SetNbDataToProcess+0x94>)
 8009eb4:	5c8a      	ldrb	r2, [r1, r2]
 8009eb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009eba:	7b3a      	ldrb	r2, [r7, #12]
 8009ebc:	490f      	ldr	r1, [pc, #60]	@ (8009efc <UARTEx_SetNbDataToProcess+0x98>)
 8009ebe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ec0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	7b7a      	ldrb	r2, [r7, #13]
 8009ed0:	4909      	ldr	r1, [pc, #36]	@ (8009ef8 <UARTEx_SetNbDataToProcess+0x94>)
 8009ed2:	5c8a      	ldrb	r2, [r1, r2]
 8009ed4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ed8:	7b7a      	ldrb	r2, [r7, #13]
 8009eda:	4908      	ldr	r1, [pc, #32]	@ (8009efc <UARTEx_SetNbDataToProcess+0x98>)
 8009edc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ede:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009eea:	bf00      	nop
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	08009fa8 	.word	0x08009fa8
 8009efc:	08009fb0 	.word	0x08009fb0

08009f00 <memset>:
 8009f00:	4402      	add	r2, r0
 8009f02:	4603      	mov	r3, r0
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d100      	bne.n	8009f0a <memset+0xa>
 8009f08:	4770      	bx	lr
 8009f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f0e:	e7f9      	b.n	8009f04 <memset+0x4>

08009f10 <__libc_init_array>:
 8009f10:	b570      	push	{r4, r5, r6, lr}
 8009f12:	4d0d      	ldr	r5, [pc, #52]	@ (8009f48 <__libc_init_array+0x38>)
 8009f14:	4c0d      	ldr	r4, [pc, #52]	@ (8009f4c <__libc_init_array+0x3c>)
 8009f16:	1b64      	subs	r4, r4, r5
 8009f18:	10a4      	asrs	r4, r4, #2
 8009f1a:	2600      	movs	r6, #0
 8009f1c:	42a6      	cmp	r6, r4
 8009f1e:	d109      	bne.n	8009f34 <__libc_init_array+0x24>
 8009f20:	4d0b      	ldr	r5, [pc, #44]	@ (8009f50 <__libc_init_array+0x40>)
 8009f22:	4c0c      	ldr	r4, [pc, #48]	@ (8009f54 <__libc_init_array+0x44>)
 8009f24:	f000 f818 	bl	8009f58 <_init>
 8009f28:	1b64      	subs	r4, r4, r5
 8009f2a:	10a4      	asrs	r4, r4, #2
 8009f2c:	2600      	movs	r6, #0
 8009f2e:	42a6      	cmp	r6, r4
 8009f30:	d105      	bne.n	8009f3e <__libc_init_array+0x2e>
 8009f32:	bd70      	pop	{r4, r5, r6, pc}
 8009f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f38:	4798      	blx	r3
 8009f3a:	3601      	adds	r6, #1
 8009f3c:	e7ee      	b.n	8009f1c <__libc_init_array+0xc>
 8009f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f42:	4798      	blx	r3
 8009f44:	3601      	adds	r6, #1
 8009f46:	e7f2      	b.n	8009f2e <__libc_init_array+0x1e>
 8009f48:	08009fc0 	.word	0x08009fc0
 8009f4c:	08009fc0 	.word	0x08009fc0
 8009f50:	08009fc0 	.word	0x08009fc0
 8009f54:	08009fc4 	.word	0x08009fc4

08009f58 <_init>:
 8009f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5a:	bf00      	nop
 8009f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5e:	bc08      	pop	{r3}
 8009f60:	469e      	mov	lr, r3
 8009f62:	4770      	bx	lr

08009f64 <_fini>:
 8009f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f66:	bf00      	nop
 8009f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6a:	bc08      	pop	{r3}
 8009f6c:	469e      	mov	lr, r3
 8009f6e:	4770      	bx	lr
