
uart_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d40  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800a00c  0800a00c  0000b00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a054  0800a054  0000b054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a05c  0800a05c  0000b05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a060  0800a060  0000b060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800a064  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000de4  24000010  0800a074  0000c010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000df4  0800a074  0000cdf4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017d8d  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e24  00000000  00000000  00023dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001290  00000000  00000000  00026bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e7e  00000000  00000000  00027e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033561  00000000  00000000  00028cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000190d4  00000000  00000000  0005c25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cc13  00000000  00000000  00075333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c1f46  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004eac  00000000  00000000  001c1f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001c6e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009ff4 	.word	0x08009ff4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08009ff4 	.word	0x08009ff4

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <GetSector>:
// There are 2 BANKS available for H745, BANK 1 (0x0800 0000 - 0x080F FFFF) and BANK 2 (0x0810 0000 - 0x080F FFFF)
// Both of them have Sectors 0 to 7.
// We will define the sectors in normal way (like Defined below), and later the BANK will be taken care by the HAL

static uint32_t GetSector(uint32_t Address)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]

  /* BANK 1 */
  if((Address >= 0x08000000) && (Address < 0x08020000))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800060e:	d306      	bcc.n	800061e <GetSector+0x22>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a2c      	ldr	r2, [pc, #176]	@ (80006c4 <GetSector+0xc8>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d802      	bhi.n	800061e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e04b      	b.n	80006b6 <GetSector+0xba>
  }

  else if((Address >= 0x08020000) && (Address < 0x08040000))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a28      	ldr	r2, [pc, #160]	@ (80006c4 <GetSector+0xc8>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d906      	bls.n	8000634 <GetSector+0x38>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a27      	ldr	r2, [pc, #156]	@ (80006c8 <GetSector+0xcc>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d802      	bhi.n	8000634 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800062e:	2301      	movs	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e040      	b.n	80006b6 <GetSector+0xba>
  }

  else if((Address >= 0x08040000) && (Address < 0x08060000))
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <GetSector+0xcc>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d906      	bls.n	800064a <GetSector+0x4e>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a23      	ldr	r2, [pc, #140]	@ (80006cc <GetSector+0xd0>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d802      	bhi.n	800064a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000644:	2302      	movs	r3, #2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	e035      	b.n	80006b6 <GetSector+0xba>
  }

  else if((Address >= 0x08060000) && (Address < 0x08080000))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a1f      	ldr	r2, [pc, #124]	@ (80006cc <GetSector+0xd0>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d906      	bls.n	8000660 <GetSector+0x64>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a1e      	ldr	r2, [pc, #120]	@ (80006d0 <GetSector+0xd4>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d802      	bhi.n	8000660 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800065a:	2303      	movs	r3, #3
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	e02a      	b.n	80006b6 <GetSector+0xba>
  }

  else if((Address >= 0x08080000) && (Address < 0x080A0000))
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a1b      	ldr	r2, [pc, #108]	@ (80006d0 <GetSector+0xd4>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d906      	bls.n	8000676 <GetSector+0x7a>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a1a      	ldr	r2, [pc, #104]	@ (80006d4 <GetSector+0xd8>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d802      	bhi.n	8000676 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000670:	2304      	movs	r3, #4
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	e01f      	b.n	80006b6 <GetSector+0xba>
  }

  else if((Address >= 0x080A0000) && (Address < 0x080C0000))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a16      	ldr	r2, [pc, #88]	@ (80006d4 <GetSector+0xd8>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d906      	bls.n	800068c <GetSector+0x90>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a15      	ldr	r2, [pc, #84]	@ (80006d8 <GetSector+0xdc>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d802      	bhi.n	800068c <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000686:	2305      	movs	r3, #5
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	e014      	b.n	80006b6 <GetSector+0xba>
  }

  else if((Address >= 0x080C0000) && (Address < 0x080E0000))
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <GetSector+0xdc>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d906      	bls.n	80006a2 <GetSector+0xa6>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a11      	ldr	r2, [pc, #68]	@ (80006dc <GetSector+0xe0>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d802      	bhi.n	80006a2 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 800069c:	2306      	movs	r3, #6
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	e009      	b.n	80006b6 <GetSector+0xba>
  }

  else if((Address >= 0x080E0000) && (Address < 0x08100000))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0d      	ldr	r2, [pc, #52]	@ (80006dc <GetSector+0xe0>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d905      	bls.n	80006b6 <GetSector+0xba>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80006b0:	d201      	bcs.n	80006b6 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80006b2:	2307      	movs	r3, #7
 80006b4:	60fb      	str	r3, [r7, #12]
  else if((Address >= 0x081E0000) && (Address < 0x08200000))
  {
    sector = FLASH_SECTOR_7;
  } */

  return sector;
 80006b6:	68fb      	ldr	r3, [r7, #12]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	0801ffff 	.word	0x0801ffff
 80006c8:	0803ffff 	.word	0x0803ffff
 80006cc:	0805ffff 	.word	0x0805ffff
 80006d0:	0807ffff 	.word	0x0807ffff
 80006d4:	0809ffff 	.word	0x0809ffff
 80006d8:	080bffff 	.word	0x080bffff
 80006dc:	080dffff 	.word	0x080dffff

080006e0 <Flash_Erase_Sector>:
   return float_variable;
}


uint32_t Flash_Erase_Sector(uint32_t StartSectorAddress)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80006e8:	f003 ffbc 	bl	8004664 <HAL_FLASH_Unlock>

	/* Erase the user Flash area */

	/* Get the number of sector to erase from 1st sector */

	uint32_t StartSector = GetSector(StartSectorAddress);
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff ff85 	bl	80005fc <GetSector>
 80006f2:	6178      	str	r0, [r7, #20]
//	uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
	uint32_t EndSectorAddress = StartSectorAddress;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	613b      	str	r3, [r7, #16]
	uint32_t EndSector = GetSector(EndSectorAddress);
 80006f8:	6938      	ldr	r0, [r7, #16]
 80006fa:	f7ff ff7f 	bl	80005fc <GetSector>
 80006fe:	60f8      	str	r0, [r7, #12]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <Flash_Erase_Sector+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <Flash_Erase_Sector+0x74>)
 8000708:	2220      	movs	r2, #32
 800070a:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = StartSector;
 800070c:	4a11      	ldr	r2, [pc, #68]	@ (8000754 <Flash_Erase_Sector+0x74>)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	6093      	str	r3, [r2, #8]

	// The the proper BANK to erase the Sector
	if (StartSectorAddress < 0x08100000)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8000718:	d202      	bcs.n	8000720 <Flash_Erase_Sector+0x40>
	EraseInitStruct.Banks     = FLASH_BANK_1;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <Flash_Erase_Sector+0x74>)
 800071c:	2201      	movs	r2, #1
 800071e:	605a      	str	r2, [r3, #4]
	//	  else EraseInitStruct.Banks    = FLASH_BANK_2;

	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	3301      	adds	r3, #1
 8000728:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <Flash_Erase_Sector+0x74>)
 800072a:	60d3      	str	r3, [r2, #12]


	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	4619      	mov	r1, r3
 8000732:	4808      	ldr	r0, [pc, #32]	@ (8000754 <Flash_Erase_Sector+0x74>)
 8000734:	f004 f832 	bl	800479c <HAL_FLASHEx_Erase>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d003      	beq.n	8000746 <Flash_Erase_Sector+0x66>
		return HAL_FLASH_GetError();
 800073e:	f003 ffcb 	bl	80046d8 <HAL_FLASH_GetError>
 8000742:	4603      	mov	r3, r0
 8000744:	e002      	b.n	800074c <Flash_Erase_Sector+0x6c>

	HAL_FLASH_Lock();
 8000746:	f003 ffaf 	bl	80046a8 <HAL_FLASH_Lock>

	return 0;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2400002c 	.word	0x2400002c

08000758 <Flash_Write_Data>:
*          - 256 bits for STM32H72x/3X devices (8x 32bits words)
*
*/

uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *data, uint16_t numberofwords)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	4613      	mov	r3, r2
 8000764:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24

	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 800076a:	f003 ff7b 	bl	8004664 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f7ff ff44 	bl	80005fc <GetSector>
 8000774:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	461a      	mov	r2, r3
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	4413      	add	r3, r2
 8000780:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8000782:	69f8      	ldr	r0, [r7, #28]
 8000784:	f7ff ff3a 	bl	80005fc <GetSector>
 8000788:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800078a:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <Flash_Write_Data+0xbc>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000790:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <Flash_Write_Data+0xbc>)
 8000792:	2220      	movs	r2, #32
 8000794:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8000796:	4a1f      	ldr	r2, [pc, #124]	@ (8000814 <Flash_Write_Data+0xbc>)
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	6093      	str	r3, [r2, #8]

	  // The the proper BANK to erase the Sector
	  if (StartSectorAddress < 0x08100000)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80007a2:	d202      	bcs.n	80007aa <Flash_Write_Data+0x52>
		  EraseInitStruct.Banks     = FLASH_BANK_1;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <Flash_Write_Data+0xbc>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	605a      	str	r2, [r3, #4]
//	  else EraseInitStruct.Banks    = FLASH_BANK_2;

	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80007aa:	69ba      	ldr	r2, [r7, #24]
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	3301      	adds	r3, #1
 80007b2:	4a18      	ldr	r2, [pc, #96]	@ (8000814 <Flash_Write_Data+0xbc>)
 80007b4:	60d3      	str	r3, [r2, #12]


	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4815      	ldr	r0, [pc, #84]	@ (8000814 <Flash_Write_Data+0xbc>)
 80007be:	f003 ffed 	bl	800479c <HAL_FLASHEx_Erase>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d01a      	beq.n	80007fe <Flash_Write_Data+0xa6>
	  {
		  return HAL_FLASH_GetError();
 80007c8:	f003 ff86 	bl	80046d8 <HAL_FLASH_GetError>
 80007cc:	4603      	mov	r3, r0
 80007ce:	e01d      	b.n	800080c <Flash_Write_Data+0xb4>
	  /* Program the user Flash area 8 WORDS at a time
	   * (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, StartSectorAddress, (uint32_t ) &data[sofar]) == HAL_OK)
 80007d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	461a      	mov	r2, r3
 80007da:	68f9      	ldr	r1, [r7, #12]
 80007dc:	2001      	movs	r0, #1
 80007de:	f003 fed1 	bl	8004584 <HAL_FLASH_Program>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d106      	bne.n	80007f6 <Flash_Write_Data+0x9e>
	     {
	    	 StartSectorAddress += 4*FLASHWORD;  //
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3320      	adds	r3, #32
 80007ec:	60fb      	str	r3, [r7, #12]
	    	 sofar+=FLASHWORD;
 80007ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f0:	3308      	adds	r3, #8
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80007f4:	e003      	b.n	80007fe <Flash_Write_Data+0xa6>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80007f6:	f003 ff6f 	bl	80046d8 <HAL_FLASH_GetError>
 80007fa:	4603      	mov	r3, r0
 80007fc:	e006      	b.n	800080c <Flash_Write_Data+0xb4>
	   while (sofar<numberofwords)
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000802:	429a      	cmp	r2, r3
 8000804:	dbe4      	blt.n	80007d0 <Flash_Write_Data+0x78>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8000806:	f003 ff4f 	bl	80046a8 <HAL_FLASH_Lock>

	   return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	24000040 	.word	0x24000040

08000818 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *data, uint16_t numberofwords)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	4613      	mov	r3, r2
 8000824:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*data = *(__IO uint32_t *)StartSectorAddress;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	3304      	adds	r3, #4
 8000832:	60fb      	str	r3, [r7, #12]
		data++;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	3304      	adds	r3, #4
 8000838:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	1e5a      	subs	r2, r3, #1
 800083e:	80fa      	strh	r2, [r7, #6]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d000      	beq.n	8000846 <Flash_Read_Data+0x2e>
		*data = *(__IO uint32_t *)StartSectorAddress;
 8000844:	e7ef      	b.n	8000826 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000846:	bf00      	nop
	}
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <HAL_UARTEx_RxEventCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	807b      	strh	r3, [r7, #2]
	UNUSED(Size);

	/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
	 */
	temp = Size;
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000864:	6013      	str	r3, [r2, #0]

	if(Size != BUFFER_SIZE)
 8000866:	887b      	ldrh	r3, [r7, #2]
 8000868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800086c:	d003      	beq.n	8000876 <HAL_UARTEx_RxEventCallback+0x22>
		data_reception_complete = 1;
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_UARTEx_RxEventCallback+0x40>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
	else if(Size == BUFFER_SIZE)
		buf_overflow = 1;
}
 8000874:	e006      	b.n	8000884 <HAL_UARTEx_RxEventCallback+0x30>
	else if(Size == BUFFER_SIZE)
 8000876:	887b      	ldrh	r3, [r7, #2]
 8000878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800087c:	d102      	bne.n	8000884 <HAL_UARTEx_RxEventCallback+0x30>
		buf_overflow = 1;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_UARTEx_RxEventCallback+0x44>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	24000d74 	.word	0x24000d74
 8000894:	24000d63 	.word	0x24000d63
 8000898:	24000d7c 	.word	0x24000d7c

0800089c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008a2:	f000 fed7 	bl	8001654 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008a6:	f000 fa85 	bl	8000db4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008aa:	f000 fb5f 	bl	8000f6c <MX_GPIO_Init>
	MX_DMA_Init();
 80008ae:	f000 fb3d 	bl	8000f2c <MX_DMA_Init>
	MX_USART2_UART_Init();
 80008b2:	f000 faef 	bl	8000e94 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 80008b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ba:	f000 ff27 	bl	800170c <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"Start\n", 6, 100);
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	2206      	movs	r2, #6
 80008c2:	495e      	ldr	r1, [pc, #376]	@ (8000a3c <main+0x1a0>)
 80008c4:	485e      	ldr	r0, [pc, #376]	@ (8000a40 <main+0x1a4>)
 80008c6:	f007 fadb 	bl	8007e80 <HAL_UART_Transmit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// Erase FLASH contents
	Flash_Erase_Sector(0x08060000);
 80008ca:	485e      	ldr	r0, [pc, #376]	@ (8000a44 <main+0x1a8>)
 80008cc:	f7ff ff08 	bl	80006e0 <Flash_Erase_Sector>

	// Set array to NULL
	memset(received_data, '~', BUFFER_SIZE);
 80008d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008d4:	217e      	movs	r1, #126	@ 0x7e
 80008d6:	485c      	ldr	r0, [pc, #368]	@ (8000a48 <main+0x1ac>)
 80008d8:	f009 fb60 	bl	8009f9c <memset>

	// Trigger Receive DMA
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, received_data, BUFFER_SIZE);
 80008dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008e0:	4959      	ldr	r1, [pc, #356]	@ (8000a48 <main+0x1ac>)
 80008e2:	4857      	ldr	r0, [pc, #348]	@ (8000a40 <main+0x1a4>)
 80008e4:	f009 fab7 	bl	8009e56 <HAL_UARTEx_ReceiveToIdle_DMA>
	// Disable half transfer complete IRQ
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80008e8:	4b58      	ldr	r3, [pc, #352]	@ (8000a4c <main+0x1b0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a58      	ldr	r2, [pc, #352]	@ (8000a50 <main+0x1b4>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d04a      	beq.n	8000988 <main+0xec>
 80008f2:	4b56      	ldr	r3, [pc, #344]	@ (8000a4c <main+0x1b0>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a57      	ldr	r2, [pc, #348]	@ (8000a54 <main+0x1b8>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d045      	beq.n	8000988 <main+0xec>
 80008fc:	4b53      	ldr	r3, [pc, #332]	@ (8000a4c <main+0x1b0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a55      	ldr	r2, [pc, #340]	@ (8000a58 <main+0x1bc>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d040      	beq.n	8000988 <main+0xec>
 8000906:	4b51      	ldr	r3, [pc, #324]	@ (8000a4c <main+0x1b0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a54      	ldr	r2, [pc, #336]	@ (8000a5c <main+0x1c0>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d03b      	beq.n	8000988 <main+0xec>
 8000910:	4b4e      	ldr	r3, [pc, #312]	@ (8000a4c <main+0x1b0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a52      	ldr	r2, [pc, #328]	@ (8000a60 <main+0x1c4>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d036      	beq.n	8000988 <main+0xec>
 800091a:	4b4c      	ldr	r3, [pc, #304]	@ (8000a4c <main+0x1b0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a51      	ldr	r2, [pc, #324]	@ (8000a64 <main+0x1c8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d031      	beq.n	8000988 <main+0xec>
 8000924:	4b49      	ldr	r3, [pc, #292]	@ (8000a4c <main+0x1b0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a4f      	ldr	r2, [pc, #316]	@ (8000a68 <main+0x1cc>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d02c      	beq.n	8000988 <main+0xec>
 800092e:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <main+0x1b0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a4e      	ldr	r2, [pc, #312]	@ (8000a6c <main+0x1d0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d027      	beq.n	8000988 <main+0xec>
 8000938:	4b44      	ldr	r3, [pc, #272]	@ (8000a4c <main+0x1b0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a4c      	ldr	r2, [pc, #304]	@ (8000a70 <main+0x1d4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d022      	beq.n	8000988 <main+0xec>
 8000942:	4b42      	ldr	r3, [pc, #264]	@ (8000a4c <main+0x1b0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a4b      	ldr	r2, [pc, #300]	@ (8000a74 <main+0x1d8>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d01d      	beq.n	8000988 <main+0xec>
 800094c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a4c <main+0x1b0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a49      	ldr	r2, [pc, #292]	@ (8000a78 <main+0x1dc>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d018      	beq.n	8000988 <main+0xec>
 8000956:	4b3d      	ldr	r3, [pc, #244]	@ (8000a4c <main+0x1b0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a48      	ldr	r2, [pc, #288]	@ (8000a7c <main+0x1e0>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d013      	beq.n	8000988 <main+0xec>
 8000960:	4b3a      	ldr	r3, [pc, #232]	@ (8000a4c <main+0x1b0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a46      	ldr	r2, [pc, #280]	@ (8000a80 <main+0x1e4>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d00e      	beq.n	8000988 <main+0xec>
 800096a:	4b38      	ldr	r3, [pc, #224]	@ (8000a4c <main+0x1b0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a45      	ldr	r2, [pc, #276]	@ (8000a84 <main+0x1e8>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d009      	beq.n	8000988 <main+0xec>
 8000974:	4b35      	ldr	r3, [pc, #212]	@ (8000a4c <main+0x1b0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a43      	ldr	r2, [pc, #268]	@ (8000a88 <main+0x1ec>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d004      	beq.n	8000988 <main+0xec>
 800097e:	4b33      	ldr	r3, [pc, #204]	@ (8000a4c <main+0x1b0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a42      	ldr	r2, [pc, #264]	@ (8000a8c <main+0x1f0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d108      	bne.n	800099a <main+0xfe>
 8000988:	4b30      	ldr	r3, [pc, #192]	@ (8000a4c <main+0x1b0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a4c <main+0x1b0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f022 0208 	bic.w	r2, r2, #8
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	e007      	b.n	80009aa <main+0x10e>
 800099a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a4c <main+0x1b0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a4c <main+0x1b0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 0204 	bic.w	r2, r2, #4
 80009a8:	601a      	str	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		while((received_data[receive_buffer_index + previous_received_data_size] != '~') && ((receive_buffer_index + previous_received_data_size) < BUFFER_SIZE))
 80009aa:	e088      	b.n	8000abe <main+0x222>

//			// Save received uint8_t character
//			buffer[receive_buffer_index] = received_data[receive_buffer_index + previous_received_data_size];


			flash_tx_data |= (uint32_t)received_data[receive_buffer_index + previous_received_data_size] << (8 * local_count);
 80009ac:	4b38      	ldr	r3, [pc, #224]	@ (8000a90 <main+0x1f4>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b38      	ldr	r3, [pc, #224]	@ (8000a94 <main+0x1f8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a24      	ldr	r2, [pc, #144]	@ (8000a48 <main+0x1ac>)
 80009b8:	5cd3      	ldrb	r3, [r2, r3]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b36      	ldr	r3, [pc, #216]	@ (8000a98 <main+0x1fc>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	409a      	lsls	r2, r3
 80009c4:	4b35      	ldr	r3, [pc, #212]	@ (8000a9c <main+0x200>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	4a34      	ldr	r2, [pc, #208]	@ (8000a9c <main+0x200>)
 80009cc:	6013      	str	r3, [r2, #0]

			if(local_count == 3)
 80009ce:	4b32      	ldr	r3, [pc, #200]	@ (8000a98 <main+0x1fc>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d168      	bne.n	8000aa8 <main+0x20c>
			{
				local_count = 0;
 80009d6:	4b30      	ldr	r3, [pc, #192]	@ (8000a98 <main+0x1fc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]

				// Read data from FLASH
				Flash_Read_Data(0x08060000, flash_rx_data, total_number_of_words);
 80009dc:	4b30      	ldr	r3, [pc, #192]	@ (8000aa0 <main+0x204>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a30      	ldr	r2, [pc, #192]	@ (8000aa4 <main+0x208>)
 80009e2:	8812      	ldrh	r2, [r2, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4817      	ldr	r0, [pc, #92]	@ (8000a44 <main+0x1a8>)
 80009e8:	f7ff ff16 	bl	8000818 <Flash_Read_Data>
				HAL_Delay(50);
 80009ec:	2032      	movs	r0, #50	@ 0x32
 80009ee:	f000 fe8d 	bl	800170c <HAL_Delay>

				// Erase FLASH contents
				Flash_Erase_Sector(0x08060000);
 80009f2:	4814      	ldr	r0, [pc, #80]	@ (8000a44 <main+0x1a8>)
 80009f4:	f7ff fe74 	bl	80006e0 <Flash_Erase_Sector>
				HAL_Delay(50);
 80009f8:	2032      	movs	r0, #50	@ 0x32
 80009fa:	f000 fe87 	bl	800170c <HAL_Delay>

				*(flash_rx_data + total_number_of_words) = flash_tx_data;
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <main+0x204>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b28      	ldr	r3, [pc, #160]	@ (8000aa4 <main+0x208>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a24      	ldr	r2, [pc, #144]	@ (8000a9c <main+0x200>)
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	601a      	str	r2, [r3, #0]
				total_number_of_words++;
 8000a10:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <main+0x208>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <main+0x208>)
 8000a1a:	801a      	strh	r2, [r3, #0]

				// Write data into FLASH
				Flash_Write_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000a1c:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <main+0x204>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a20      	ldr	r2, [pc, #128]	@ (8000aa4 <main+0x208>)
 8000a22:	8812      	ldrh	r2, [r2, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	4807      	ldr	r0, [pc, #28]	@ (8000a44 <main+0x1a8>)
 8000a28:	f7ff fe96 	bl	8000758 <Flash_Write_Data>
				HAL_Delay(50);
 8000a2c:	2032      	movs	r0, #50	@ 0x32
 8000a2e:	f000 fe6d 	bl	800170c <HAL_Delay>

				flash_tx_data = 0;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <main+0x200>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	e03c      	b.n	8000ab4 <main+0x218>
 8000a3a:	bf00      	nop
 8000a3c:	0800a00c 	.word	0x0800a00c
 8000a40:	24000054 	.word	0x24000054
 8000a44:	08060000 	.word	0x08060000
 8000a48:	24000160 	.word	0x24000160
 8000a4c:	240000e8 	.word	0x240000e8
 8000a50:	40020010 	.word	0x40020010
 8000a54:	40020028 	.word	0x40020028
 8000a58:	40020040 	.word	0x40020040
 8000a5c:	40020058 	.word	0x40020058
 8000a60:	40020070 	.word	0x40020070
 8000a64:	40020088 	.word	0x40020088
 8000a68:	400200a0 	.word	0x400200a0
 8000a6c:	400200b8 	.word	0x400200b8
 8000a70:	40020410 	.word	0x40020410
 8000a74:	40020428 	.word	0x40020428
 8000a78:	40020440 	.word	0x40020440
 8000a7c:	40020458 	.word	0x40020458
 8000a80:	40020470 	.word	0x40020470
 8000a84:	40020488 	.word	0x40020488
 8000a88:	400204a0 	.word	0x400204a0
 8000a8c:	400204b8 	.word	0x400204b8
 8000a90:	24000d68 	.word	0x24000d68
 8000a94:	24000d70 	.word	0x24000d70
 8000a98:	24000d62 	.word	0x24000d62
 8000a9c:	24000d80 	.word	0x24000d80
 8000aa0:	24000d84 	.word	0x24000d84
 8000aa4:	24000d60 	.word	0x24000d60
			}
			else
				local_count++;
 8000aa8:	4b80      	ldr	r3, [pc, #512]	@ (8000cac <main+0x410>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8000cac <main+0x410>)
 8000ab2:	701a      	strb	r2, [r3, #0]

			// Increment receive_buffer_index
//			receive_buffer_index++;

			receive_buffer_index++;
 8000ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8000cb0 <main+0x414>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	4a7d      	ldr	r2, [pc, #500]	@ (8000cb0 <main+0x414>)
 8000abc:	6013      	str	r3, [r2, #0]
		while((received_data[receive_buffer_index + previous_received_data_size] != '~') && ((receive_buffer_index + previous_received_data_size) < BUFFER_SIZE))
 8000abe:	4b7c      	ldr	r3, [pc, #496]	@ (8000cb0 <main+0x414>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8000cb4 <main+0x418>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a7b      	ldr	r2, [pc, #492]	@ (8000cb8 <main+0x41c>)
 8000aca:	5cd3      	ldrb	r3, [r2, r3]
 8000acc:	2b7e      	cmp	r3, #126	@ 0x7e
 8000ace:	d008      	beq.n	8000ae2 <main+0x246>
 8000ad0:	4b77      	ldr	r3, [pc, #476]	@ (8000cb0 <main+0x414>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b77      	ldr	r3, [pc, #476]	@ (8000cb4 <main+0x418>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ade:	f4ff af65 	bcc.w	80009ac <main+0x110>
//			main_buffer_index++;
		}

		if(flash_tx_data != 0)
 8000ae2:	4b76      	ldr	r3, [pc, #472]	@ (8000cbc <main+0x420>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d02d      	beq.n	8000b46 <main+0x2aa>
		{
//			local_count = 0;

			// Read data from FLASH
			Flash_Read_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000aea:	4b75      	ldr	r3, [pc, #468]	@ (8000cc0 <main+0x424>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a75      	ldr	r2, [pc, #468]	@ (8000cc4 <main+0x428>)
 8000af0:	8812      	ldrh	r2, [r2, #0]
 8000af2:	4619      	mov	r1, r3
 8000af4:	4874      	ldr	r0, [pc, #464]	@ (8000cc8 <main+0x42c>)
 8000af6:	f7ff fe8f 	bl	8000818 <Flash_Read_Data>
			HAL_Delay(50);
 8000afa:	2032      	movs	r0, #50	@ 0x32
 8000afc:	f000 fe06 	bl	800170c <HAL_Delay>

			// Erase FLASH contents
			Flash_Erase_Sector(0x08060000);
 8000b00:	4871      	ldr	r0, [pc, #452]	@ (8000cc8 <main+0x42c>)
 8000b02:	f7ff fded 	bl	80006e0 <Flash_Erase_Sector>
			HAL_Delay(50);
 8000b06:	2032      	movs	r0, #50	@ 0x32
 8000b08:	f000 fe00 	bl	800170c <HAL_Delay>

			*(flash_rx_data + total_number_of_words) = flash_tx_data;
 8000b0c:	4b6c      	ldr	r3, [pc, #432]	@ (8000cc0 <main+0x424>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b6c      	ldr	r3, [pc, #432]	@ (8000cc4 <main+0x428>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	4a68      	ldr	r2, [pc, #416]	@ (8000cbc <main+0x420>)
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	601a      	str	r2, [r3, #0]
			total_number_of_words++;
 8000b1e:	4b69      	ldr	r3, [pc, #420]	@ (8000cc4 <main+0x428>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	4b67      	ldr	r3, [pc, #412]	@ (8000cc4 <main+0x428>)
 8000b28:	801a      	strh	r2, [r3, #0]

			// Write data into FLASH
			Flash_Write_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000b2a:	4b65      	ldr	r3, [pc, #404]	@ (8000cc0 <main+0x424>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a65      	ldr	r2, [pc, #404]	@ (8000cc4 <main+0x428>)
 8000b30:	8812      	ldrh	r2, [r2, #0]
 8000b32:	4619      	mov	r1, r3
 8000b34:	4864      	ldr	r0, [pc, #400]	@ (8000cc8 <main+0x42c>)
 8000b36:	f7ff fe0f 	bl	8000758 <Flash_Write_Data>
			HAL_Delay(50);
 8000b3a:	2032      	movs	r0, #50	@ 0x32
 8000b3c:	f000 fde6 	bl	800170c <HAL_Delay>

			flash_tx_data = 0;
 8000b40:	4b5e      	ldr	r3, [pc, #376]	@ (8000cbc <main+0x420>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
//				i++;
//				receive_buffer_index++;
//			}
//		}

		if(data_reception_complete)
 8000b46:	4b61      	ldr	r3, [pc, #388]	@ (8000ccc <main+0x430>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f000 8095 	beq.w	8000c7c <main+0x3e0>
		{
			data_reception_complete = 0;
 8000b52:	4b5e      	ldr	r3, [pc, #376]	@ (8000ccc <main+0x430>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]

			data_copying_complete = 1;
 8000b58:	4b5d      	ldr	r3, [pc, #372]	@ (8000cd0 <main+0x434>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
			received_data_length = receive_buffer_index;
 8000b5e:	4b54      	ldr	r3, [pc, #336]	@ (8000cb0 <main+0x414>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a5c      	ldr	r2, [pc, #368]	@ (8000cd4 <main+0x438>)
 8000b64:	6013      	str	r3, [r2, #0]

			receive_buffer_index = 0;
 8000b66:	4b52      	ldr	r3, [pc, #328]	@ (8000cb0 <main+0x414>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
			main_buffer_index = 0;
 8000b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8000cd8 <main+0x43c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]

			memset(received_data, '~', BUFFER_SIZE);
 8000b72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b76:	217e      	movs	r1, #126	@ 0x7e
 8000b78:	484f      	ldr	r0, [pc, #316]	@ (8000cb8 <main+0x41c>)
 8000b7a:	f009 fa0f 	bl	8009f9c <memset>
//			memset(buffer, '\0', BUFFER_SIZE);

			previous_received_data_size = temp;
 8000b7e:	4b57      	ldr	r3, [pc, #348]	@ (8000cdc <main+0x440>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a4c      	ldr	r2, [pc, #304]	@ (8000cb4 <main+0x418>)
 8000b84:	6013      	str	r3, [r2, #0]
			if(previous_received_data_size > BUFFER_SIZE)
 8000b86:	4b4b      	ldr	r3, [pc, #300]	@ (8000cb4 <main+0x418>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b8e:	d906      	bls.n	8000b9e <main+0x302>
				previous_received_data_size = previous_received_data_size - BUFFER_SIZE;
 8000b90:	4b48      	ldr	r3, [pc, #288]	@ (8000cb4 <main+0x418>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000b98:	4a46      	ldr	r2, [pc, #280]	@ (8000cb4 <main+0x418>)
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	e007      	b.n	8000bae <main+0x312>
			else if(previous_received_data_size == BUFFER_SIZE)
 8000b9e:	4b45      	ldr	r3, [pc, #276]	@ (8000cb4 <main+0x418>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ba6:	d102      	bne.n	8000bae <main+0x312>
				previous_received_data_size = 0;
 8000ba8:	4b42      	ldr	r3, [pc, #264]	@ (8000cb4 <main+0x418>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]

			// Trigger Receive DMA
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, &received_data[0], BUFFER_SIZE);
 8000bae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb2:	4941      	ldr	r1, [pc, #260]	@ (8000cb8 <main+0x41c>)
 8000bb4:	484a      	ldr	r0, [pc, #296]	@ (8000ce0 <main+0x444>)
 8000bb6:	f009 f94e 	bl	8009e56 <HAL_UARTEx_ReceiveToIdle_DMA>
			// Disable half transfer complete IRQ
			__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000bba:	4b4a      	ldr	r3, [pc, #296]	@ (8000ce4 <main+0x448>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a4a      	ldr	r2, [pc, #296]	@ (8000ce8 <main+0x44c>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d04a      	beq.n	8000c5a <main+0x3be>
 8000bc4:	4b47      	ldr	r3, [pc, #284]	@ (8000ce4 <main+0x448>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a48      	ldr	r2, [pc, #288]	@ (8000cec <main+0x450>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d045      	beq.n	8000c5a <main+0x3be>
 8000bce:	4b45      	ldr	r3, [pc, #276]	@ (8000ce4 <main+0x448>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a47      	ldr	r2, [pc, #284]	@ (8000cf0 <main+0x454>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d040      	beq.n	8000c5a <main+0x3be>
 8000bd8:	4b42      	ldr	r3, [pc, #264]	@ (8000ce4 <main+0x448>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a45      	ldr	r2, [pc, #276]	@ (8000cf4 <main+0x458>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d03b      	beq.n	8000c5a <main+0x3be>
 8000be2:	4b40      	ldr	r3, [pc, #256]	@ (8000ce4 <main+0x448>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a44      	ldr	r2, [pc, #272]	@ (8000cf8 <main+0x45c>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d036      	beq.n	8000c5a <main+0x3be>
 8000bec:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce4 <main+0x448>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a42      	ldr	r2, [pc, #264]	@ (8000cfc <main+0x460>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d031      	beq.n	8000c5a <main+0x3be>
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ce4 <main+0x448>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a41      	ldr	r2, [pc, #260]	@ (8000d00 <main+0x464>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d02c      	beq.n	8000c5a <main+0x3be>
 8000c00:	4b38      	ldr	r3, [pc, #224]	@ (8000ce4 <main+0x448>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a3f      	ldr	r2, [pc, #252]	@ (8000d04 <main+0x468>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d027      	beq.n	8000c5a <main+0x3be>
 8000c0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ce4 <main+0x448>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d08 <main+0x46c>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d022      	beq.n	8000c5a <main+0x3be>
 8000c14:	4b33      	ldr	r3, [pc, #204]	@ (8000ce4 <main+0x448>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a3c      	ldr	r2, [pc, #240]	@ (8000d0c <main+0x470>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d01d      	beq.n	8000c5a <main+0x3be>
 8000c1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ce4 <main+0x448>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a3b      	ldr	r2, [pc, #236]	@ (8000d10 <main+0x474>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d018      	beq.n	8000c5a <main+0x3be>
 8000c28:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce4 <main+0x448>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a39      	ldr	r2, [pc, #228]	@ (8000d14 <main+0x478>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d013      	beq.n	8000c5a <main+0x3be>
 8000c32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce4 <main+0x448>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a38      	ldr	r2, [pc, #224]	@ (8000d18 <main+0x47c>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d00e      	beq.n	8000c5a <main+0x3be>
 8000c3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ce4 <main+0x448>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a36      	ldr	r2, [pc, #216]	@ (8000d1c <main+0x480>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d009      	beq.n	8000c5a <main+0x3be>
 8000c46:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <main+0x448>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a35      	ldr	r2, [pc, #212]	@ (8000d20 <main+0x484>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d004      	beq.n	8000c5a <main+0x3be>
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <main+0x448>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a33      	ldr	r2, [pc, #204]	@ (8000d24 <main+0x488>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d108      	bne.n	8000c6c <main+0x3d0>
 8000c5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <main+0x448>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <main+0x448>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 0208 	bic.w	r2, r2, #8
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e007      	b.n	8000c7c <main+0x3e0>
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <main+0x448>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <main+0x448>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0204 	bic.w	r2, r2, #4
 8000c7a:	601a      	str	r2, [r3, #0]
		}

		if(data_copying_complete)
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <main+0x434>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 8088 	beq.w	8000d96 <main+0x4fa>
		{
			uint32_t i = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
			uint32_t count = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]

			data_copying_complete = 0;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <main+0x434>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]

			// Read data from FLASH
			Flash_Read_Data(0x08060000, flash_rx_data, total_number_of_words);
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <main+0x424>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <main+0x428>)
 8000c9a:	8812      	ldrh	r2, [r2, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480a      	ldr	r0, [pc, #40]	@ (8000cc8 <main+0x42c>)
 8000ca0:	f7ff fdba 	bl	8000818 <Flash_Read_Data>

			for(i=0;i<total_number_of_words*4;i+=4)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	e05f      	b.n	8000d6a <main+0x4ce>
 8000caa:	bf00      	nop
 8000cac:	24000d62 	.word	0x24000d62
 8000cb0:	24000d68 	.word	0x24000d68
 8000cb4:	24000d70 	.word	0x24000d70
 8000cb8:	24000160 	.word	0x24000160
 8000cbc:	24000d80 	.word	0x24000d80
 8000cc0:	24000d84 	.word	0x24000d84
 8000cc4:	24000d60 	.word	0x24000d60
 8000cc8:	08060000 	.word	0x08060000
 8000ccc:	24000d63 	.word	0x24000d63
 8000cd0:	24000d64 	.word	0x24000d64
 8000cd4:	24000d78 	.word	0x24000d78
 8000cd8:	24000d6c 	.word	0x24000d6c
 8000cdc:	24000d74 	.word	0x24000d74
 8000ce0:	24000054 	.word	0x24000054
 8000ce4:	240000e8 	.word	0x240000e8
 8000ce8:	40020010 	.word	0x40020010
 8000cec:	40020028 	.word	0x40020028
 8000cf0:	40020040 	.word	0x40020040
 8000cf4:	40020058 	.word	0x40020058
 8000cf8:	40020070 	.word	0x40020070
 8000cfc:	40020088 	.word	0x40020088
 8000d00:	400200a0 	.word	0x400200a0
 8000d04:	400200b8 	.word	0x400200b8
 8000d08:	40020410 	.word	0x40020410
 8000d0c:	40020428 	.word	0x40020428
 8000d10:	40020440 	.word	0x40020440
 8000d14:	40020458 	.word	0x40020458
 8000d18:	40020470 	.word	0x40020470
 8000d1c:	40020488 	.word	0x40020488
 8000d20:	400204a0 	.word	0x400204a0
 8000d24:	400204b8 	.word	0x400204b8
			{
				tx_data[i] = *(flash_rx_data + count) & 0xFF;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <main+0x504>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b2d9      	uxtb	r1, r3
 8000d36:	4a1b      	ldr	r2, [pc, #108]	@ (8000da4 <main+0x508>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	701a      	strb	r2, [r3, #0]
				tx_data[i+1] = *(flash_rx_data + count) & 0xFF00;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a17      	ldr	r2, [pc, #92]	@ (8000da4 <main+0x508>)
 8000d46:	2100      	movs	r1, #0
 8000d48:	54d1      	strb	r1, [r2, r3]
				tx_data[i+2] = *(flash_rx_data + count) & 0xFF0000;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	4a15      	ldr	r2, [pc, #84]	@ (8000da4 <main+0x508>)
 8000d50:	2100      	movs	r1, #0
 8000d52:	54d1      	strb	r1, [r2, r3]
				tx_data[i+3] = *(flash_rx_data + count) & 0xFF000000;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3303      	adds	r3, #3
 8000d58:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <main+0x508>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	54d1      	strb	r1, [r2, r3]

				count++;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	603b      	str	r3, [r7, #0]
			for(i=0;i<total_number_of_words*4;i+=4)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3304      	adds	r3, #4
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <main+0x50c>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d3d7      	bcc.n	8000d28 <main+0x48c>
			}

			HAL_UART_Transmit(&huart2, tx_data, i+3, 100);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	3303      	adds	r3, #3
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	2364      	movs	r3, #100	@ 0x64
 8000d82:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <main+0x508>)
 8000d84:	4809      	ldr	r0, [pc, #36]	@ (8000dac <main+0x510>)
 8000d86:	f007 f87b 	bl	8007e80 <HAL_UART_Transmit>

//			memset(buffer, '~', BUFFER_SIZE);

			total_number_of_words = 0;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <main+0x50c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	801a      	strh	r2, [r3, #0]

			// Erase FLASH contents
			Flash_Erase_Sector(0x08060000);
 8000d90:	4807      	ldr	r0, [pc, #28]	@ (8000db0 <main+0x514>)
 8000d92:	f7ff fca5 	bl	80006e0 <Flash_Erase_Sector>
		}

		HAL_Delay(5);
 8000d96:	2005      	movs	r0, #5
 8000d98:	f000 fcb8 	bl	800170c <HAL_Delay>
		while((received_data[receive_buffer_index + previous_received_data_size] != '~') && ((receive_buffer_index + previous_received_data_size) < BUFFER_SIZE))
 8000d9c:	e68f      	b.n	8000abe <main+0x222>
 8000d9e:	bf00      	nop
 8000da0:	24000d84 	.word	0x24000d84
 8000da4:	24000960 	.word	0x24000960
 8000da8:	24000d60 	.word	0x24000d60
 8000dac:	24000054 	.word	0x24000054
 8000db0:	08060000 	.word	0x08060000

08000db4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09c      	sub	sp, #112	@ 0x70
 8000db8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbe:	224c      	movs	r2, #76	@ 0x4c
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f009 f8ea 	bl	8009f9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2220      	movs	r2, #32
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f009 f8e4 	bl	8009f9c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f003 ff77 	bl	8004cc8 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b2c      	ldr	r3, [pc, #176]	@ (8000e90 <SystemClock_Config+0xdc>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000de6:	4a2a      	ldr	r2, [pc, #168]	@ (8000e90 <SystemClock_Config+0xdc>)
 8000de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dec:	6193      	str	r3, [r2, #24]
 8000dee:	4b28      	ldr	r3, [pc, #160]	@ (8000e90 <SystemClock_Config+0xdc>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dfa:	bf00      	nop
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <SystemClock_Config+0xdc>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e08:	d1f8      	bne.n	8000dfc <SystemClock_Config+0x48>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8000e12:	2340      	movs	r3, #64	@ 0x40
 8000e14:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e16:	2302      	movs	r3, #2
 8000e18:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000e22:	230c      	movs	r3, #12
 8000e24:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000e26:	2301      	movs	r3, #1
 8000e28:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e32:	230c      	movs	r3, #12
 8000e34:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 ff7a 	bl	8004d3c <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000e4e:	f000 f9e1 	bl	8001214 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	233f      	movs	r3, #63	@ 0x3f
 8000e54:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2303      	movs	r3, #3
 8000e58:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e62:	2340      	movs	r3, #64	@ 0x40
 8000e64:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e66:	2340      	movs	r3, #64	@ 0x40
 8000e68:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e6e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e70:	2340      	movs	r3, #64	@ 0x40
 8000e72:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2101      	movs	r1, #1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 fb39 	bl	80054f0 <HAL_RCC_ClockConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000e84:	f000 f9c6 	bl	8001214 <Error_Handler>
	}
}
 8000e88:	bf00      	nop
 8000e8a:	3770      	adds	r7, #112	@ 0x70
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	58024800 	.word	0x58024800

08000e94 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000e98:	4b22      	ldr	r3, [pc, #136]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000e9a:	4a23      	ldr	r2, [pc, #140]	@ (8000f28 <MX_USART2_UART_Init+0x94>)
 8000e9c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 2400;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ea0:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000ea4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000edc:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ede:	f006 ff7f 	bl	8007de0 <HAL_UART_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8000ee8:	f000 f994 	bl	8001214 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000ef0:	f008 ff35 	bl	8009d5e <HAL_UARTEx_SetTxFifoThreshold>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8000efa:	f000 f98b 	bl	8001214 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4808      	ldr	r0, [pc, #32]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000f02:	f008 ff6a 	bl	8009dda <HAL_UARTEx_SetRxFifoThreshold>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8000f0c:	f000 f982 	bl	8001214 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_USART2_UART_Init+0x90>)
 8000f12:	f008 feeb 	bl	8009cec <HAL_UARTEx_DisableFifoMode>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8000f1c:	f000 f97a 	bl	8001214 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	24000054 	.word	0x24000054
 8000f28:	40004400 	.word	0x40004400

08000f2c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <MX_DMA_Init+0x3c>)
 8000f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <MX_DMA_Init+0x3c>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_DMA_Init+0x3c>)
 8000f44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	200b      	movs	r0, #11
 8000f56:	f000 fcb5 	bl	80018c4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f5a:	200b      	movs	r0, #11
 8000f5c:	f000 fccc 	bl	80018f8 <HAL_NVIC_EnableIRQ>

}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	58024400 	.word	0x58024400

08000f6c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	@ 0x30
 8000f70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b94      	ldr	r3, [pc, #592]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f88:	4a92      	ldr	r2, [pc, #584]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f92:	4b90      	ldr	r3, [pc, #576]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	4a8b      	ldr	r2, [pc, #556]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb0:	4b88      	ldr	r3, [pc, #544]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b85      	ldr	r3, [pc, #532]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	4a83      	ldr	r2, [pc, #524]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fce:	4b81      	ldr	r3, [pc, #516]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b7d      	ldr	r3, [pc, #500]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe2:	4a7c      	ldr	r2, [pc, #496]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fec:	4b79      	ldr	r3, [pc, #484]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b76      	ldr	r3, [pc, #472]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	4a74      	ldr	r2, [pc, #464]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100a:	4b72      	ldr	r3, [pc, #456]	@ (80011d4 <MX_GPIO_Init+0x268>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001018:	4b6e      	ldr	r3, [pc, #440]	@ (80011d4 <MX_GPIO_Init+0x268>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101e:	4a6d      	ldr	r2, [pc, #436]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8001020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001028:	4b6a      	ldr	r3, [pc, #424]	@ (80011d4 <MX_GPIO_Init+0x268>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001036:	4b67      	ldr	r3, [pc, #412]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	4a65      	ldr	r2, [pc, #404]	@ (80011d4 <MX_GPIO_Init+0x268>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001046:	4b63      	ldr	r3, [pc, #396]	@ (80011d4 <MX_GPIO_Init+0x268>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	f244 0101 	movw	r1, #16385	@ 0x4001
 800105a:	485f      	ldr	r0, [pc, #380]	@ (80011d8 <MX_GPIO_Init+0x26c>)
 800105c:	f003 fe1a 	bl	8004c94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001066:	485d      	ldr	r0, [pc, #372]	@ (80011dc <MX_GPIO_Init+0x270>)
 8001068:	f003 fe14 	bl	8004c94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2102      	movs	r1, #2
 8001070:	485b      	ldr	r0, [pc, #364]	@ (80011e0 <MX_GPIO_Init+0x274>)
 8001072:	f003 fe0f 	bl	8004c94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001076:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800107a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4856      	ldr	r0, [pc, #344]	@ (80011e4 <MX_GPIO_Init+0x278>)
 800108c:	f003 fc5a 	bl	8004944 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001090:	2332      	movs	r3, #50	@ 0x32
 8001092:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a0:	230b      	movs	r3, #11
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	484e      	ldr	r0, [pc, #312]	@ (80011e4 <MX_GPIO_Init+0x278>)
 80010ac:	f003 fc4a 	bl	8004944 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 80010b0:	2382      	movs	r3, #130	@ 0x82
 80010b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c0:	230b      	movs	r3, #11
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4847      	ldr	r0, [pc, #284]	@ (80011e8 <MX_GPIO_Init+0x27c>)
 80010cc:	f003 fc3a 	bl	8004944 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80010d0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80010d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	483b      	ldr	r0, [pc, #236]	@ (80011d8 <MX_GPIO_Init+0x26c>)
 80010ea:	f003 fc2b 	bl	8004944 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001100:	230b      	movs	r3, #11
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4833      	ldr	r0, [pc, #204]	@ (80011d8 <MX_GPIO_Init+0x26c>)
 800110c:	f003 fc1a 	bl	8004944 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
	GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001110:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001114:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001122:	2307      	movs	r3, #7
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	482b      	ldr	r0, [pc, #172]	@ (80011dc <MX_GPIO_Init+0x270>)
 800112e:	f003 fc09 	bl	8004944 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001136:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4824      	ldr	r0, [pc, #144]	@ (80011dc <MX_GPIO_Init+0x270>)
 800114c:	f003 fbfa 	bl	8004944 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001150:	2380      	movs	r3, #128	@ 0x80
 8001152:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001154:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001158:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4821      	ldr	r0, [pc, #132]	@ (80011ec <MX_GPIO_Init+0x280>)
 8001166:	f003 fbed 	bl	8004944 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_ID_Pin */
	GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800116a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800116e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800117c:	230a      	movs	r3, #10
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4818      	ldr	r0, [pc, #96]	@ (80011e8 <MX_GPIO_Init+0x27c>)
 8001188:	f003 fbdc 	bl	8004944 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800118c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001190:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800119e:	230b      	movs	r3, #11
 80011a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	4810      	ldr	r0, [pc, #64]	@ (80011ec <MX_GPIO_Init+0x280>)
 80011aa:	f003 fbcb 	bl	8004944 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_YELLOW_Pin */
	GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <MX_GPIO_Init+0x274>)
 80011c6:	f003 fbbd 	bl	8004944 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80011ca:	bf00      	nop
 80011cc:	3730      	adds	r7, #48	@ 0x30
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	58024400 	.word	0x58024400
 80011d8:	58020400 	.word	0x58020400
 80011dc:	58020c00 	.word	0x58020c00
 80011e0:	58021000 	.word	0x58021000
 80011e4:	58020800 	.word	0x58020800
 80011e8:	58020000 	.word	0x58020000
 80011ec:	58021800 	.word	0x58021800

080011f0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001202:	f000 fa63 	bl	80016cc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40000800 	.word	0x40000800

08001214 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_MspInit+0x30>)
 8001228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800122c:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <HAL_MspInit+0x30>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_MspInit+0x30>)
 8001238:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	58024400 	.word	0x58024400

08001254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0b8      	sub	sp, #224	@ 0xe0
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	22b8      	movs	r2, #184	@ 0xb8
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f008 fe91 	bl	8009f9c <memset>
  if(huart->Instance==USART2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a42      	ldr	r2, [pc, #264]	@ (8001388 <HAL_UART_MspInit+0x134>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d17c      	bne.n	800137e <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001284:	f04f 0202 	mov.w	r2, #2
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4618      	mov	r0, r3
 800129c:	f004 fcf6 	bl	8005c8c <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012a6:	f7ff ffb5 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <HAL_UART_MspInit+0x138>)
 80012ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b0:	4a36      	ldr	r2, [pc, #216]	@ (800138c <HAL_UART_MspInit+0x138>)
 80012b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012ba:	4b34      	ldr	r3, [pc, #208]	@ (800138c <HAL_UART_MspInit+0x138>)
 80012bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	4b30      	ldr	r3, [pc, #192]	@ (800138c <HAL_UART_MspInit+0x138>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	4a2f      	ldr	r2, [pc, #188]	@ (800138c <HAL_UART_MspInit+0x138>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d8:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <HAL_UART_MspInit+0x138>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012e6:	2360      	movs	r3, #96	@ 0x60
 80012e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fe:	2307      	movs	r3, #7
 8001300:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001304:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001308:	4619      	mov	r1, r3
 800130a:	4821      	ldr	r0, [pc, #132]	@ (8001390 <HAL_UART_MspInit+0x13c>)
 800130c:	f003 fb1a 	bl	8004944 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8001310:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <HAL_UART_MspInit+0x140>)
 8001312:	4a21      	ldr	r2, [pc, #132]	@ (8001398 <HAL_UART_MspInit+0x144>)
 8001314:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001316:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <HAL_UART_MspInit+0x140>)
 8001318:	222b      	movs	r2, #43	@ 0x2b
 800131a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <HAL_UART_MspInit+0x140>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <HAL_UART_MspInit+0x140>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <HAL_UART_MspInit+0x140>)
 800132a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800132e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <HAL_UART_MspInit+0x140>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_UART_MspInit+0x140>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_UART_MspInit+0x140>)
 800133e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001342:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <HAL_UART_MspInit+0x140>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <HAL_UART_MspInit+0x140>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001350:	4810      	ldr	r0, [pc, #64]	@ (8001394 <HAL_UART_MspInit+0x140>)
 8001352:	f000 fadf 	bl	8001914 <HAL_DMA_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800135c:	f7ff ff5a 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <HAL_UART_MspInit+0x140>)
 8001364:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001368:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <HAL_UART_MspInit+0x140>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2026      	movs	r0, #38	@ 0x26
 8001374:	f000 faa6 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001378:	2026      	movs	r0, #38	@ 0x26
 800137a:	f000 fabd 	bl	80018f8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800137e:	bf00      	nop
 8001380:	37e0      	adds	r7, #224	@ 0xe0
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40004400 	.word	0x40004400
 800138c:	58024400 	.word	0x58024400
 8001390:	58020c00 	.word	0x58020c00
 8001394:	240000e8 	.word	0x240000e8
 8001398:	40020010 	.word	0x40020010

0800139c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b090      	sub	sp, #64	@ 0x40
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	d827      	bhi.n	80013fa <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	201e      	movs	r0, #30
 80013b0:	f000 fa88 	bl	80018c4 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013b4:	201e      	movs	r0, #30
 80013b6:	f000 fa9f 	bl	80018f8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80013ba:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <HAL_InitTick+0xc4>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80013c0:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <HAL_InitTick+0xc8>)
 80013c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c6:	4a27      	ldr	r2, [pc, #156]	@ (8001464 <HAL_InitTick+0xc8>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <HAL_InitTick+0xc8>)
 80013d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013de:	f107 0210 	add.w	r2, r7, #16
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 fc0d 	bl	8005c08 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d106      	bne.n	8001406 <HAL_InitTick+0x6a>
 80013f8:	e001      	b.n	80013fe <HAL_InitTick+0x62>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e02b      	b.n	8001456 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013fe:	f004 fbd7 	bl	8005bb0 <HAL_RCC_GetPCLK1Freq>
 8001402:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001404:	e004      	b.n	8001410 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001406:	f004 fbd3 	bl	8005bb0 <HAL_RCC_GetPCLK1Freq>
 800140a:	4603      	mov	r3, r0
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001412:	4a15      	ldr	r2, [pc, #84]	@ (8001468 <HAL_InitTick+0xcc>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0c9b      	lsrs	r3, r3, #18
 800141a:	3b01      	subs	r3, #1
 800141c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_InitTick+0xd0>)
 8001420:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <HAL_InitTick+0xd4>)
 8001422:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_InitTick+0xd0>)
 8001426:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800142a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800142c:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <HAL_InitTick+0xd0>)
 800142e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001430:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <HAL_InitTick+0xd0>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <HAL_InitTick+0xd0>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800143e:	480b      	ldr	r0, [pc, #44]	@ (800146c <HAL_InitTick+0xd0>)
 8001440:	f006 f9e6 	bl	8007810 <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d104      	bne.n	8001454 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800144a:	4808      	ldr	r0, [pc, #32]	@ (800146c <HAL_InitTick+0xd0>)
 800144c:	f006 fa42 	bl	80078d4 <HAL_TIM_Base_Start_IT>
 8001450:	4603      	mov	r3, r0
 8001452:	e000      	b.n	8001456 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	3740      	adds	r7, #64	@ 0x40
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	24000008 	.word	0x24000008
 8001464:	58024400 	.word	0x58024400
 8001468:	431bde83 	.word	0x431bde83
 800146c:	24000d88 	.word	0x24000d88
 8001470:	40000800 	.word	0x40000800

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <NMI_Handler+0x4>

0800147c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <MemManage_Handler+0x4>

0800148c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <UsageFault_Handler+0x4>

0800149c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <DMA1_Stream0_IRQHandler+0x10>)
 80014da:	f001 fd41 	bl	8002f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	240000e8 	.word	0x240000e8

080014e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014ec:	4802      	ldr	r0, [pc, #8]	@ (80014f8 <TIM4_IRQHandler+0x10>)
 80014ee:	f006 fa77 	bl	80079e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	24000d88 	.word	0x24000d88

080014fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <USART2_IRQHandler+0x10>)
 8001502:	f006 fd4b 	bl	8007f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24000054 	.word	0x24000054

08001510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001514:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <SystemInit+0xd0>)
 8001516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151a:	4a31      	ldr	r2, [pc, #196]	@ (80015e0 <SystemInit+0xd0>)
 800151c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001524:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <SystemInit+0xd4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 030f 	and.w	r3, r3, #15
 800152c:	2b06      	cmp	r3, #6
 800152e:	d807      	bhi.n	8001540 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001530:	4b2c      	ldr	r3, [pc, #176]	@ (80015e4 <SystemInit+0xd4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 030f 	bic.w	r3, r3, #15
 8001538:	4a2a      	ldr	r2, [pc, #168]	@ (80015e4 <SystemInit+0xd4>)
 800153a:	f043 0307 	orr.w	r3, r3, #7
 800153e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001540:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <SystemInit+0xd8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a28      	ldr	r2, [pc, #160]	@ (80015e8 <SystemInit+0xd8>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800154c:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <SystemInit+0xd8>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001552:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <SystemInit+0xd8>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4924      	ldr	r1, [pc, #144]	@ (80015e8 <SystemInit+0xd8>)
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <SystemInit+0xdc>)
 800155a:	4013      	ands	r3, r2
 800155c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800155e:	4b21      	ldr	r3, [pc, #132]	@ (80015e4 <SystemInit+0xd4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800156a:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <SystemInit+0xd4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 030f 	bic.w	r3, r3, #15
 8001572:	4a1c      	ldr	r2, [pc, #112]	@ (80015e4 <SystemInit+0xd4>)
 8001574:	f043 0307 	orr.w	r3, r3, #7
 8001578:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800157a:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <SystemInit+0xd8>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <SystemInit+0xd8>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001586:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <SystemInit+0xd8>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800158c:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <SystemInit+0xd8>)
 800158e:	4a18      	ldr	r2, [pc, #96]	@ (80015f0 <SystemInit+0xe0>)
 8001590:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <SystemInit+0xd8>)
 8001594:	4a17      	ldr	r2, [pc, #92]	@ (80015f4 <SystemInit+0xe4>)
 8001596:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <SystemInit+0xd8>)
 800159a:	4a17      	ldr	r2, [pc, #92]	@ (80015f8 <SystemInit+0xe8>)
 800159c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800159e:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <SystemInit+0xd8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015a4:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <SystemInit+0xd8>)
 80015a6:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <SystemInit+0xe8>)
 80015a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <SystemInit+0xd8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <SystemInit+0xd8>)
 80015b2:	4a11      	ldr	r2, [pc, #68]	@ (80015f8 <SystemInit+0xe8>)
 80015b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <SystemInit+0xd8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <SystemInit+0xd8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a09      	ldr	r2, [pc, #36]	@ (80015e8 <SystemInit+0xd8>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015c8:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <SystemInit+0xd8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <SystemInit+0xec>)
 80015d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	52002000 	.word	0x52002000
 80015e8:	58024400 	.word	0x58024400
 80015ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80015f0:	02020200 	.word	0x02020200
 80015f4:	01ff0000 	.word	0x01ff0000
 80015f8:	01010280 	.word	0x01010280
 80015fc:	52004000 	.word	0x52004000

08001600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001638 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001604:	f7ff ff84 	bl	8001510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160a:	490d      	ldr	r1, [pc, #52]	@ (8001640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001620:	4c0a      	ldr	r4, [pc, #40]	@ (800164c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162e:	f008 fcbd 	bl	8009fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001632:	f7ff f933 	bl	800089c <main>
  bx  lr
 8001636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001638:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800163c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001640:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001644:	0800a064 	.word	0x0800a064
  ldr r2, =_sbss
 8001648:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800164c:	24000df4 	.word	0x24000df4

08001650 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC3_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165a:	2003      	movs	r0, #3
 800165c:	f000 f927 	bl	80018ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001660:	f004 f8fc 	bl	800585c <HAL_RCC_GetSysClockFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <HAL_Init+0x68>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	4913      	ldr	r1, [pc, #76]	@ (80016c0 <HAL_Init+0x6c>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <HAL_Init+0x68>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <HAL_Init+0x6c>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	4a0b      	ldr	r2, [pc, #44]	@ (80016c4 <HAL_Init+0x70>)
 8001696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001698:	4a0b      	ldr	r2, [pc, #44]	@ (80016c8 <HAL_Init+0x74>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169e:	200f      	movs	r0, #15
 80016a0:	f7ff fe7c 	bl	800139c <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e002      	b.n	80016b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ae:	f7ff fdb7 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	58024400 	.word	0x58024400
 80016c0:	0800a014 	.word	0x0800a014
 80016c4:	24000004 	.word	0x24000004
 80016c8:	24000000 	.word	0x24000000

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	2400000c 	.word	0x2400000c
 80016f0:	24000dd4 	.word	0x24000dd4

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	24000dd4 	.word	0x24000dd4

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2400000c 	.word	0x2400000c

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <__NVIC_SetPriorityGrouping+0x40>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	4313      	orrs	r3, r2
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <__NVIC_SetPriorityGrouping+0x40>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00
 8001798:	05fa0000 	.word	0x05fa0000

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4907      	ldr	r1, [pc, #28]	@ (80017f0 <__NVIC_EnableIRQ+0x38>)
 80017d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	@ (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	@ (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	@ 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	@ 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ff4c 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018d2:	f7ff ff63 	bl	800179c <__NVIC_GetPriorityGrouping>
 80018d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	6978      	ldr	r0, [r7, #20]
 80018de:	f7ff ffb3 	bl	8001848 <NVIC_EncodePriority>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff82 	bl	80017f4 <__NVIC_SetPriority>
}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff56 	bl	80017b8 <__NVIC_EnableIRQ>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff feea 	bl	80016f4 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e312      	b.n	8001f52 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a66      	ldr	r2, [pc, #408]	@ (8001acc <HAL_DMA_Init+0x1b8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d04a      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a65      	ldr	r2, [pc, #404]	@ (8001ad0 <HAL_DMA_Init+0x1bc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d045      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a63      	ldr	r2, [pc, #396]	@ (8001ad4 <HAL_DMA_Init+0x1c0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d040      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a62      	ldr	r2, [pc, #392]	@ (8001ad8 <HAL_DMA_Init+0x1c4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d03b      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a60      	ldr	r2, [pc, #384]	@ (8001adc <HAL_DMA_Init+0x1c8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d036      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a5f      	ldr	r2, [pc, #380]	@ (8001ae0 <HAL_DMA_Init+0x1cc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d031      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ae4 <HAL_DMA_Init+0x1d0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02c      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a5c      	ldr	r2, [pc, #368]	@ (8001ae8 <HAL_DMA_Init+0x1d4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d027      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a5a      	ldr	r2, [pc, #360]	@ (8001aec <HAL_DMA_Init+0x1d8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d022      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a59      	ldr	r2, [pc, #356]	@ (8001af0 <HAL_DMA_Init+0x1dc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d01d      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a57      	ldr	r2, [pc, #348]	@ (8001af4 <HAL_DMA_Init+0x1e0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d018      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a56      	ldr	r2, [pc, #344]	@ (8001af8 <HAL_DMA_Init+0x1e4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d013      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a54      	ldr	r2, [pc, #336]	@ (8001afc <HAL_DMA_Init+0x1e8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00e      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a53      	ldr	r2, [pc, #332]	@ (8001b00 <HAL_DMA_Init+0x1ec>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d009      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a51      	ldr	r2, [pc, #324]	@ (8001b04 <HAL_DMA_Init+0x1f0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d004      	beq.n	80019cc <HAL_DMA_Init+0xb8>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a50      	ldr	r2, [pc, #320]	@ (8001b08 <HAL_DMA_Init+0x1f4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d101      	bne.n	80019d0 <HAL_DMA_Init+0xbc>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_DMA_Init+0xbe>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 813c 	beq.w	8001c50 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a37      	ldr	r2, [pc, #220]	@ (8001acc <HAL_DMA_Init+0x1b8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d04a      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a36      	ldr	r2, [pc, #216]	@ (8001ad0 <HAL_DMA_Init+0x1bc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d045      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a34      	ldr	r2, [pc, #208]	@ (8001ad4 <HAL_DMA_Init+0x1c0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d040      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a33      	ldr	r2, [pc, #204]	@ (8001ad8 <HAL_DMA_Init+0x1c4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d03b      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a31      	ldr	r2, [pc, #196]	@ (8001adc <HAL_DMA_Init+0x1c8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d036      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a30      	ldr	r2, [pc, #192]	@ (8001ae0 <HAL_DMA_Init+0x1cc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d031      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae4 <HAL_DMA_Init+0x1d0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d02c      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae8 <HAL_DMA_Init+0x1d4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d027      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001aec <HAL_DMA_Init+0x1d8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d022      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a2a      	ldr	r2, [pc, #168]	@ (8001af0 <HAL_DMA_Init+0x1dc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d01d      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a28      	ldr	r2, [pc, #160]	@ (8001af4 <HAL_DMA_Init+0x1e0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d018      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a27      	ldr	r2, [pc, #156]	@ (8001af8 <HAL_DMA_Init+0x1e4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d013      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a25      	ldr	r2, [pc, #148]	@ (8001afc <HAL_DMA_Init+0x1e8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00e      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a24      	ldr	r2, [pc, #144]	@ (8001b00 <HAL_DMA_Init+0x1ec>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d009      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a22      	ldr	r2, [pc, #136]	@ (8001b04 <HAL_DMA_Init+0x1f0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d004      	beq.n	8001a88 <HAL_DMA_Init+0x174>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <HAL_DMA_Init+0x1f4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d108      	bne.n	8001a9a <HAL_DMA_Init+0x186>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	e007      	b.n	8001aaa <HAL_DMA_Init+0x196>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0201 	bic.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001aaa:	e02f      	b.n	8001b0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aac:	f7ff fe22 	bl	80016f4 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	d928      	bls.n	8001b0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2220      	movs	r2, #32
 8001abe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e242      	b.n	8001f52 <HAL_DMA_Init+0x63e>
 8001acc:	40020010 	.word	0x40020010
 8001ad0:	40020028 	.word	0x40020028
 8001ad4:	40020040 	.word	0x40020040
 8001ad8:	40020058 	.word	0x40020058
 8001adc:	40020070 	.word	0x40020070
 8001ae0:	40020088 	.word	0x40020088
 8001ae4:	400200a0 	.word	0x400200a0
 8001ae8:	400200b8 	.word	0x400200b8
 8001aec:	40020410 	.word	0x40020410
 8001af0:	40020428 	.word	0x40020428
 8001af4:	40020440 	.word	0x40020440
 8001af8:	40020458 	.word	0x40020458
 8001afc:	40020470 	.word	0x40020470
 8001b00:	40020488 	.word	0x40020488
 8001b04:	400204a0 	.word	0x400204a0
 8001b08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1c8      	bne.n	8001aac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4b83      	ldr	r3, [pc, #524]	@ (8001d34 <HAL_DMA_Init+0x420>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d107      	bne.n	8001b70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b28      	cmp	r3, #40	@ 0x28
 8001b76:	d903      	bls.n	8001b80 <HAL_DMA_Init+0x26c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b7e:	d91f      	bls.n	8001bc0 <HAL_DMA_Init+0x2ac>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b86:	d903      	bls.n	8001b90 <HAL_DMA_Init+0x27c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b42      	cmp	r3, #66	@ 0x42
 8001b8e:	d917      	bls.n	8001bc0 <HAL_DMA_Init+0x2ac>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b46      	cmp	r3, #70	@ 0x46
 8001b96:	d903      	bls.n	8001ba0 <HAL_DMA_Init+0x28c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b48      	cmp	r3, #72	@ 0x48
 8001b9e:	d90f      	bls.n	8001bc0 <HAL_DMA_Init+0x2ac>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b4e      	cmp	r3, #78	@ 0x4e
 8001ba6:	d903      	bls.n	8001bb0 <HAL_DMA_Init+0x29c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b52      	cmp	r3, #82	@ 0x52
 8001bae:	d907      	bls.n	8001bc0 <HAL_DMA_Init+0x2ac>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b73      	cmp	r3, #115	@ 0x73
 8001bb6:	d905      	bls.n	8001bc4 <HAL_DMA_Init+0x2b0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b77      	cmp	r3, #119	@ 0x77
 8001bbe:	d801      	bhi.n	8001bc4 <HAL_DMA_Init+0x2b0>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_DMA_Init+0x2b2>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bd0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f023 0307 	bic.w	r3, r3, #7
 8001be8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d117      	bne.n	8001c2c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00e      	beq.n	8001c2c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f002 fb2e 	bl	8004270 <DMA_CheckFifoParam>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2240      	movs	r2, #64	@ 0x40
 8001c1e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e192      	b.n	8001f52 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f002 fa69 	bl	800410c <DMA_CalcBaseAndBitshift>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	223f      	movs	r2, #63	@ 0x3f
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	e0c8      	b.n	8001de2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a38      	ldr	r2, [pc, #224]	@ (8001d38 <HAL_DMA_Init+0x424>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d022      	beq.n	8001ca0 <HAL_DMA_Init+0x38c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a37      	ldr	r2, [pc, #220]	@ (8001d3c <HAL_DMA_Init+0x428>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d01d      	beq.n	8001ca0 <HAL_DMA_Init+0x38c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a35      	ldr	r2, [pc, #212]	@ (8001d40 <HAL_DMA_Init+0x42c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d018      	beq.n	8001ca0 <HAL_DMA_Init+0x38c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a34      	ldr	r2, [pc, #208]	@ (8001d44 <HAL_DMA_Init+0x430>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_DMA_Init+0x38c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a32      	ldr	r2, [pc, #200]	@ (8001d48 <HAL_DMA_Init+0x434>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00e      	beq.n	8001ca0 <HAL_DMA_Init+0x38c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a31      	ldr	r2, [pc, #196]	@ (8001d4c <HAL_DMA_Init+0x438>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d009      	beq.n	8001ca0 <HAL_DMA_Init+0x38c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a2f      	ldr	r2, [pc, #188]	@ (8001d50 <HAL_DMA_Init+0x43c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_Init+0x38c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a2e      	ldr	r2, [pc, #184]	@ (8001d54 <HAL_DMA_Init+0x440>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_DMA_Init+0x390>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_DMA_Init+0x392>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8092 	beq.w	8001dd0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a21      	ldr	r2, [pc, #132]	@ (8001d38 <HAL_DMA_Init+0x424>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d021      	beq.n	8001cfa <HAL_DMA_Init+0x3e6>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a20      	ldr	r2, [pc, #128]	@ (8001d3c <HAL_DMA_Init+0x428>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d01c      	beq.n	8001cfa <HAL_DMA_Init+0x3e6>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <HAL_DMA_Init+0x42c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d017      	beq.n	8001cfa <HAL_DMA_Init+0x3e6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1d      	ldr	r2, [pc, #116]	@ (8001d44 <HAL_DMA_Init+0x430>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d012      	beq.n	8001cfa <HAL_DMA_Init+0x3e6>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d48 <HAL_DMA_Init+0x434>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00d      	beq.n	8001cfa <HAL_DMA_Init+0x3e6>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d4c <HAL_DMA_Init+0x438>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d008      	beq.n	8001cfa <HAL_DMA_Init+0x3e6>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a18      	ldr	r2, [pc, #96]	@ (8001d50 <HAL_DMA_Init+0x43c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d003      	beq.n	8001cfa <HAL_DMA_Init+0x3e6>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a17      	ldr	r2, [pc, #92]	@ (8001d54 <HAL_DMA_Init+0x440>)
 8001cf8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <HAL_DMA_Init+0x444>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b40      	cmp	r3, #64	@ 0x40
 8001d20:	d01c      	beq.n	8001d5c <HAL_DMA_Init+0x448>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b80      	cmp	r3, #128	@ 0x80
 8001d28:	d102      	bne.n	8001d30 <HAL_DMA_Init+0x41c>
 8001d2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d2e:	e016      	b.n	8001d5e <HAL_DMA_Init+0x44a>
 8001d30:	2300      	movs	r3, #0
 8001d32:	e014      	b.n	8001d5e <HAL_DMA_Init+0x44a>
 8001d34:	fe10803f 	.word	0xfe10803f
 8001d38:	58025408 	.word	0x58025408
 8001d3c:	5802541c 	.word	0x5802541c
 8001d40:	58025430 	.word	0x58025430
 8001d44:	58025444 	.word	0x58025444
 8001d48:	58025458 	.word	0x58025458
 8001d4c:	5802546c 	.word	0x5802546c
 8001d50:	58025480 	.word	0x58025480
 8001d54:	58025494 	.word	0x58025494
 8001d58:	fffe000f 	.word	0xfffe000f
 8001d5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68d2      	ldr	r2, [r2, #12]
 8001d62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b6e      	ldr	r3, [pc, #440]	@ (8001f5c <HAL_DMA_Init+0x648>)
 8001da4:	4413      	add	r3, r2
 8001da6:	4a6e      	ldr	r2, [pc, #440]	@ (8001f60 <HAL_DMA_Init+0x64c>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	009a      	lsls	r2, r3, #2
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f002 f9a9 	bl	800410c <DMA_CalcBaseAndBitshift>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	e008      	b.n	8001de2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2240      	movs	r2, #64	@ 0x40
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0b7      	b.n	8001f52 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5f      	ldr	r2, [pc, #380]	@ (8001f64 <HAL_DMA_Init+0x650>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d072      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f68 <HAL_DMA_Init+0x654>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d06d      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5c      	ldr	r2, [pc, #368]	@ (8001f6c <HAL_DMA_Init+0x658>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d068      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a5a      	ldr	r2, [pc, #360]	@ (8001f70 <HAL_DMA_Init+0x65c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d063      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a59      	ldr	r2, [pc, #356]	@ (8001f74 <HAL_DMA_Init+0x660>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d05e      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a57      	ldr	r2, [pc, #348]	@ (8001f78 <HAL_DMA_Init+0x664>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d059      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a56      	ldr	r2, [pc, #344]	@ (8001f7c <HAL_DMA_Init+0x668>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d054      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a54      	ldr	r2, [pc, #336]	@ (8001f80 <HAL_DMA_Init+0x66c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d04f      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a53      	ldr	r2, [pc, #332]	@ (8001f84 <HAL_DMA_Init+0x670>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d04a      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a51      	ldr	r2, [pc, #324]	@ (8001f88 <HAL_DMA_Init+0x674>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d045      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a50      	ldr	r2, [pc, #320]	@ (8001f8c <HAL_DMA_Init+0x678>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d040      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a4e      	ldr	r2, [pc, #312]	@ (8001f90 <HAL_DMA_Init+0x67c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d03b      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a4d      	ldr	r2, [pc, #308]	@ (8001f94 <HAL_DMA_Init+0x680>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d036      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a4b      	ldr	r2, [pc, #300]	@ (8001f98 <HAL_DMA_Init+0x684>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d031      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a4a      	ldr	r2, [pc, #296]	@ (8001f9c <HAL_DMA_Init+0x688>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d02c      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a48      	ldr	r2, [pc, #288]	@ (8001fa0 <HAL_DMA_Init+0x68c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d027      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a47      	ldr	r2, [pc, #284]	@ (8001fa4 <HAL_DMA_Init+0x690>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d022      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a45      	ldr	r2, [pc, #276]	@ (8001fa8 <HAL_DMA_Init+0x694>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01d      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a44      	ldr	r2, [pc, #272]	@ (8001fac <HAL_DMA_Init+0x698>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d018      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a42      	ldr	r2, [pc, #264]	@ (8001fb0 <HAL_DMA_Init+0x69c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a41      	ldr	r2, [pc, #260]	@ (8001fb4 <HAL_DMA_Init+0x6a0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00e      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a3f      	ldr	r2, [pc, #252]	@ (8001fb8 <HAL_DMA_Init+0x6a4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a3e      	ldr	r2, [pc, #248]	@ (8001fbc <HAL_DMA_Init+0x6a8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d004      	beq.n	8001ed2 <HAL_DMA_Init+0x5be>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8001fc0 <HAL_DMA_Init+0x6ac>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_DMA_Init+0x5c2>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_DMA_Init+0x5c4>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d032      	beq.n	8001f42 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f002 fa43 	bl	8004368 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b80      	cmp	r3, #128	@ 0x80
 8001ee8:	d102      	bne.n	8001ef0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001f04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d010      	beq.n	8001f30 <HAL_DMA_Init+0x61c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d80c      	bhi.n	8001f30 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f002 fac0 	bl	800449c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	e008      	b.n	8001f42 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	a7fdabf8 	.word	0xa7fdabf8
 8001f60:	cccccccd 	.word	0xcccccccd
 8001f64:	40020010 	.word	0x40020010
 8001f68:	40020028 	.word	0x40020028
 8001f6c:	40020040 	.word	0x40020040
 8001f70:	40020058 	.word	0x40020058
 8001f74:	40020070 	.word	0x40020070
 8001f78:	40020088 	.word	0x40020088
 8001f7c:	400200a0 	.word	0x400200a0
 8001f80:	400200b8 	.word	0x400200b8
 8001f84:	40020410 	.word	0x40020410
 8001f88:	40020428 	.word	0x40020428
 8001f8c:	40020440 	.word	0x40020440
 8001f90:	40020458 	.word	0x40020458
 8001f94:	40020470 	.word	0x40020470
 8001f98:	40020488 	.word	0x40020488
 8001f9c:	400204a0 	.word	0x400204a0
 8001fa0:	400204b8 	.word	0x400204b8
 8001fa4:	58025408 	.word	0x58025408
 8001fa8:	5802541c 	.word	0x5802541c
 8001fac:	58025430 	.word	0x58025430
 8001fb0:	58025444 	.word	0x58025444
 8001fb4:	58025458 	.word	0x58025458
 8001fb8:	5802546c 	.word	0x5802546c
 8001fbc:	58025480 	.word	0x58025480
 8001fc0:	58025494 	.word	0x58025494

08001fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e226      	b.n	800242e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_DMA_Start_IT+0x2a>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e21f      	b.n	800242e <HAL_DMA_Start_IT+0x46a>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	f040 820a 	bne.w	8002418 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a68      	ldr	r2, [pc, #416]	@ (80021b8 <HAL_DMA_Start_IT+0x1f4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d04a      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a66      	ldr	r2, [pc, #408]	@ (80021bc <HAL_DMA_Start_IT+0x1f8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d045      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a65      	ldr	r2, [pc, #404]	@ (80021c0 <HAL_DMA_Start_IT+0x1fc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d040      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a63      	ldr	r2, [pc, #396]	@ (80021c4 <HAL_DMA_Start_IT+0x200>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d03b      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a62      	ldr	r2, [pc, #392]	@ (80021c8 <HAL_DMA_Start_IT+0x204>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d036      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a60      	ldr	r2, [pc, #384]	@ (80021cc <HAL_DMA_Start_IT+0x208>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d031      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a5f      	ldr	r2, [pc, #380]	@ (80021d0 <HAL_DMA_Start_IT+0x20c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d02c      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a5d      	ldr	r2, [pc, #372]	@ (80021d4 <HAL_DMA_Start_IT+0x210>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d027      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a5c      	ldr	r2, [pc, #368]	@ (80021d8 <HAL_DMA_Start_IT+0x214>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d022      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a5a      	ldr	r2, [pc, #360]	@ (80021dc <HAL_DMA_Start_IT+0x218>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01d      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a59      	ldr	r2, [pc, #356]	@ (80021e0 <HAL_DMA_Start_IT+0x21c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d018      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a57      	ldr	r2, [pc, #348]	@ (80021e4 <HAL_DMA_Start_IT+0x220>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a56      	ldr	r2, [pc, #344]	@ (80021e8 <HAL_DMA_Start_IT+0x224>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00e      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a54      	ldr	r2, [pc, #336]	@ (80021ec <HAL_DMA_Start_IT+0x228>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d009      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a53      	ldr	r2, [pc, #332]	@ (80021f0 <HAL_DMA_Start_IT+0x22c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d004      	beq.n	80020b2 <HAL_DMA_Start_IT+0xee>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a51      	ldr	r2, [pc, #324]	@ (80021f4 <HAL_DMA_Start_IT+0x230>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d108      	bne.n	80020c4 <HAL_DMA_Start_IT+0x100>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e007      	b.n	80020d4 <HAL_DMA_Start_IT+0x110>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f001 fe6a 	bl	8003db4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a34      	ldr	r2, [pc, #208]	@ (80021b8 <HAL_DMA_Start_IT+0x1f4>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d04a      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a33      	ldr	r2, [pc, #204]	@ (80021bc <HAL_DMA_Start_IT+0x1f8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d045      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a31      	ldr	r2, [pc, #196]	@ (80021c0 <HAL_DMA_Start_IT+0x1fc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d040      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a30      	ldr	r2, [pc, #192]	@ (80021c4 <HAL_DMA_Start_IT+0x200>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d03b      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a2e      	ldr	r2, [pc, #184]	@ (80021c8 <HAL_DMA_Start_IT+0x204>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d036      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2d      	ldr	r2, [pc, #180]	@ (80021cc <HAL_DMA_Start_IT+0x208>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d031      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a2b      	ldr	r2, [pc, #172]	@ (80021d0 <HAL_DMA_Start_IT+0x20c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d02c      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2a      	ldr	r2, [pc, #168]	@ (80021d4 <HAL_DMA_Start_IT+0x210>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d027      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a28      	ldr	r2, [pc, #160]	@ (80021d8 <HAL_DMA_Start_IT+0x214>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d022      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a27      	ldr	r2, [pc, #156]	@ (80021dc <HAL_DMA_Start_IT+0x218>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d01d      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a25      	ldr	r2, [pc, #148]	@ (80021e0 <HAL_DMA_Start_IT+0x21c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d018      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a24      	ldr	r2, [pc, #144]	@ (80021e4 <HAL_DMA_Start_IT+0x220>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d013      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a22      	ldr	r2, [pc, #136]	@ (80021e8 <HAL_DMA_Start_IT+0x224>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00e      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a21      	ldr	r2, [pc, #132]	@ (80021ec <HAL_DMA_Start_IT+0x228>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1f      	ldr	r2, [pc, #124]	@ (80021f0 <HAL_DMA_Start_IT+0x22c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_DMA_Start_IT+0x1bc>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1e      	ldr	r2, [pc, #120]	@ (80021f4 <HAL_DMA_Start_IT+0x230>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_DMA_Start_IT+0x1c0>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_DMA_Start_IT+0x1c2>
 8002184:	2300      	movs	r3, #0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d036      	beq.n	80021f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 021e 	bic.w	r2, r3, #30
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0216 	orr.w	r2, r2, #22
 800219c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d03e      	beq.n	8002224 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0208 	orr.w	r2, r2, #8
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e035      	b.n	8002224 <HAL_DMA_Start_IT+0x260>
 80021b8:	40020010 	.word	0x40020010
 80021bc:	40020028 	.word	0x40020028
 80021c0:	40020040 	.word	0x40020040
 80021c4:	40020058 	.word	0x40020058
 80021c8:	40020070 	.word	0x40020070
 80021cc:	40020088 	.word	0x40020088
 80021d0:	400200a0 	.word	0x400200a0
 80021d4:	400200b8 	.word	0x400200b8
 80021d8:	40020410 	.word	0x40020410
 80021dc:	40020428 	.word	0x40020428
 80021e0:	40020440 	.word	0x40020440
 80021e4:	40020458 	.word	0x40020458
 80021e8:	40020470 	.word	0x40020470
 80021ec:	40020488 	.word	0x40020488
 80021f0:	400204a0 	.word	0x400204a0
 80021f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 020e 	bic.w	r2, r3, #14
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 020a 	orr.w	r2, r2, #10
 800220a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d007      	beq.n	8002224 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0204 	orr.w	r2, r2, #4
 8002222:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a83      	ldr	r2, [pc, #524]	@ (8002438 <HAL_DMA_Start_IT+0x474>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d072      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a82      	ldr	r2, [pc, #520]	@ (800243c <HAL_DMA_Start_IT+0x478>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d06d      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a80      	ldr	r2, [pc, #512]	@ (8002440 <HAL_DMA_Start_IT+0x47c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d068      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7f      	ldr	r2, [pc, #508]	@ (8002444 <HAL_DMA_Start_IT+0x480>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d063      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a7d      	ldr	r2, [pc, #500]	@ (8002448 <HAL_DMA_Start_IT+0x484>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d05e      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7c      	ldr	r2, [pc, #496]	@ (800244c <HAL_DMA_Start_IT+0x488>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d059      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a7a      	ldr	r2, [pc, #488]	@ (8002450 <HAL_DMA_Start_IT+0x48c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d054      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a79      	ldr	r2, [pc, #484]	@ (8002454 <HAL_DMA_Start_IT+0x490>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d04f      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a77      	ldr	r2, [pc, #476]	@ (8002458 <HAL_DMA_Start_IT+0x494>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d04a      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a76      	ldr	r2, [pc, #472]	@ (800245c <HAL_DMA_Start_IT+0x498>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d045      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a74      	ldr	r2, [pc, #464]	@ (8002460 <HAL_DMA_Start_IT+0x49c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d040      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a73      	ldr	r2, [pc, #460]	@ (8002464 <HAL_DMA_Start_IT+0x4a0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d03b      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a71      	ldr	r2, [pc, #452]	@ (8002468 <HAL_DMA_Start_IT+0x4a4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d036      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a70      	ldr	r2, [pc, #448]	@ (800246c <HAL_DMA_Start_IT+0x4a8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d031      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002470 <HAL_DMA_Start_IT+0x4ac>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d02c      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6d      	ldr	r2, [pc, #436]	@ (8002474 <HAL_DMA_Start_IT+0x4b0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d027      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a6b      	ldr	r2, [pc, #428]	@ (8002478 <HAL_DMA_Start_IT+0x4b4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d022      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6a      	ldr	r2, [pc, #424]	@ (800247c <HAL_DMA_Start_IT+0x4b8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d01d      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a68      	ldr	r2, [pc, #416]	@ (8002480 <HAL_DMA_Start_IT+0x4bc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d018      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a67      	ldr	r2, [pc, #412]	@ (8002484 <HAL_DMA_Start_IT+0x4c0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a65      	ldr	r2, [pc, #404]	@ (8002488 <HAL_DMA_Start_IT+0x4c4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00e      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a64      	ldr	r2, [pc, #400]	@ (800248c <HAL_DMA_Start_IT+0x4c8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a62      	ldr	r2, [pc, #392]	@ (8002490 <HAL_DMA_Start_IT+0x4cc>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d004      	beq.n	8002314 <HAL_DMA_Start_IT+0x350>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a61      	ldr	r2, [pc, #388]	@ (8002494 <HAL_DMA_Start_IT+0x4d0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <HAL_DMA_Start_IT+0x354>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_DMA_Start_IT+0x356>
 8002318:	2300      	movs	r3, #0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d01a      	beq.n	8002354 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002336:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800233a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800234e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002352:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a37      	ldr	r2, [pc, #220]	@ (8002438 <HAL_DMA_Start_IT+0x474>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d04a      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a36      	ldr	r2, [pc, #216]	@ (800243c <HAL_DMA_Start_IT+0x478>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d045      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a34      	ldr	r2, [pc, #208]	@ (8002440 <HAL_DMA_Start_IT+0x47c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d040      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a33      	ldr	r2, [pc, #204]	@ (8002444 <HAL_DMA_Start_IT+0x480>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d03b      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a31      	ldr	r2, [pc, #196]	@ (8002448 <HAL_DMA_Start_IT+0x484>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d036      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a30      	ldr	r2, [pc, #192]	@ (800244c <HAL_DMA_Start_IT+0x488>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d031      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2e      	ldr	r2, [pc, #184]	@ (8002450 <HAL_DMA_Start_IT+0x48c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d02c      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a2d      	ldr	r2, [pc, #180]	@ (8002454 <HAL_DMA_Start_IT+0x490>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d027      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002458 <HAL_DMA_Start_IT+0x494>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d022      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2a      	ldr	r2, [pc, #168]	@ (800245c <HAL_DMA_Start_IT+0x498>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d01d      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a28      	ldr	r2, [pc, #160]	@ (8002460 <HAL_DMA_Start_IT+0x49c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d018      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a27      	ldr	r2, [pc, #156]	@ (8002464 <HAL_DMA_Start_IT+0x4a0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d013      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a25      	ldr	r2, [pc, #148]	@ (8002468 <HAL_DMA_Start_IT+0x4a4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00e      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a24      	ldr	r2, [pc, #144]	@ (800246c <HAL_DMA_Start_IT+0x4a8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d009      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a22      	ldr	r2, [pc, #136]	@ (8002470 <HAL_DMA_Start_IT+0x4ac>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_Start_IT+0x430>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a21      	ldr	r2, [pc, #132]	@ (8002474 <HAL_DMA_Start_IT+0x4b0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d108      	bne.n	8002406 <HAL_DMA_Start_IT+0x442>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e012      	b.n	800242c <HAL_DMA_Start_IT+0x468>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e009      	b.n	800242c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800242c:	7dfb      	ldrb	r3, [r7, #23]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40020010 	.word	0x40020010
 800243c:	40020028 	.word	0x40020028
 8002440:	40020040 	.word	0x40020040
 8002444:	40020058 	.word	0x40020058
 8002448:	40020070 	.word	0x40020070
 800244c:	40020088 	.word	0x40020088
 8002450:	400200a0 	.word	0x400200a0
 8002454:	400200b8 	.word	0x400200b8
 8002458:	40020410 	.word	0x40020410
 800245c:	40020428 	.word	0x40020428
 8002460:	40020440 	.word	0x40020440
 8002464:	40020458 	.word	0x40020458
 8002468:	40020470 	.word	0x40020470
 800246c:	40020488 	.word	0x40020488
 8002470:	400204a0 	.word	0x400204a0
 8002474:	400204b8 	.word	0x400204b8
 8002478:	58025408 	.word	0x58025408
 800247c:	5802541c 	.word	0x5802541c
 8002480:	58025430 	.word	0x58025430
 8002484:	58025444 	.word	0x58025444
 8002488:	58025458 	.word	0x58025458
 800248c:	5802546c 	.word	0x5802546c
 8002490:	58025480 	.word	0x58025480
 8002494:	58025494 	.word	0x58025494

08002498 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff f928 	bl	80016f4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e2dc      	b.n	8002a6a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d008      	beq.n	80024ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2280      	movs	r2, #128	@ 0x80
 80024c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e2cd      	b.n	8002a6a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a76      	ldr	r2, [pc, #472]	@ (80026ac <HAL_DMA_Abort+0x214>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d04a      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a74      	ldr	r2, [pc, #464]	@ (80026b0 <HAL_DMA_Abort+0x218>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d045      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a73      	ldr	r2, [pc, #460]	@ (80026b4 <HAL_DMA_Abort+0x21c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d040      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a71      	ldr	r2, [pc, #452]	@ (80026b8 <HAL_DMA_Abort+0x220>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d03b      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a70      	ldr	r2, [pc, #448]	@ (80026bc <HAL_DMA_Abort+0x224>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d036      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a6e      	ldr	r2, [pc, #440]	@ (80026c0 <HAL_DMA_Abort+0x228>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d031      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a6d      	ldr	r2, [pc, #436]	@ (80026c4 <HAL_DMA_Abort+0x22c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d02c      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a6b      	ldr	r2, [pc, #428]	@ (80026c8 <HAL_DMA_Abort+0x230>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d027      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6a      	ldr	r2, [pc, #424]	@ (80026cc <HAL_DMA_Abort+0x234>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d022      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a68      	ldr	r2, [pc, #416]	@ (80026d0 <HAL_DMA_Abort+0x238>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01d      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a67      	ldr	r2, [pc, #412]	@ (80026d4 <HAL_DMA_Abort+0x23c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d018      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a65      	ldr	r2, [pc, #404]	@ (80026d8 <HAL_DMA_Abort+0x240>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a64      	ldr	r2, [pc, #400]	@ (80026dc <HAL_DMA_Abort+0x244>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00e      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a62      	ldr	r2, [pc, #392]	@ (80026e0 <HAL_DMA_Abort+0x248>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a61      	ldr	r2, [pc, #388]	@ (80026e4 <HAL_DMA_Abort+0x24c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d004      	beq.n	800256e <HAL_DMA_Abort+0xd6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a5f      	ldr	r2, [pc, #380]	@ (80026e8 <HAL_DMA_Abort+0x250>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_DMA_Abort+0xda>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_DMA_Abort+0xdc>
 8002572:	2300      	movs	r3, #0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d013      	beq.n	80025a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 021e 	bic.w	r2, r2, #30
 8002586:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002596:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e00a      	b.n	80025b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 020e 	bic.w	r2, r2, #14
 80025ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a3c      	ldr	r2, [pc, #240]	@ (80026ac <HAL_DMA_Abort+0x214>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d072      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a3a      	ldr	r2, [pc, #232]	@ (80026b0 <HAL_DMA_Abort+0x218>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d06d      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a39      	ldr	r2, [pc, #228]	@ (80026b4 <HAL_DMA_Abort+0x21c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d068      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a37      	ldr	r2, [pc, #220]	@ (80026b8 <HAL_DMA_Abort+0x220>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d063      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a36      	ldr	r2, [pc, #216]	@ (80026bc <HAL_DMA_Abort+0x224>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d05e      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a34      	ldr	r2, [pc, #208]	@ (80026c0 <HAL_DMA_Abort+0x228>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d059      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a33      	ldr	r2, [pc, #204]	@ (80026c4 <HAL_DMA_Abort+0x22c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d054      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a31      	ldr	r2, [pc, #196]	@ (80026c8 <HAL_DMA_Abort+0x230>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d04f      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a30      	ldr	r2, [pc, #192]	@ (80026cc <HAL_DMA_Abort+0x234>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d04a      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2e      	ldr	r2, [pc, #184]	@ (80026d0 <HAL_DMA_Abort+0x238>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d045      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a2d      	ldr	r2, [pc, #180]	@ (80026d4 <HAL_DMA_Abort+0x23c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d040      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2b      	ldr	r2, [pc, #172]	@ (80026d8 <HAL_DMA_Abort+0x240>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d03b      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2a      	ldr	r2, [pc, #168]	@ (80026dc <HAL_DMA_Abort+0x244>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d036      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a28      	ldr	r2, [pc, #160]	@ (80026e0 <HAL_DMA_Abort+0x248>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d031      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a27      	ldr	r2, [pc, #156]	@ (80026e4 <HAL_DMA_Abort+0x24c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d02c      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a25      	ldr	r2, [pc, #148]	@ (80026e8 <HAL_DMA_Abort+0x250>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d027      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a24      	ldr	r2, [pc, #144]	@ (80026ec <HAL_DMA_Abort+0x254>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d022      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a22      	ldr	r2, [pc, #136]	@ (80026f0 <HAL_DMA_Abort+0x258>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01d      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a21      	ldr	r2, [pc, #132]	@ (80026f4 <HAL_DMA_Abort+0x25c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d018      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1f      	ldr	r2, [pc, #124]	@ (80026f8 <HAL_DMA_Abort+0x260>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1e      	ldr	r2, [pc, #120]	@ (80026fc <HAL_DMA_Abort+0x264>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00e      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1c      	ldr	r2, [pc, #112]	@ (8002700 <HAL_DMA_Abort+0x268>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d009      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a1b      	ldr	r2, [pc, #108]	@ (8002704 <HAL_DMA_Abort+0x26c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d004      	beq.n	80026a6 <HAL_DMA_Abort+0x20e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a19      	ldr	r2, [pc, #100]	@ (8002708 <HAL_DMA_Abort+0x270>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d132      	bne.n	800270c <HAL_DMA_Abort+0x274>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e031      	b.n	800270e <HAL_DMA_Abort+0x276>
 80026aa:	bf00      	nop
 80026ac:	40020010 	.word	0x40020010
 80026b0:	40020028 	.word	0x40020028
 80026b4:	40020040 	.word	0x40020040
 80026b8:	40020058 	.word	0x40020058
 80026bc:	40020070 	.word	0x40020070
 80026c0:	40020088 	.word	0x40020088
 80026c4:	400200a0 	.word	0x400200a0
 80026c8:	400200b8 	.word	0x400200b8
 80026cc:	40020410 	.word	0x40020410
 80026d0:	40020428 	.word	0x40020428
 80026d4:	40020440 	.word	0x40020440
 80026d8:	40020458 	.word	0x40020458
 80026dc:	40020470 	.word	0x40020470
 80026e0:	40020488 	.word	0x40020488
 80026e4:	400204a0 	.word	0x400204a0
 80026e8:	400204b8 	.word	0x400204b8
 80026ec:	58025408 	.word	0x58025408
 80026f0:	5802541c 	.word	0x5802541c
 80026f4:	58025430 	.word	0x58025430
 80026f8:	58025444 	.word	0x58025444
 80026fc:	58025458 	.word	0x58025458
 8002700:	5802546c 	.word	0x5802546c
 8002704:	58025480 	.word	0x58025480
 8002708:	58025494 	.word	0x58025494
 800270c:	2300      	movs	r3, #0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002720:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a6d      	ldr	r2, [pc, #436]	@ (80028dc <HAL_DMA_Abort+0x444>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d04a      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a6b      	ldr	r2, [pc, #428]	@ (80028e0 <HAL_DMA_Abort+0x448>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d045      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6a      	ldr	r2, [pc, #424]	@ (80028e4 <HAL_DMA_Abort+0x44c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d040      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a68      	ldr	r2, [pc, #416]	@ (80028e8 <HAL_DMA_Abort+0x450>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d03b      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a67      	ldr	r2, [pc, #412]	@ (80028ec <HAL_DMA_Abort+0x454>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d036      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a65      	ldr	r2, [pc, #404]	@ (80028f0 <HAL_DMA_Abort+0x458>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d031      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a64      	ldr	r2, [pc, #400]	@ (80028f4 <HAL_DMA_Abort+0x45c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d02c      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a62      	ldr	r2, [pc, #392]	@ (80028f8 <HAL_DMA_Abort+0x460>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d027      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a61      	ldr	r2, [pc, #388]	@ (80028fc <HAL_DMA_Abort+0x464>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5f      	ldr	r2, [pc, #380]	@ (8002900 <HAL_DMA_Abort+0x468>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01d      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5e      	ldr	r2, [pc, #376]	@ (8002904 <HAL_DMA_Abort+0x46c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d018      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5c      	ldr	r2, [pc, #368]	@ (8002908 <HAL_DMA_Abort+0x470>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a5b      	ldr	r2, [pc, #364]	@ (800290c <HAL_DMA_Abort+0x474>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00e      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a59      	ldr	r2, [pc, #356]	@ (8002910 <HAL_DMA_Abort+0x478>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d009      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a58      	ldr	r2, [pc, #352]	@ (8002914 <HAL_DMA_Abort+0x47c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_DMA_Abort+0x32a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a56      	ldr	r2, [pc, #344]	@ (8002918 <HAL_DMA_Abort+0x480>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d108      	bne.n	80027d4 <HAL_DMA_Abort+0x33c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e007      	b.n	80027e4 <HAL_DMA_Abort+0x34c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027e4:	e013      	b.n	800280e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027e6:	f7fe ff85 	bl	80016f4 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b05      	cmp	r3, #5
 80027f2:	d90c      	bls.n	800280e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2203      	movs	r2, #3
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e12d      	b.n	8002a6a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e5      	bne.n	80027e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a2f      	ldr	r2, [pc, #188]	@ (80028dc <HAL_DMA_Abort+0x444>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d04a      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a2d      	ldr	r2, [pc, #180]	@ (80028e0 <HAL_DMA_Abort+0x448>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d045      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2c      	ldr	r2, [pc, #176]	@ (80028e4 <HAL_DMA_Abort+0x44c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d040      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2a      	ldr	r2, [pc, #168]	@ (80028e8 <HAL_DMA_Abort+0x450>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d03b      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a29      	ldr	r2, [pc, #164]	@ (80028ec <HAL_DMA_Abort+0x454>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d036      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a27      	ldr	r2, [pc, #156]	@ (80028f0 <HAL_DMA_Abort+0x458>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d031      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a26      	ldr	r2, [pc, #152]	@ (80028f4 <HAL_DMA_Abort+0x45c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d02c      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a24      	ldr	r2, [pc, #144]	@ (80028f8 <HAL_DMA_Abort+0x460>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d027      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a23      	ldr	r2, [pc, #140]	@ (80028fc <HAL_DMA_Abort+0x464>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d022      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a21      	ldr	r2, [pc, #132]	@ (8002900 <HAL_DMA_Abort+0x468>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01d      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a20      	ldr	r2, [pc, #128]	@ (8002904 <HAL_DMA_Abort+0x46c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d018      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1e      	ldr	r2, [pc, #120]	@ (8002908 <HAL_DMA_Abort+0x470>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1d      	ldr	r2, [pc, #116]	@ (800290c <HAL_DMA_Abort+0x474>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00e      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002910 <HAL_DMA_Abort+0x478>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d009      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002914 <HAL_DMA_Abort+0x47c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_DMA_Abort+0x422>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a18      	ldr	r2, [pc, #96]	@ (8002918 <HAL_DMA_Abort+0x480>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_DMA_Abort+0x426>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_DMA_Abort+0x428>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d02b      	beq.n	800291c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	223f      	movs	r2, #63	@ 0x3f
 80028d4:	409a      	lsls	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	e02a      	b.n	8002932 <HAL_DMA_Abort+0x49a>
 80028dc:	40020010 	.word	0x40020010
 80028e0:	40020028 	.word	0x40020028
 80028e4:	40020040 	.word	0x40020040
 80028e8:	40020058 	.word	0x40020058
 80028ec:	40020070 	.word	0x40020070
 80028f0:	40020088 	.word	0x40020088
 80028f4:	400200a0 	.word	0x400200a0
 80028f8:	400200b8 	.word	0x400200b8
 80028fc:	40020410 	.word	0x40020410
 8002900:	40020428 	.word	0x40020428
 8002904:	40020440 	.word	0x40020440
 8002908:	40020458 	.word	0x40020458
 800290c:	40020470 	.word	0x40020470
 8002910:	40020488 	.word	0x40020488
 8002914:	400204a0 	.word	0x400204a0
 8002918:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002920:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	2201      	movs	r2, #1
 800292c:	409a      	lsls	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a4f      	ldr	r2, [pc, #316]	@ (8002a74 <HAL_DMA_Abort+0x5dc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d072      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a4d      	ldr	r2, [pc, #308]	@ (8002a78 <HAL_DMA_Abort+0x5e0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d06d      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a4c      	ldr	r2, [pc, #304]	@ (8002a7c <HAL_DMA_Abort+0x5e4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d068      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a4a      	ldr	r2, [pc, #296]	@ (8002a80 <HAL_DMA_Abort+0x5e8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d063      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a49      	ldr	r2, [pc, #292]	@ (8002a84 <HAL_DMA_Abort+0x5ec>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d05e      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a47      	ldr	r2, [pc, #284]	@ (8002a88 <HAL_DMA_Abort+0x5f0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d059      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a46      	ldr	r2, [pc, #280]	@ (8002a8c <HAL_DMA_Abort+0x5f4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d054      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a44      	ldr	r2, [pc, #272]	@ (8002a90 <HAL_DMA_Abort+0x5f8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d04f      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a43      	ldr	r2, [pc, #268]	@ (8002a94 <HAL_DMA_Abort+0x5fc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d04a      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a41      	ldr	r2, [pc, #260]	@ (8002a98 <HAL_DMA_Abort+0x600>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d045      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a40      	ldr	r2, [pc, #256]	@ (8002a9c <HAL_DMA_Abort+0x604>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d040      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a3e      	ldr	r2, [pc, #248]	@ (8002aa0 <HAL_DMA_Abort+0x608>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d03b      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a3d      	ldr	r2, [pc, #244]	@ (8002aa4 <HAL_DMA_Abort+0x60c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d036      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa8 <HAL_DMA_Abort+0x610>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d031      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a3a      	ldr	r2, [pc, #232]	@ (8002aac <HAL_DMA_Abort+0x614>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d02c      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a38      	ldr	r2, [pc, #224]	@ (8002ab0 <HAL_DMA_Abort+0x618>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d027      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a37      	ldr	r2, [pc, #220]	@ (8002ab4 <HAL_DMA_Abort+0x61c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d022      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a35      	ldr	r2, [pc, #212]	@ (8002ab8 <HAL_DMA_Abort+0x620>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01d      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a34      	ldr	r2, [pc, #208]	@ (8002abc <HAL_DMA_Abort+0x624>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d018      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a32      	ldr	r2, [pc, #200]	@ (8002ac0 <HAL_DMA_Abort+0x628>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a31      	ldr	r2, [pc, #196]	@ (8002ac4 <HAL_DMA_Abort+0x62c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a2f      	ldr	r2, [pc, #188]	@ (8002ac8 <HAL_DMA_Abort+0x630>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a2e      	ldr	r2, [pc, #184]	@ (8002acc <HAL_DMA_Abort+0x634>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d004      	beq.n	8002a22 <HAL_DMA_Abort+0x58a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ad0 <HAL_DMA_Abort+0x638>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_DMA_Abort+0x58e>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_DMA_Abort+0x590>
 8002a26:	2300      	movs	r3, #0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d015      	beq.n	8002a58 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a34:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00c      	beq.n	8002a58 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a56:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40020010 	.word	0x40020010
 8002a78:	40020028 	.word	0x40020028
 8002a7c:	40020040 	.word	0x40020040
 8002a80:	40020058 	.word	0x40020058
 8002a84:	40020070 	.word	0x40020070
 8002a88:	40020088 	.word	0x40020088
 8002a8c:	400200a0 	.word	0x400200a0
 8002a90:	400200b8 	.word	0x400200b8
 8002a94:	40020410 	.word	0x40020410
 8002a98:	40020428 	.word	0x40020428
 8002a9c:	40020440 	.word	0x40020440
 8002aa0:	40020458 	.word	0x40020458
 8002aa4:	40020470 	.word	0x40020470
 8002aa8:	40020488 	.word	0x40020488
 8002aac:	400204a0 	.word	0x400204a0
 8002ab0:	400204b8 	.word	0x400204b8
 8002ab4:	58025408 	.word	0x58025408
 8002ab8:	5802541c 	.word	0x5802541c
 8002abc:	58025430 	.word	0x58025430
 8002ac0:	58025444 	.word	0x58025444
 8002ac4:	58025458 	.word	0x58025458
 8002ac8:	5802546c 	.word	0x5802546c
 8002acc:	58025480 	.word	0x58025480
 8002ad0:	58025494 	.word	0x58025494

08002ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e237      	b.n	8002f56 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d004      	beq.n	8002afc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2280      	movs	r2, #128	@ 0x80
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e22c      	b.n	8002f56 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a5c      	ldr	r2, [pc, #368]	@ (8002c74 <HAL_DMA_Abort_IT+0x1a0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d04a      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c78 <HAL_DMA_Abort_IT+0x1a4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d045      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a59      	ldr	r2, [pc, #356]	@ (8002c7c <HAL_DMA_Abort_IT+0x1a8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d040      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a58      	ldr	r2, [pc, #352]	@ (8002c80 <HAL_DMA_Abort_IT+0x1ac>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d03b      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a56      	ldr	r2, [pc, #344]	@ (8002c84 <HAL_DMA_Abort_IT+0x1b0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d036      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a55      	ldr	r2, [pc, #340]	@ (8002c88 <HAL_DMA_Abort_IT+0x1b4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d031      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a53      	ldr	r2, [pc, #332]	@ (8002c8c <HAL_DMA_Abort_IT+0x1b8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02c      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a52      	ldr	r2, [pc, #328]	@ (8002c90 <HAL_DMA_Abort_IT+0x1bc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d027      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a50      	ldr	r2, [pc, #320]	@ (8002c94 <HAL_DMA_Abort_IT+0x1c0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d022      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a4f      	ldr	r2, [pc, #316]	@ (8002c98 <HAL_DMA_Abort_IT+0x1c4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d01d      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a4d      	ldr	r2, [pc, #308]	@ (8002c9c <HAL_DMA_Abort_IT+0x1c8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d018      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a4c      	ldr	r2, [pc, #304]	@ (8002ca0 <HAL_DMA_Abort_IT+0x1cc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d013      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca4 <HAL_DMA_Abort_IT+0x1d0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00e      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a49      	ldr	r2, [pc, #292]	@ (8002ca8 <HAL_DMA_Abort_IT+0x1d4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a47      	ldr	r2, [pc, #284]	@ (8002cac <HAL_DMA_Abort_IT+0x1d8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_DMA_Abort_IT+0xc8>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a46      	ldr	r2, [pc, #280]	@ (8002cb0 <HAL_DMA_Abort_IT+0x1dc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_DMA_Abort_IT+0xcc>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_DMA_Abort_IT+0xce>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8086 	beq.w	8002cb4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2204      	movs	r2, #4
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8002c74 <HAL_DMA_Abort_IT+0x1a0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d04a      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2e      	ldr	r2, [pc, #184]	@ (8002c78 <HAL_DMA_Abort_IT+0x1a4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d045      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c7c <HAL_DMA_Abort_IT+0x1a8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d040      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8002c80 <HAL_DMA_Abort_IT+0x1ac>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d03b      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a29      	ldr	r2, [pc, #164]	@ (8002c84 <HAL_DMA_Abort_IT+0x1b0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d036      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a28      	ldr	r2, [pc, #160]	@ (8002c88 <HAL_DMA_Abort_IT+0x1b4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d031      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a26      	ldr	r2, [pc, #152]	@ (8002c8c <HAL_DMA_Abort_IT+0x1b8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d02c      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a25      	ldr	r2, [pc, #148]	@ (8002c90 <HAL_DMA_Abort_IT+0x1bc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d027      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a23      	ldr	r2, [pc, #140]	@ (8002c94 <HAL_DMA_Abort_IT+0x1c0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d022      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a22      	ldr	r2, [pc, #136]	@ (8002c98 <HAL_DMA_Abort_IT+0x1c4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d01d      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a20      	ldr	r2, [pc, #128]	@ (8002c9c <HAL_DMA_Abort_IT+0x1c8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d018      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca0 <HAL_DMA_Abort_IT+0x1cc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca4 <HAL_DMA_Abort_IT+0x1d0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00e      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca8 <HAL_DMA_Abort_IT+0x1d4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1a      	ldr	r2, [pc, #104]	@ (8002cac <HAL_DMA_Abort_IT+0x1d8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_DMA_Abort_IT+0x17c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <HAL_DMA_Abort_IT+0x1dc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d108      	bne.n	8002c62 <HAL_DMA_Abort_IT+0x18e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e178      	b.n	8002f54 <HAL_DMA_Abort_IT+0x480>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e16f      	b.n	8002f54 <HAL_DMA_Abort_IT+0x480>
 8002c74:	40020010 	.word	0x40020010
 8002c78:	40020028 	.word	0x40020028
 8002c7c:	40020040 	.word	0x40020040
 8002c80:	40020058 	.word	0x40020058
 8002c84:	40020070 	.word	0x40020070
 8002c88:	40020088 	.word	0x40020088
 8002c8c:	400200a0 	.word	0x400200a0
 8002c90:	400200b8 	.word	0x400200b8
 8002c94:	40020410 	.word	0x40020410
 8002c98:	40020428 	.word	0x40020428
 8002c9c:	40020440 	.word	0x40020440
 8002ca0:	40020458 	.word	0x40020458
 8002ca4:	40020470 	.word	0x40020470
 8002ca8:	40020488 	.word	0x40020488
 8002cac:	400204a0 	.word	0x400204a0
 8002cb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 020e 	bic.w	r2, r2, #14
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6c      	ldr	r2, [pc, #432]	@ (8002e7c <HAL_DMA_Abort_IT+0x3a8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d04a      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6b      	ldr	r2, [pc, #428]	@ (8002e80 <HAL_DMA_Abort_IT+0x3ac>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d045      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a69      	ldr	r2, [pc, #420]	@ (8002e84 <HAL_DMA_Abort_IT+0x3b0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d040      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a68      	ldr	r2, [pc, #416]	@ (8002e88 <HAL_DMA_Abort_IT+0x3b4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d03b      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a66      	ldr	r2, [pc, #408]	@ (8002e8c <HAL_DMA_Abort_IT+0x3b8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d036      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a65      	ldr	r2, [pc, #404]	@ (8002e90 <HAL_DMA_Abort_IT+0x3bc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d031      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a63      	ldr	r2, [pc, #396]	@ (8002e94 <HAL_DMA_Abort_IT+0x3c0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d02c      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a62      	ldr	r2, [pc, #392]	@ (8002e98 <HAL_DMA_Abort_IT+0x3c4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d027      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a60      	ldr	r2, [pc, #384]	@ (8002e9c <HAL_DMA_Abort_IT+0x3c8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d022      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea0 <HAL_DMA_Abort_IT+0x3cc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d01d      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea4 <HAL_DMA_Abort_IT+0x3d0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d018      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5c      	ldr	r2, [pc, #368]	@ (8002ea8 <HAL_DMA_Abort_IT+0x3d4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a5a      	ldr	r2, [pc, #360]	@ (8002eac <HAL_DMA_Abort_IT+0x3d8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00e      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a59      	ldr	r2, [pc, #356]	@ (8002eb0 <HAL_DMA_Abort_IT+0x3dc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a57      	ldr	r2, [pc, #348]	@ (8002eb4 <HAL_DMA_Abort_IT+0x3e0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x290>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a56      	ldr	r2, [pc, #344]	@ (8002eb8 <HAL_DMA_Abort_IT+0x3e4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d108      	bne.n	8002d76 <HAL_DMA_Abort_IT+0x2a2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e007      	b.n	8002d86 <HAL_DMA_Abort_IT+0x2b2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e7c <HAL_DMA_Abort_IT+0x3a8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d072      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a3a      	ldr	r2, [pc, #232]	@ (8002e80 <HAL_DMA_Abort_IT+0x3ac>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d06d      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a39      	ldr	r2, [pc, #228]	@ (8002e84 <HAL_DMA_Abort_IT+0x3b0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d068      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a37      	ldr	r2, [pc, #220]	@ (8002e88 <HAL_DMA_Abort_IT+0x3b4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d063      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a36      	ldr	r2, [pc, #216]	@ (8002e8c <HAL_DMA_Abort_IT+0x3b8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d05e      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a34      	ldr	r2, [pc, #208]	@ (8002e90 <HAL_DMA_Abort_IT+0x3bc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d059      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a33      	ldr	r2, [pc, #204]	@ (8002e94 <HAL_DMA_Abort_IT+0x3c0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d054      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a31      	ldr	r2, [pc, #196]	@ (8002e98 <HAL_DMA_Abort_IT+0x3c4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d04f      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a30      	ldr	r2, [pc, #192]	@ (8002e9c <HAL_DMA_Abort_IT+0x3c8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d04a      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea0 <HAL_DMA_Abort_IT+0x3cc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d045      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea4 <HAL_DMA_Abort_IT+0x3d0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d040      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea8 <HAL_DMA_Abort_IT+0x3d4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d03b      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2a      	ldr	r2, [pc, #168]	@ (8002eac <HAL_DMA_Abort_IT+0x3d8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d036      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a28      	ldr	r2, [pc, #160]	@ (8002eb0 <HAL_DMA_Abort_IT+0x3dc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d031      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a27      	ldr	r2, [pc, #156]	@ (8002eb4 <HAL_DMA_Abort_IT+0x3e0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d02c      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a25      	ldr	r2, [pc, #148]	@ (8002eb8 <HAL_DMA_Abort_IT+0x3e4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d027      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a24      	ldr	r2, [pc, #144]	@ (8002ebc <HAL_DMA_Abort_IT+0x3e8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d022      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a22      	ldr	r2, [pc, #136]	@ (8002ec0 <HAL_DMA_Abort_IT+0x3ec>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01d      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a21      	ldr	r2, [pc, #132]	@ (8002ec4 <HAL_DMA_Abort_IT+0x3f0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d018      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec8 <HAL_DMA_Abort_IT+0x3f4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1e      	ldr	r2, [pc, #120]	@ (8002ecc <HAL_DMA_Abort_IT+0x3f8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00e      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed0 <HAL_DMA_Abort_IT+0x3fc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d009      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed4 <HAL_DMA_Abort_IT+0x400>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x3a2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a19      	ldr	r2, [pc, #100]	@ (8002ed8 <HAL_DMA_Abort_IT+0x404>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d132      	bne.n	8002edc <HAL_DMA_Abort_IT+0x408>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e031      	b.n	8002ede <HAL_DMA_Abort_IT+0x40a>
 8002e7a:	bf00      	nop
 8002e7c:	40020010 	.word	0x40020010
 8002e80:	40020028 	.word	0x40020028
 8002e84:	40020040 	.word	0x40020040
 8002e88:	40020058 	.word	0x40020058
 8002e8c:	40020070 	.word	0x40020070
 8002e90:	40020088 	.word	0x40020088
 8002e94:	400200a0 	.word	0x400200a0
 8002e98:	400200b8 	.word	0x400200b8
 8002e9c:	40020410 	.word	0x40020410
 8002ea0:	40020428 	.word	0x40020428
 8002ea4:	40020440 	.word	0x40020440
 8002ea8:	40020458 	.word	0x40020458
 8002eac:	40020470 	.word	0x40020470
 8002eb0:	40020488 	.word	0x40020488
 8002eb4:	400204a0 	.word	0x400204a0
 8002eb8:	400204b8 	.word	0x400204b8
 8002ebc:	58025408 	.word	0x58025408
 8002ec0:	5802541c 	.word	0x5802541c
 8002ec4:	58025430 	.word	0x58025430
 8002ec8:	58025444 	.word	0x58025444
 8002ecc:	58025458 	.word	0x58025458
 8002ed0:	5802546c 	.word	0x5802546c
 8002ed4:	58025480 	.word	0x58025480
 8002ed8:	58025494 	.word	0x58025494
 8002edc:	2300      	movs	r3, #0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d028      	beq.n	8002f34 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ef0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	2201      	movs	r2, #1
 8002f02:	409a      	lsls	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00c      	beq.n	8002f34 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop

08002f60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	@ 0x28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f6c:	4b67      	ldr	r3, [pc, #412]	@ (800310c <HAL_DMA_IRQHandler+0x1ac>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a67      	ldr	r2, [pc, #412]	@ (8003110 <HAL_DMA_IRQHandler+0x1b0>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0a9b      	lsrs	r3, r3, #10
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a5f      	ldr	r2, [pc, #380]	@ (8003114 <HAL_DMA_IRQHandler+0x1b4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d04a      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5d      	ldr	r2, [pc, #372]	@ (8003118 <HAL_DMA_IRQHandler+0x1b8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d045      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5c      	ldr	r2, [pc, #368]	@ (800311c <HAL_DMA_IRQHandler+0x1bc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d040      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8003120 <HAL_DMA_IRQHandler+0x1c0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d03b      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a59      	ldr	r2, [pc, #356]	@ (8003124 <HAL_DMA_IRQHandler+0x1c4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d036      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a57      	ldr	r2, [pc, #348]	@ (8003128 <HAL_DMA_IRQHandler+0x1c8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d031      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a56      	ldr	r2, [pc, #344]	@ (800312c <HAL_DMA_IRQHandler+0x1cc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d02c      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a54      	ldr	r2, [pc, #336]	@ (8003130 <HAL_DMA_IRQHandler+0x1d0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d027      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a53      	ldr	r2, [pc, #332]	@ (8003134 <HAL_DMA_IRQHandler+0x1d4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d022      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a51      	ldr	r2, [pc, #324]	@ (8003138 <HAL_DMA_IRQHandler+0x1d8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01d      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a50      	ldr	r2, [pc, #320]	@ (800313c <HAL_DMA_IRQHandler+0x1dc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d018      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a4e      	ldr	r2, [pc, #312]	@ (8003140 <HAL_DMA_IRQHandler+0x1e0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a4d      	ldr	r2, [pc, #308]	@ (8003144 <HAL_DMA_IRQHandler+0x1e4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00e      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a4b      	ldr	r2, [pc, #300]	@ (8003148 <HAL_DMA_IRQHandler+0x1e8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d009      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a4a      	ldr	r2, [pc, #296]	@ (800314c <HAL_DMA_IRQHandler+0x1ec>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d004      	beq.n	8003032 <HAL_DMA_IRQHandler+0xd2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a48      	ldr	r2, [pc, #288]	@ (8003150 <HAL_DMA_IRQHandler+0x1f0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d101      	bne.n	8003036 <HAL_DMA_IRQHandler+0xd6>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_DMA_IRQHandler+0xd8>
 8003036:	2300      	movs	r3, #0
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 842b 	beq.w	8003894 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	2208      	movs	r2, #8
 8003048:	409a      	lsls	r2, r3
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80a2 	beq.w	8003198 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a2e      	ldr	r2, [pc, #184]	@ (8003114 <HAL_DMA_IRQHandler+0x1b4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d04a      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2d      	ldr	r2, [pc, #180]	@ (8003118 <HAL_DMA_IRQHandler+0x1b8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d045      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2b      	ldr	r2, [pc, #172]	@ (800311c <HAL_DMA_IRQHandler+0x1bc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d040      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2a      	ldr	r2, [pc, #168]	@ (8003120 <HAL_DMA_IRQHandler+0x1c0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d03b      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a28      	ldr	r2, [pc, #160]	@ (8003124 <HAL_DMA_IRQHandler+0x1c4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d036      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a27      	ldr	r2, [pc, #156]	@ (8003128 <HAL_DMA_IRQHandler+0x1c8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d031      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a25      	ldr	r2, [pc, #148]	@ (800312c <HAL_DMA_IRQHandler+0x1cc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d02c      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a24      	ldr	r2, [pc, #144]	@ (8003130 <HAL_DMA_IRQHandler+0x1d0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d027      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a22      	ldr	r2, [pc, #136]	@ (8003134 <HAL_DMA_IRQHandler+0x1d4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d022      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a21      	ldr	r2, [pc, #132]	@ (8003138 <HAL_DMA_IRQHandler+0x1d8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d01d      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <HAL_DMA_IRQHandler+0x1dc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d018      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003140 <HAL_DMA_IRQHandler+0x1e0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003144 <HAL_DMA_IRQHandler+0x1e4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00e      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1b      	ldr	r2, [pc, #108]	@ (8003148 <HAL_DMA_IRQHandler+0x1e8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d009      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	@ (800314c <HAL_DMA_IRQHandler+0x1ec>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d004      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x194>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a18      	ldr	r2, [pc, #96]	@ (8003150 <HAL_DMA_IRQHandler+0x1f0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d12f      	bne.n	8003154 <HAL_DMA_IRQHandler+0x1f4>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e02e      	b.n	8003168 <HAL_DMA_IRQHandler+0x208>
 800310a:	bf00      	nop
 800310c:	24000000 	.word	0x24000000
 8003110:	1b4e81b5 	.word	0x1b4e81b5
 8003114:	40020010 	.word	0x40020010
 8003118:	40020028 	.word	0x40020028
 800311c:	40020040 	.word	0x40020040
 8003120:	40020058 	.word	0x40020058
 8003124:	40020070 	.word	0x40020070
 8003128:	40020088 	.word	0x40020088
 800312c:	400200a0 	.word	0x400200a0
 8003130:	400200b8 	.word	0x400200b8
 8003134:	40020410 	.word	0x40020410
 8003138:	40020428 	.word	0x40020428
 800313c:	40020440 	.word	0x40020440
 8003140:	40020458 	.word	0x40020458
 8003144:	40020470 	.word	0x40020470
 8003148:	40020488 	.word	0x40020488
 800314c:	400204a0 	.word	0x400204a0
 8003150:	400204b8 	.word	0x400204b8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	bf14      	ite	ne
 8003162:	2301      	movne	r3, #1
 8003164:	2300      	moveq	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d015      	beq.n	8003198 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0204 	bic.w	r2, r2, #4
 800317a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2208      	movs	r2, #8
 8003186:	409a      	lsls	r2, r3
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003190:	f043 0201 	orr.w	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	fa22 f303 	lsr.w	r3, r2, r3
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d06e      	beq.n	800328c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a69      	ldr	r2, [pc, #420]	@ (8003358 <HAL_DMA_IRQHandler+0x3f8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d04a      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a67      	ldr	r2, [pc, #412]	@ (800335c <HAL_DMA_IRQHandler+0x3fc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d045      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a66      	ldr	r2, [pc, #408]	@ (8003360 <HAL_DMA_IRQHandler+0x400>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d040      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a64      	ldr	r2, [pc, #400]	@ (8003364 <HAL_DMA_IRQHandler+0x404>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d03b      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a63      	ldr	r2, [pc, #396]	@ (8003368 <HAL_DMA_IRQHandler+0x408>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d036      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a61      	ldr	r2, [pc, #388]	@ (800336c <HAL_DMA_IRQHandler+0x40c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a60      	ldr	r2, [pc, #384]	@ (8003370 <HAL_DMA_IRQHandler+0x410>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d02c      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003374 <HAL_DMA_IRQHandler+0x414>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d027      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a5d      	ldr	r2, [pc, #372]	@ (8003378 <HAL_DMA_IRQHandler+0x418>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a5b      	ldr	r2, [pc, #364]	@ (800337c <HAL_DMA_IRQHandler+0x41c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a5a      	ldr	r2, [pc, #360]	@ (8003380 <HAL_DMA_IRQHandler+0x420>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a58      	ldr	r2, [pc, #352]	@ (8003384 <HAL_DMA_IRQHandler+0x424>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a57      	ldr	r2, [pc, #348]	@ (8003388 <HAL_DMA_IRQHandler+0x428>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a55      	ldr	r2, [pc, #340]	@ (800338c <HAL_DMA_IRQHandler+0x42c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a54      	ldr	r2, [pc, #336]	@ (8003390 <HAL_DMA_IRQHandler+0x430>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_DMA_IRQHandler+0x2ee>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a52      	ldr	r2, [pc, #328]	@ (8003394 <HAL_DMA_IRQHandler+0x434>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10a      	bne.n	8003264 <HAL_DMA_IRQHandler+0x304>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	e003      	b.n	800326c <HAL_DMA_IRQHandler+0x30c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2300      	movs	r3, #0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00d      	beq.n	800328c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	2201      	movs	r2, #1
 800327a:	409a      	lsls	r2, r3
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003284:	f043 0202 	orr.w	r2, r3, #2
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2204      	movs	r2, #4
 8003296:	409a      	lsls	r2, r3
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 808f 	beq.w	80033c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003358 <HAL_DMA_IRQHandler+0x3f8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d04a      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2a      	ldr	r2, [pc, #168]	@ (800335c <HAL_DMA_IRQHandler+0x3fc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d045      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a29      	ldr	r2, [pc, #164]	@ (8003360 <HAL_DMA_IRQHandler+0x400>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d040      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <HAL_DMA_IRQHandler+0x404>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d03b      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a26      	ldr	r2, [pc, #152]	@ (8003368 <HAL_DMA_IRQHandler+0x408>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d036      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a24      	ldr	r2, [pc, #144]	@ (800336c <HAL_DMA_IRQHandler+0x40c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d031      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a23      	ldr	r2, [pc, #140]	@ (8003370 <HAL_DMA_IRQHandler+0x410>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d02c      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <HAL_DMA_IRQHandler+0x414>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d027      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a20      	ldr	r2, [pc, #128]	@ (8003378 <HAL_DMA_IRQHandler+0x418>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d022      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1e      	ldr	r2, [pc, #120]	@ (800337c <HAL_DMA_IRQHandler+0x41c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d01d      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <HAL_DMA_IRQHandler+0x420>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d018      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1b      	ldr	r2, [pc, #108]	@ (8003384 <HAL_DMA_IRQHandler+0x424>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <HAL_DMA_IRQHandler+0x428>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00e      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a18      	ldr	r2, [pc, #96]	@ (800338c <HAL_DMA_IRQHandler+0x42c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a17      	ldr	r2, [pc, #92]	@ (8003390 <HAL_DMA_IRQHandler+0x430>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d004      	beq.n	8003342 <HAL_DMA_IRQHandler+0x3e2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a15      	ldr	r2, [pc, #84]	@ (8003394 <HAL_DMA_IRQHandler+0x434>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d12a      	bne.n	8003398 <HAL_DMA_IRQHandler+0x438>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	e023      	b.n	80033a0 <HAL_DMA_IRQHandler+0x440>
 8003358:	40020010 	.word	0x40020010
 800335c:	40020028 	.word	0x40020028
 8003360:	40020040 	.word	0x40020040
 8003364:	40020058 	.word	0x40020058
 8003368:	40020070 	.word	0x40020070
 800336c:	40020088 	.word	0x40020088
 8003370:	400200a0 	.word	0x400200a0
 8003374:	400200b8 	.word	0x400200b8
 8003378:	40020410 	.word	0x40020410
 800337c:	40020428 	.word	0x40020428
 8003380:	40020440 	.word	0x40020440
 8003384:	40020458 	.word	0x40020458
 8003388:	40020470 	.word	0x40020470
 800338c:	40020488 	.word	0x40020488
 8003390:	400204a0 	.word	0x400204a0
 8003394:	400204b8 	.word	0x400204b8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2300      	movs	r3, #0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00d      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	2204      	movs	r2, #4
 80033ae:	409a      	lsls	r2, r3
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b8:	f043 0204 	orr.w	r2, r3, #4
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2210      	movs	r2, #16
 80033ca:	409a      	lsls	r2, r3
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80a6 	beq.w	8003522 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a85      	ldr	r2, [pc, #532]	@ (80035f0 <HAL_DMA_IRQHandler+0x690>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d04a      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a83      	ldr	r2, [pc, #524]	@ (80035f4 <HAL_DMA_IRQHandler+0x694>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d045      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a82      	ldr	r2, [pc, #520]	@ (80035f8 <HAL_DMA_IRQHandler+0x698>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d040      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a80      	ldr	r2, [pc, #512]	@ (80035fc <HAL_DMA_IRQHandler+0x69c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d03b      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7f      	ldr	r2, [pc, #508]	@ (8003600 <HAL_DMA_IRQHandler+0x6a0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d036      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a7d      	ldr	r2, [pc, #500]	@ (8003604 <HAL_DMA_IRQHandler+0x6a4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d031      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a7c      	ldr	r2, [pc, #496]	@ (8003608 <HAL_DMA_IRQHandler+0x6a8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d02c      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a7a      	ldr	r2, [pc, #488]	@ (800360c <HAL_DMA_IRQHandler+0x6ac>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d027      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a79      	ldr	r2, [pc, #484]	@ (8003610 <HAL_DMA_IRQHandler+0x6b0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d022      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a77      	ldr	r2, [pc, #476]	@ (8003614 <HAL_DMA_IRQHandler+0x6b4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01d      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a76      	ldr	r2, [pc, #472]	@ (8003618 <HAL_DMA_IRQHandler+0x6b8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d018      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a74      	ldr	r2, [pc, #464]	@ (800361c <HAL_DMA_IRQHandler+0x6bc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d013      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a73      	ldr	r2, [pc, #460]	@ (8003620 <HAL_DMA_IRQHandler+0x6c0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00e      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a71      	ldr	r2, [pc, #452]	@ (8003624 <HAL_DMA_IRQHandler+0x6c4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a70      	ldr	r2, [pc, #448]	@ (8003628 <HAL_DMA_IRQHandler+0x6c8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d004      	beq.n	8003476 <HAL_DMA_IRQHandler+0x516>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a6e      	ldr	r2, [pc, #440]	@ (800362c <HAL_DMA_IRQHandler+0x6cc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10a      	bne.n	800348c <HAL_DMA_IRQHandler+0x52c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e009      	b.n	80034a0 <HAL_DMA_IRQHandler+0x540>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	bf14      	ite	ne
 800349a:	2301      	movne	r3, #1
 800349c:	2300      	moveq	r3, #0
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d03e      	beq.n	8003522 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	2210      	movs	r2, #16
 80034ae:	409a      	lsls	r2, r3
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d018      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d108      	bne.n	80034e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d024      	beq.n	8003522 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
 80034e0:	e01f      	b.n	8003522 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01b      	beq.n	8003522 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4798      	blx	r3
 80034f2:	e016      	b.n	8003522 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d107      	bne.n	8003512 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0208 	bic.w	r2, r2, #8
 8003510:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2220      	movs	r2, #32
 800352c:	409a      	lsls	r2, r3
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8110 	beq.w	8003758 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a2c      	ldr	r2, [pc, #176]	@ (80035f0 <HAL_DMA_IRQHandler+0x690>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d04a      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2b      	ldr	r2, [pc, #172]	@ (80035f4 <HAL_DMA_IRQHandler+0x694>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d045      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a29      	ldr	r2, [pc, #164]	@ (80035f8 <HAL_DMA_IRQHandler+0x698>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d040      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a28      	ldr	r2, [pc, #160]	@ (80035fc <HAL_DMA_IRQHandler+0x69c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d03b      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a26      	ldr	r2, [pc, #152]	@ (8003600 <HAL_DMA_IRQHandler+0x6a0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d036      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a25      	ldr	r2, [pc, #148]	@ (8003604 <HAL_DMA_IRQHandler+0x6a4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d031      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a23      	ldr	r2, [pc, #140]	@ (8003608 <HAL_DMA_IRQHandler+0x6a8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02c      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a22      	ldr	r2, [pc, #136]	@ (800360c <HAL_DMA_IRQHandler+0x6ac>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d027      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a20      	ldr	r2, [pc, #128]	@ (8003610 <HAL_DMA_IRQHandler+0x6b0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d022      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1f      	ldr	r2, [pc, #124]	@ (8003614 <HAL_DMA_IRQHandler+0x6b4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d01d      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003618 <HAL_DMA_IRQHandler+0x6b8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d018      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1c      	ldr	r2, [pc, #112]	@ (800361c <HAL_DMA_IRQHandler+0x6bc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003620 <HAL_DMA_IRQHandler+0x6c0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a19      	ldr	r2, [pc, #100]	@ (8003624 <HAL_DMA_IRQHandler+0x6c4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <HAL_DMA_IRQHandler+0x6c8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x678>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a16      	ldr	r2, [pc, #88]	@ (800362c <HAL_DMA_IRQHandler+0x6cc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d12b      	bne.n	8003630 <HAL_DMA_IRQHandler+0x6d0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bf14      	ite	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	2300      	moveq	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	e02a      	b.n	8003644 <HAL_DMA_IRQHandler+0x6e4>
 80035ee:	bf00      	nop
 80035f0:	40020010 	.word	0x40020010
 80035f4:	40020028 	.word	0x40020028
 80035f8:	40020040 	.word	0x40020040
 80035fc:	40020058 	.word	0x40020058
 8003600:	40020070 	.word	0x40020070
 8003604:	40020088 	.word	0x40020088
 8003608:	400200a0 	.word	0x400200a0
 800360c:	400200b8 	.word	0x400200b8
 8003610:	40020410 	.word	0x40020410
 8003614:	40020428 	.word	0x40020428
 8003618:	40020440 	.word	0x40020440
 800361c:	40020458 	.word	0x40020458
 8003620:	40020470 	.word	0x40020470
 8003624:	40020488 	.word	0x40020488
 8003628:	400204a0 	.word	0x400204a0
 800362c:	400204b8 	.word	0x400204b8
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8087 	beq.w	8003758 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2220      	movs	r2, #32
 8003654:	409a      	lsls	r2, r3
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b04      	cmp	r3, #4
 8003664:	d139      	bne.n	80036da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0216 	bic.w	r2, r2, #22
 8003674:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003684:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <HAL_DMA_IRQHandler+0x736>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0208 	bic.w	r2, r2, #8
 80036a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	223f      	movs	r2, #63	@ 0x3f
 80036b0:	409a      	lsls	r2, r3
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 834a 	beq.w	8003d64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
          }
          return;
 80036d8:	e344      	b.n	8003d64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d018      	beq.n	800371a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d02c      	beq.n	8003758 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
 8003706:	e027      	b.n	8003758 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d023      	beq.n	8003758 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
 8003718:	e01e      	b.n	8003758 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10f      	bne.n	8003748 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0210 	bic.w	r2, r2, #16
 8003736:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8306 	beq.w	8003d6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8088 	beq.w	8003880 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2204      	movs	r2, #4
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7a      	ldr	r2, [pc, #488]	@ (8003968 <HAL_DMA_IRQHandler+0xa08>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d04a      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a79      	ldr	r2, [pc, #484]	@ (800396c <HAL_DMA_IRQHandler+0xa0c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d045      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a77      	ldr	r2, [pc, #476]	@ (8003970 <HAL_DMA_IRQHandler+0xa10>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d040      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a76      	ldr	r2, [pc, #472]	@ (8003974 <HAL_DMA_IRQHandler+0xa14>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d03b      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a74      	ldr	r2, [pc, #464]	@ (8003978 <HAL_DMA_IRQHandler+0xa18>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d036      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a73      	ldr	r2, [pc, #460]	@ (800397c <HAL_DMA_IRQHandler+0xa1c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d031      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a71      	ldr	r2, [pc, #452]	@ (8003980 <HAL_DMA_IRQHandler+0xa20>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02c      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a70      	ldr	r2, [pc, #448]	@ (8003984 <HAL_DMA_IRQHandler+0xa24>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d027      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003988 <HAL_DMA_IRQHandler+0xa28>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d022      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a6d      	ldr	r2, [pc, #436]	@ (800398c <HAL_DMA_IRQHandler+0xa2c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d01d      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a6b      	ldr	r2, [pc, #428]	@ (8003990 <HAL_DMA_IRQHandler+0xa30>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d018      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a6a      	ldr	r2, [pc, #424]	@ (8003994 <HAL_DMA_IRQHandler+0xa34>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d013      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a68      	ldr	r2, [pc, #416]	@ (8003998 <HAL_DMA_IRQHandler+0xa38>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00e      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a67      	ldr	r2, [pc, #412]	@ (800399c <HAL_DMA_IRQHandler+0xa3c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d009      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a65      	ldr	r2, [pc, #404]	@ (80039a0 <HAL_DMA_IRQHandler+0xa40>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_DMA_IRQHandler+0x8b8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a64      	ldr	r2, [pc, #400]	@ (80039a4 <HAL_DMA_IRQHandler+0xa44>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d108      	bne.n	800382a <HAL_DMA_IRQHandler+0x8ca>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e007      	b.n	800383a <HAL_DMA_IRQHandler+0x8da>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3301      	adds	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003842:	429a      	cmp	r2, r3
 8003844:	d307      	bcc.n	8003856 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f2      	bne.n	800383a <HAL_DMA_IRQHandler+0x8da>
 8003854:	e000      	b.n	8003858 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003856:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d004      	beq.n	8003870 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2203      	movs	r2, #3
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800386e:	e003      	b.n	8003878 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8272 	beq.w	8003d6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
 8003892:	e26c      	b.n	8003d6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a43      	ldr	r2, [pc, #268]	@ (80039a8 <HAL_DMA_IRQHandler+0xa48>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d022      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x984>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a42      	ldr	r2, [pc, #264]	@ (80039ac <HAL_DMA_IRQHandler+0xa4c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d01d      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x984>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a40      	ldr	r2, [pc, #256]	@ (80039b0 <HAL_DMA_IRQHandler+0xa50>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d018      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x984>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a3f      	ldr	r2, [pc, #252]	@ (80039b4 <HAL_DMA_IRQHandler+0xa54>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x984>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a3d      	ldr	r2, [pc, #244]	@ (80039b8 <HAL_DMA_IRQHandler+0xa58>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00e      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x984>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a3c      	ldr	r2, [pc, #240]	@ (80039bc <HAL_DMA_IRQHandler+0xa5c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d009      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x984>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a3a      	ldr	r2, [pc, #232]	@ (80039c0 <HAL_DMA_IRQHandler+0xa60>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x984>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a39      	ldr	r2, [pc, #228]	@ (80039c4 <HAL_DMA_IRQHandler+0xa64>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d101      	bne.n	80038e8 <HAL_DMA_IRQHandler+0x988>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <HAL_DMA_IRQHandler+0x98a>
 80038e8:	2300      	movs	r3, #0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 823f 	beq.w	8003d6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	2204      	movs	r2, #4
 8003902:	409a      	lsls	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80cd 	beq.w	8003aa8 <HAL_DMA_IRQHandler+0xb48>
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80c7 	beq.w	8003aa8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2204      	movs	r2, #4
 8003924:	409a      	lsls	r2, r3
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d049      	beq.n	80039c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8210 	beq.w	8003d68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003950:	e20a      	b.n	8003d68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8206 	beq.w	8003d68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003964:	e200      	b.n	8003d68 <HAL_DMA_IRQHandler+0xe08>
 8003966:	bf00      	nop
 8003968:	40020010 	.word	0x40020010
 800396c:	40020028 	.word	0x40020028
 8003970:	40020040 	.word	0x40020040
 8003974:	40020058 	.word	0x40020058
 8003978:	40020070 	.word	0x40020070
 800397c:	40020088 	.word	0x40020088
 8003980:	400200a0 	.word	0x400200a0
 8003984:	400200b8 	.word	0x400200b8
 8003988:	40020410 	.word	0x40020410
 800398c:	40020428 	.word	0x40020428
 8003990:	40020440 	.word	0x40020440
 8003994:	40020458 	.word	0x40020458
 8003998:	40020470 	.word	0x40020470
 800399c:	40020488 	.word	0x40020488
 80039a0:	400204a0 	.word	0x400204a0
 80039a4:	400204b8 	.word	0x400204b8
 80039a8:	58025408 	.word	0x58025408
 80039ac:	5802541c 	.word	0x5802541c
 80039b0:	58025430 	.word	0x58025430
 80039b4:	58025444 	.word	0x58025444
 80039b8:	58025458 	.word	0x58025458
 80039bc:	5802546c 	.word	0x5802546c
 80039c0:	58025480 	.word	0x58025480
 80039c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d160      	bne.n	8003a94 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a7f      	ldr	r2, [pc, #508]	@ (8003bd4 <HAL_DMA_IRQHandler+0xc74>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d04a      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a7d      	ldr	r2, [pc, #500]	@ (8003bd8 <HAL_DMA_IRQHandler+0xc78>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d045      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7c      	ldr	r2, [pc, #496]	@ (8003bdc <HAL_DMA_IRQHandler+0xc7c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d040      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a7a      	ldr	r2, [pc, #488]	@ (8003be0 <HAL_DMA_IRQHandler+0xc80>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d03b      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a79      	ldr	r2, [pc, #484]	@ (8003be4 <HAL_DMA_IRQHandler+0xc84>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d036      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a77      	ldr	r2, [pc, #476]	@ (8003be8 <HAL_DMA_IRQHandler+0xc88>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d031      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a76      	ldr	r2, [pc, #472]	@ (8003bec <HAL_DMA_IRQHandler+0xc8c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d02c      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a74      	ldr	r2, [pc, #464]	@ (8003bf0 <HAL_DMA_IRQHandler+0xc90>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d027      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a73      	ldr	r2, [pc, #460]	@ (8003bf4 <HAL_DMA_IRQHandler+0xc94>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d022      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a71      	ldr	r2, [pc, #452]	@ (8003bf8 <HAL_DMA_IRQHandler+0xc98>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01d      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a70      	ldr	r2, [pc, #448]	@ (8003bfc <HAL_DMA_IRQHandler+0xc9c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d018      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a6e      	ldr	r2, [pc, #440]	@ (8003c00 <HAL_DMA_IRQHandler+0xca0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a6d      	ldr	r2, [pc, #436]	@ (8003c04 <HAL_DMA_IRQHandler+0xca4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00e      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a6b      	ldr	r2, [pc, #428]	@ (8003c08 <HAL_DMA_IRQHandler+0xca8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d009      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6a      	ldr	r2, [pc, #424]	@ (8003c0c <HAL_DMA_IRQHandler+0xcac>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d004      	beq.n	8003a72 <HAL_DMA_IRQHandler+0xb12>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a68      	ldr	r2, [pc, #416]	@ (8003c10 <HAL_DMA_IRQHandler+0xcb0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d108      	bne.n	8003a84 <HAL_DMA_IRQHandler+0xb24>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0208 	bic.w	r2, r2, #8
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e007      	b.n	8003a94 <HAL_DMA_IRQHandler+0xb34>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0204 	bic.w	r2, r2, #4
 8003a92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8165 	beq.w	8003d68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aa6:	e15f      	b.n	8003d68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80c5 	beq.w	8003c48 <HAL_DMA_IRQHandler+0xce8>
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80bf 	beq.w	8003c48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d018      	beq.n	8003b16 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 813a 	beq.w	8003d6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b00:	e134      	b.n	8003d6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8130 	beq.w	8003d6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b14:	e12a      	b.n	8003d6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f040 8089 	bne.w	8003c34 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd4 <HAL_DMA_IRQHandler+0xc74>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d04a      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a29      	ldr	r2, [pc, #164]	@ (8003bd8 <HAL_DMA_IRQHandler+0xc78>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d045      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a28      	ldr	r2, [pc, #160]	@ (8003bdc <HAL_DMA_IRQHandler+0xc7c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d040      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a26      	ldr	r2, [pc, #152]	@ (8003be0 <HAL_DMA_IRQHandler+0xc80>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d03b      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a25      	ldr	r2, [pc, #148]	@ (8003be4 <HAL_DMA_IRQHandler+0xc84>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d036      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a23      	ldr	r2, [pc, #140]	@ (8003be8 <HAL_DMA_IRQHandler+0xc88>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d031      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a22      	ldr	r2, [pc, #136]	@ (8003bec <HAL_DMA_IRQHandler+0xc8c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d02c      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a20      	ldr	r2, [pc, #128]	@ (8003bf0 <HAL_DMA_IRQHandler+0xc90>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d027      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf4 <HAL_DMA_IRQHandler+0xc94>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d022      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf8 <HAL_DMA_IRQHandler+0xc98>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01d      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bfc <HAL_DMA_IRQHandler+0xc9c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d018      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1a      	ldr	r2, [pc, #104]	@ (8003c00 <HAL_DMA_IRQHandler+0xca0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a19      	ldr	r2, [pc, #100]	@ (8003c04 <HAL_DMA_IRQHandler+0xca4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a17      	ldr	r2, [pc, #92]	@ (8003c08 <HAL_DMA_IRQHandler+0xca8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d009      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a16      	ldr	r2, [pc, #88]	@ (8003c0c <HAL_DMA_IRQHandler+0xcac>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xc62>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a14      	ldr	r2, [pc, #80]	@ (8003c10 <HAL_DMA_IRQHandler+0xcb0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d128      	bne.n	8003c14 <HAL_DMA_IRQHandler+0xcb4>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0214 	bic.w	r2, r2, #20
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e027      	b.n	8003c24 <HAL_DMA_IRQHandler+0xcc4>
 8003bd4:	40020010 	.word	0x40020010
 8003bd8:	40020028 	.word	0x40020028
 8003bdc:	40020040 	.word	0x40020040
 8003be0:	40020058 	.word	0x40020058
 8003be4:	40020070 	.word	0x40020070
 8003be8:	40020088 	.word	0x40020088
 8003bec:	400200a0 	.word	0x400200a0
 8003bf0:	400200b8 	.word	0x400200b8
 8003bf4:	40020410 	.word	0x40020410
 8003bf8:	40020428 	.word	0x40020428
 8003bfc:	40020440 	.word	0x40020440
 8003c00:	40020458 	.word	0x40020458
 8003c04:	40020470 	.word	0x40020470
 8003c08:	40020488 	.word	0x40020488
 8003c0c:	400204a0 	.word	0x400204a0
 8003c10:	400204b8 	.word	0x400204b8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 020a 	bic.w	r2, r2, #10
 8003c22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8097 	beq.w	8003d6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c46:	e091      	b.n	8003d6c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2208      	movs	r2, #8
 8003c52:	409a      	lsls	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8088 	beq.w	8003d6e <HAL_DMA_IRQHandler+0xe0e>
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8082 	beq.w	8003d6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a41      	ldr	r2, [pc, #260]	@ (8003d74 <HAL_DMA_IRQHandler+0xe14>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d04a      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a3f      	ldr	r2, [pc, #252]	@ (8003d78 <HAL_DMA_IRQHandler+0xe18>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d045      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a3e      	ldr	r2, [pc, #248]	@ (8003d7c <HAL_DMA_IRQHandler+0xe1c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d040      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d80 <HAL_DMA_IRQHandler+0xe20>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d03b      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a3b      	ldr	r2, [pc, #236]	@ (8003d84 <HAL_DMA_IRQHandler+0xe24>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d036      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a39      	ldr	r2, [pc, #228]	@ (8003d88 <HAL_DMA_IRQHandler+0xe28>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d031      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a38      	ldr	r2, [pc, #224]	@ (8003d8c <HAL_DMA_IRQHandler+0xe2c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d02c      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a36      	ldr	r2, [pc, #216]	@ (8003d90 <HAL_DMA_IRQHandler+0xe30>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d027      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a35      	ldr	r2, [pc, #212]	@ (8003d94 <HAL_DMA_IRQHandler+0xe34>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d022      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a33      	ldr	r2, [pc, #204]	@ (8003d98 <HAL_DMA_IRQHandler+0xe38>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01d      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a32      	ldr	r2, [pc, #200]	@ (8003d9c <HAL_DMA_IRQHandler+0xe3c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d018      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a30      	ldr	r2, [pc, #192]	@ (8003da0 <HAL_DMA_IRQHandler+0xe40>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8003da4 <HAL_DMA_IRQHandler+0xe44>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8003da8 <HAL_DMA_IRQHandler+0xe48>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8003dac <HAL_DMA_IRQHandler+0xe4c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xdaa>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a2a      	ldr	r2, [pc, #168]	@ (8003db0 <HAL_DMA_IRQHandler+0xe50>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d108      	bne.n	8003d1c <HAL_DMA_IRQHandler+0xdbc>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 021c 	bic.w	r2, r2, #28
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e007      	b.n	8003d2c <HAL_DMA_IRQHandler+0xdcc>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 020e 	bic.w	r2, r2, #14
 8003d2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2201      	movs	r2, #1
 8003d36:	409a      	lsls	r2, r3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
 8003d62:	e004      	b.n	8003d6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d64:	bf00      	nop
 8003d66:	e002      	b.n	8003d6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d68:	bf00      	nop
 8003d6a:	e000      	b.n	8003d6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d6e:	3728      	adds	r7, #40	@ 0x28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40020010 	.word	0x40020010
 8003d78:	40020028 	.word	0x40020028
 8003d7c:	40020040 	.word	0x40020040
 8003d80:	40020058 	.word	0x40020058
 8003d84:	40020070 	.word	0x40020070
 8003d88:	40020088 	.word	0x40020088
 8003d8c:	400200a0 	.word	0x400200a0
 8003d90:	400200b8 	.word	0x400200b8
 8003d94:	40020410 	.word	0x40020410
 8003d98:	40020428 	.word	0x40020428
 8003d9c:	40020440 	.word	0x40020440
 8003da0:	40020458 	.word	0x40020458
 8003da4:	40020470 	.word	0x40020470
 8003da8:	40020488 	.word	0x40020488
 8003dac:	400204a0 	.word	0x400204a0
 8003db0:	400204b8 	.word	0x400204b8

08003db4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dcc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a7f      	ldr	r2, [pc, #508]	@ (8003fd0 <DMA_SetConfig+0x21c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d072      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a7d      	ldr	r2, [pc, #500]	@ (8003fd4 <DMA_SetConfig+0x220>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d06d      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a7c      	ldr	r2, [pc, #496]	@ (8003fd8 <DMA_SetConfig+0x224>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d068      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a7a      	ldr	r2, [pc, #488]	@ (8003fdc <DMA_SetConfig+0x228>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d063      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a79      	ldr	r2, [pc, #484]	@ (8003fe0 <DMA_SetConfig+0x22c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d05e      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a77      	ldr	r2, [pc, #476]	@ (8003fe4 <DMA_SetConfig+0x230>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d059      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a76      	ldr	r2, [pc, #472]	@ (8003fe8 <DMA_SetConfig+0x234>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d054      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a74      	ldr	r2, [pc, #464]	@ (8003fec <DMA_SetConfig+0x238>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d04f      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a73      	ldr	r2, [pc, #460]	@ (8003ff0 <DMA_SetConfig+0x23c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d04a      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a71      	ldr	r2, [pc, #452]	@ (8003ff4 <DMA_SetConfig+0x240>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d045      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a70      	ldr	r2, [pc, #448]	@ (8003ff8 <DMA_SetConfig+0x244>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d040      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a6e      	ldr	r2, [pc, #440]	@ (8003ffc <DMA_SetConfig+0x248>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d03b      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a6d      	ldr	r2, [pc, #436]	@ (8004000 <DMA_SetConfig+0x24c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d036      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a6b      	ldr	r2, [pc, #428]	@ (8004004 <DMA_SetConfig+0x250>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d031      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a6a      	ldr	r2, [pc, #424]	@ (8004008 <DMA_SetConfig+0x254>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d02c      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a68      	ldr	r2, [pc, #416]	@ (800400c <DMA_SetConfig+0x258>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d027      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a67      	ldr	r2, [pc, #412]	@ (8004010 <DMA_SetConfig+0x25c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d022      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a65      	ldr	r2, [pc, #404]	@ (8004014 <DMA_SetConfig+0x260>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01d      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a64      	ldr	r2, [pc, #400]	@ (8004018 <DMA_SetConfig+0x264>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d018      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a62      	ldr	r2, [pc, #392]	@ (800401c <DMA_SetConfig+0x268>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a61      	ldr	r2, [pc, #388]	@ (8004020 <DMA_SetConfig+0x26c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00e      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a5f      	ldr	r2, [pc, #380]	@ (8004024 <DMA_SetConfig+0x270>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d009      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a5e      	ldr	r2, [pc, #376]	@ (8004028 <DMA_SetConfig+0x274>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <DMA_SetConfig+0x10a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a5c      	ldr	r2, [pc, #368]	@ (800402c <DMA_SetConfig+0x278>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <DMA_SetConfig+0x10e>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <DMA_SetConfig+0x110>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ed0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ee2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a39      	ldr	r2, [pc, #228]	@ (8003fd0 <DMA_SetConfig+0x21c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d04a      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a38      	ldr	r2, [pc, #224]	@ (8003fd4 <DMA_SetConfig+0x220>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d045      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a36      	ldr	r2, [pc, #216]	@ (8003fd8 <DMA_SetConfig+0x224>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d040      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a35      	ldr	r2, [pc, #212]	@ (8003fdc <DMA_SetConfig+0x228>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d03b      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a33      	ldr	r2, [pc, #204]	@ (8003fe0 <DMA_SetConfig+0x22c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d036      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a32      	ldr	r2, [pc, #200]	@ (8003fe4 <DMA_SetConfig+0x230>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d031      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a30      	ldr	r2, [pc, #192]	@ (8003fe8 <DMA_SetConfig+0x234>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02c      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003fec <DMA_SetConfig+0x238>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d027      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff0 <DMA_SetConfig+0x23c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d022      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff4 <DMA_SetConfig+0x240>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d01d      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ff8 <DMA_SetConfig+0x244>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d018      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a29      	ldr	r2, [pc, #164]	@ (8003ffc <DMA_SetConfig+0x248>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a27      	ldr	r2, [pc, #156]	@ (8004000 <DMA_SetConfig+0x24c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00e      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a26      	ldr	r2, [pc, #152]	@ (8004004 <DMA_SetConfig+0x250>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a24      	ldr	r2, [pc, #144]	@ (8004008 <DMA_SetConfig+0x254>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <DMA_SetConfig+0x1d0>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a23      	ldr	r2, [pc, #140]	@ (800400c <DMA_SetConfig+0x258>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d101      	bne.n	8003f88 <DMA_SetConfig+0x1d4>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <DMA_SetConfig+0x1d6>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d059      	beq.n	8004042 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	223f      	movs	r2, #63	@ 0x3f
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b40      	cmp	r3, #64	@ 0x40
 8003fbc:	d138      	bne.n	8004030 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fce:	e086      	b.n	80040de <DMA_SetConfig+0x32a>
 8003fd0:	40020010 	.word	0x40020010
 8003fd4:	40020028 	.word	0x40020028
 8003fd8:	40020040 	.word	0x40020040
 8003fdc:	40020058 	.word	0x40020058
 8003fe0:	40020070 	.word	0x40020070
 8003fe4:	40020088 	.word	0x40020088
 8003fe8:	400200a0 	.word	0x400200a0
 8003fec:	400200b8 	.word	0x400200b8
 8003ff0:	40020410 	.word	0x40020410
 8003ff4:	40020428 	.word	0x40020428
 8003ff8:	40020440 	.word	0x40020440
 8003ffc:	40020458 	.word	0x40020458
 8004000:	40020470 	.word	0x40020470
 8004004:	40020488 	.word	0x40020488
 8004008:	400204a0 	.word	0x400204a0
 800400c:	400204b8 	.word	0x400204b8
 8004010:	58025408 	.word	0x58025408
 8004014:	5802541c 	.word	0x5802541c
 8004018:	58025430 	.word	0x58025430
 800401c:	58025444 	.word	0x58025444
 8004020:	58025458 	.word	0x58025458
 8004024:	5802546c 	.word	0x5802546c
 8004028:	58025480 	.word	0x58025480
 800402c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	60da      	str	r2, [r3, #12]
}
 8004040:	e04d      	b.n	80040de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a29      	ldr	r2, [pc, #164]	@ (80040ec <DMA_SetConfig+0x338>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d022      	beq.n	8004092 <DMA_SetConfig+0x2de>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a27      	ldr	r2, [pc, #156]	@ (80040f0 <DMA_SetConfig+0x33c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01d      	beq.n	8004092 <DMA_SetConfig+0x2de>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a26      	ldr	r2, [pc, #152]	@ (80040f4 <DMA_SetConfig+0x340>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d018      	beq.n	8004092 <DMA_SetConfig+0x2de>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a24      	ldr	r2, [pc, #144]	@ (80040f8 <DMA_SetConfig+0x344>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <DMA_SetConfig+0x2de>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a23      	ldr	r2, [pc, #140]	@ (80040fc <DMA_SetConfig+0x348>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00e      	beq.n	8004092 <DMA_SetConfig+0x2de>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a21      	ldr	r2, [pc, #132]	@ (8004100 <DMA_SetConfig+0x34c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d009      	beq.n	8004092 <DMA_SetConfig+0x2de>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a20      	ldr	r2, [pc, #128]	@ (8004104 <DMA_SetConfig+0x350>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d004      	beq.n	8004092 <DMA_SetConfig+0x2de>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1e      	ldr	r2, [pc, #120]	@ (8004108 <DMA_SetConfig+0x354>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <DMA_SetConfig+0x2e2>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <DMA_SetConfig+0x2e4>
 8004096:	2300      	movs	r3, #0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	2201      	movs	r2, #1
 80040a6:	409a      	lsls	r2, r3
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b40      	cmp	r3, #64	@ 0x40
 80040ba:	d108      	bne.n	80040ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	60da      	str	r2, [r3, #12]
}
 80040cc:	e007      	b.n	80040de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	60da      	str	r2, [r3, #12]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	58025408 	.word	0x58025408
 80040f0:	5802541c 	.word	0x5802541c
 80040f4:	58025430 	.word	0x58025430
 80040f8:	58025444 	.word	0x58025444
 80040fc:	58025458 	.word	0x58025458
 8004100:	5802546c 	.word	0x5802546c
 8004104:	58025480 	.word	0x58025480
 8004108:	58025494 	.word	0x58025494

0800410c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a42      	ldr	r2, [pc, #264]	@ (8004224 <DMA_CalcBaseAndBitshift+0x118>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d04a      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a41      	ldr	r2, [pc, #260]	@ (8004228 <DMA_CalcBaseAndBitshift+0x11c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d045      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a3f      	ldr	r2, [pc, #252]	@ (800422c <DMA_CalcBaseAndBitshift+0x120>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d040      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a3e      	ldr	r2, [pc, #248]	@ (8004230 <DMA_CalcBaseAndBitshift+0x124>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d03b      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a3c      	ldr	r2, [pc, #240]	@ (8004234 <DMA_CalcBaseAndBitshift+0x128>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d036      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a3b      	ldr	r2, [pc, #236]	@ (8004238 <DMA_CalcBaseAndBitshift+0x12c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d031      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a39      	ldr	r2, [pc, #228]	@ (800423c <DMA_CalcBaseAndBitshift+0x130>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d02c      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a38      	ldr	r2, [pc, #224]	@ (8004240 <DMA_CalcBaseAndBitshift+0x134>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d027      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a36      	ldr	r2, [pc, #216]	@ (8004244 <DMA_CalcBaseAndBitshift+0x138>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d022      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a35      	ldr	r2, [pc, #212]	@ (8004248 <DMA_CalcBaseAndBitshift+0x13c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d01d      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a33      	ldr	r2, [pc, #204]	@ (800424c <DMA_CalcBaseAndBitshift+0x140>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d018      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a32      	ldr	r2, [pc, #200]	@ (8004250 <DMA_CalcBaseAndBitshift+0x144>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d013      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a30      	ldr	r2, [pc, #192]	@ (8004254 <DMA_CalcBaseAndBitshift+0x148>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00e      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a2f      	ldr	r2, [pc, #188]	@ (8004258 <DMA_CalcBaseAndBitshift+0x14c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d009      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a2d      	ldr	r2, [pc, #180]	@ (800425c <DMA_CalcBaseAndBitshift+0x150>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xa8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004260 <DMA_CalcBaseAndBitshift+0x154>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d101      	bne.n	80041b8 <DMA_CalcBaseAndBitshift+0xac>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <DMA_CalcBaseAndBitshift+0xae>
 80041b8:	2300      	movs	r3, #0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d024      	beq.n	8004208 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	3b10      	subs	r3, #16
 80041c6:	4a27      	ldr	r2, [pc, #156]	@ (8004264 <DMA_CalcBaseAndBitshift+0x158>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	4a24      	ldr	r2, [pc, #144]	@ (8004268 <DMA_CalcBaseAndBitshift+0x15c>)
 80041d8:	5cd3      	ldrb	r3, [r2, r3]
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d908      	bls.n	80041f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b1f      	ldr	r3, [pc, #124]	@ (800426c <DMA_CalcBaseAndBitshift+0x160>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	1d1a      	adds	r2, r3, #4
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80041f6:	e00d      	b.n	8004214 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b1b      	ldr	r3, [pc, #108]	@ (800426c <DMA_CalcBaseAndBitshift+0x160>)
 8004200:	4013      	ands	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6593      	str	r3, [r2, #88]	@ 0x58
 8004206:	e005      	b.n	8004214 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40020010 	.word	0x40020010
 8004228:	40020028 	.word	0x40020028
 800422c:	40020040 	.word	0x40020040
 8004230:	40020058 	.word	0x40020058
 8004234:	40020070 	.word	0x40020070
 8004238:	40020088 	.word	0x40020088
 800423c:	400200a0 	.word	0x400200a0
 8004240:	400200b8 	.word	0x400200b8
 8004244:	40020410 	.word	0x40020410
 8004248:	40020428 	.word	0x40020428
 800424c:	40020440 	.word	0x40020440
 8004250:	40020458 	.word	0x40020458
 8004254:	40020470 	.word	0x40020470
 8004258:	40020488 	.word	0x40020488
 800425c:	400204a0 	.word	0x400204a0
 8004260:	400204b8 	.word	0x400204b8
 8004264:	aaaaaaab 	.word	0xaaaaaaab
 8004268:	0800a024 	.word	0x0800a024
 800426c:	fffffc00 	.word	0xfffffc00

08004270 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d120      	bne.n	80042c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	2b03      	cmp	r3, #3
 800428a:	d858      	bhi.n	800433e <DMA_CheckFifoParam+0xce>
 800428c:	a201      	add	r2, pc, #4	@ (adr r2, 8004294 <DMA_CheckFifoParam+0x24>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042a5 	.word	0x080042a5
 8004298:	080042b7 	.word	0x080042b7
 800429c:	080042a5 	.word	0x080042a5
 80042a0:	0800433f 	.word	0x0800433f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d048      	beq.n	8004342 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042b4:	e045      	b.n	8004342 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042be:	d142      	bne.n	8004346 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042c4:	e03f      	b.n	8004346 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ce:	d123      	bne.n	8004318 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d838      	bhi.n	800434a <DMA_CheckFifoParam+0xda>
 80042d8:	a201      	add	r2, pc, #4	@ (adr r2, 80042e0 <DMA_CheckFifoParam+0x70>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	080042f7 	.word	0x080042f7
 80042e8:	080042f1 	.word	0x080042f1
 80042ec:	08004309 	.word	0x08004309
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
        break;
 80042f4:	e030      	b.n	8004358 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d025      	beq.n	800434e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004306:	e022      	b.n	800434e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004310:	d11f      	bne.n	8004352 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004316:	e01c      	b.n	8004352 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	2b02      	cmp	r3, #2
 800431e:	d902      	bls.n	8004326 <DMA_CheckFifoParam+0xb6>
 8004320:	2b03      	cmp	r3, #3
 8004322:	d003      	beq.n	800432c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004324:	e018      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
        break;
 800432a:	e015      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004330:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
    break;
 800433c:	e00b      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
        break;
 800433e:	bf00      	nop
 8004340:	e00a      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
        break;
 8004342:	bf00      	nop
 8004344:	e008      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
        break;
 8004346:	bf00      	nop
 8004348:	e006      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
        break;
 800434a:	bf00      	nop
 800434c:	e004      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
        break;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
        break;
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
    break;
 8004356:	bf00      	nop
    }
  }

  return status;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop

08004368 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a38      	ldr	r2, [pc, #224]	@ (800445c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d022      	beq.n	80043c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a36      	ldr	r2, [pc, #216]	@ (8004460 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01d      	beq.n	80043c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a35      	ldr	r2, [pc, #212]	@ (8004464 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d018      	beq.n	80043c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a33      	ldr	r2, [pc, #204]	@ (8004468 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a32      	ldr	r2, [pc, #200]	@ (800446c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00e      	beq.n	80043c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a30      	ldr	r2, [pc, #192]	@ (8004470 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d009      	beq.n	80043c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004474 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004478 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d101      	bne.n	80043ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80043ca:	2300      	movs	r3, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01a      	beq.n	8004406 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	3b08      	subs	r3, #8
 80043d8:	4a28      	ldr	r2, [pc, #160]	@ (800447c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4b26      	ldr	r3, [pc, #152]	@ (8004480 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a24      	ldr	r2, [pc, #144]	@ (8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80043f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	2201      	movs	r2, #1
 80043fe:	409a      	lsls	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004404:	e024      	b.n	8004450 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	3b10      	subs	r3, #16
 800440e:	4a1e      	ldr	r2, [pc, #120]	@ (8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4a1c      	ldr	r2, [pc, #112]	@ (800448c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d806      	bhi.n	800442e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4a1b      	ldr	r2, [pc, #108]	@ (8004490 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d902      	bls.n	800442e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3308      	adds	r3, #8
 800442c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4b18      	ldr	r3, [pc, #96]	@ (8004494 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	461a      	mov	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a16      	ldr	r2, [pc, #88]	@ (8004498 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004440:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	2201      	movs	r2, #1
 800444a:	409a      	lsls	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	58025408 	.word	0x58025408
 8004460:	5802541c 	.word	0x5802541c
 8004464:	58025430 	.word	0x58025430
 8004468:	58025444 	.word	0x58025444
 800446c:	58025458 	.word	0x58025458
 8004470:	5802546c 	.word	0x5802546c
 8004474:	58025480 	.word	0x58025480
 8004478:	58025494 	.word	0x58025494
 800447c:	cccccccd 	.word	0xcccccccd
 8004480:	16009600 	.word	0x16009600
 8004484:	58025880 	.word	0x58025880
 8004488:	aaaaaaab 	.word	0xaaaaaaab
 800448c:	400204b8 	.word	0x400204b8
 8004490:	4002040f 	.word	0x4002040f
 8004494:	10008200 	.word	0x10008200
 8004498:	40020880 	.word	0x40020880

0800449c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d04a      	beq.n	8004548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d847      	bhi.n	8004548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a25      	ldr	r2, [pc, #148]	@ (8004554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d022      	beq.n	8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a24      	ldr	r2, [pc, #144]	@ (8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d01d      	beq.n	8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a22      	ldr	r2, [pc, #136]	@ (800455c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d018      	beq.n	8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a21      	ldr	r2, [pc, #132]	@ (8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d013      	beq.n	8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00e      	beq.n	8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d009      	beq.n	8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1c      	ldr	r2, [pc, #112]	@ (800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1b      	ldr	r2, [pc, #108]	@ (8004570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d101      	bne.n	800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800450c:	2300      	movs	r3, #0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4b17      	ldr	r3, [pc, #92]	@ (8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	461a      	mov	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a15      	ldr	r2, [pc, #84]	@ (8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004524:	671a      	str	r2, [r3, #112]	@ 0x70
 8004526:	e009      	b.n	800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4b14      	ldr	r3, [pc, #80]	@ (800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a11      	ldr	r2, [pc, #68]	@ (8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800453a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3b01      	subs	r3, #1
 8004540:	2201      	movs	r2, #1
 8004542:	409a      	lsls	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	58025408 	.word	0x58025408
 8004558:	5802541c 	.word	0x5802541c
 800455c:	58025430 	.word	0x58025430
 8004560:	58025444 	.word	0x58025444
 8004564:	58025458 	.word	0x58025458
 8004568:	5802546c 	.word	0x5802546c
 800456c:	58025480 	.word	0x58025480
 8004570:	58025494 	.word	0x58025494
 8004574:	1600963f 	.word	0x1600963f
 8004578:	58025940 	.word	0x58025940
 800457c:	1000823f 	.word	0x1000823f
 8004580:	40020940 	.word	0x40020940

08004584 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	@ 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8004598:	2308      	movs	r3, #8
 800459a:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800459c:	4b2f      	ldr	r3, [pc, #188]	@ (800465c <HAL_FLASH_Program+0xd8>)
 800459e:	7d1b      	ldrb	r3, [r3, #20]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_FLASH_Program+0x24>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e054      	b.n	8004652 <HAL_FLASH_Program+0xce>
 80045a8:	4b2c      	ldr	r3, [pc, #176]	@ (800465c <HAL_FLASH_Program+0xd8>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045b4:	d316      	bcc.n	80045e4 <HAL_FLASH_Program+0x60>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80045bc:	d212      	bcs.n	80045e4 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80045be:	2301      	movs	r3, #1
 80045c0:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 80045c2:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80045c4:	4b25      	ldr	r3, [pc, #148]	@ (800465c <HAL_FLASH_Program+0xd8>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80045ca:	6979      	ldr	r1, [r7, #20]
 80045cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80045d0:	f000 f88e 	bl	80046f0 <FLASH_WaitForLastOperation>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 80045da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d132      	bne.n	8004648 <HAL_FLASH_Program+0xc4>
 80045e2:	e001      	b.n	80045e8 <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e034      	b.n	8004652 <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80045e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <HAL_FLASH_Program+0xdc>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004660 <HAL_FLASH_Program+0xdc>)
 80045ee:	f043 0302 	orr.w	r3, r3, #2
 80045f2:	60d3      	str	r3, [r2, #12]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80045f4:	f3bf 8f6f 	isb	sy
}
 80045f8:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045fa:	f3bf 8f4f 	dsb	sy
}
 80045fe:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	3304      	adds	r3, #4
 800460c:	623b      	str	r3, [r7, #32]
        src_addr++;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3304      	adds	r3, #4
 8004612:	61fb      	str	r3, [r7, #28]
        row_index--;
 8004614:	7efb      	ldrb	r3, [r7, #27]
 8004616:	3b01      	subs	r3, #1
 8004618:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800461a:	7efb      	ldrb	r3, [r7, #27]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1ef      	bne.n	8004600 <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 8004620:	f3bf 8f6f 	isb	sy
}
 8004624:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8004626:	f3bf 8f4f 	dsb	sy
}
 800462a:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800462c:	6979      	ldr	r1, [r7, #20]
 800462e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004632:	f000 f85d 	bl	80046f0 <FLASH_WaitForLastOperation>
 8004636:	4603      	mov	r3, r0
 8004638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800463c:	4b08      	ldr	r3, [pc, #32]	@ (8004660 <HAL_FLASH_Program+0xdc>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a07      	ldr	r2, [pc, #28]	@ (8004660 <HAL_FLASH_Program+0xdc>)
 8004642:	f023 0302 	bic.w	r3, r3, #2
 8004646:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004648:	4b04      	ldr	r3, [pc, #16]	@ (800465c <HAL_FLASH_Program+0xd8>)
 800464a:	2200      	movs	r2, #0
 800464c:	751a      	strb	r2, [r3, #20]

  return status;
 800464e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004652:	4618      	mov	r0, r3
 8004654:	3728      	adds	r7, #40	@ 0x28
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	24000dd8 	.word	0x24000dd8
 8004660:	52002000 	.word	0x52002000

08004664 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8004668:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <HAL_FLASH_Unlock+0x38>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8004674:	4b09      	ldr	r3, [pc, #36]	@ (800469c <HAL_FLASH_Unlock+0x38>)
 8004676:	4a0a      	ldr	r2, [pc, #40]	@ (80046a0 <HAL_FLASH_Unlock+0x3c>)
 8004678:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800467a:	4b08      	ldr	r3, [pc, #32]	@ (800469c <HAL_FLASH_Unlock+0x38>)
 800467c:	4a09      	ldr	r2, [pc, #36]	@ (80046a4 <HAL_FLASH_Unlock+0x40>)
 800467e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <HAL_FLASH_Unlock+0x38>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	52002000 	.word	0x52002000
 80046a0:	45670123 	.word	0x45670123
 80046a4:	cdef89ab 	.word	0xcdef89ab

080046a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80046ac:	4b09      	ldr	r3, [pc, #36]	@ (80046d4 <HAL_FLASH_Lock+0x2c>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4a08      	ldr	r2, [pc, #32]	@ (80046d4 <HAL_FLASH_Lock+0x2c>)
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80046b8:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <HAL_FLASH_Lock+0x2c>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	52002000 	.word	0x52002000

080046d8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
  */

uint32_t HAL_FLASH_GetError(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80046dc:	4b03      	ldr	r3, [pc, #12]	@ (80046ec <HAL_FLASH_GetError+0x14>)
 80046de:	699b      	ldr	r3, [r3, #24]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	24000dd8 	.word	0x24000dd8

080046f0 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80046fa:	2304      	movs	r3, #4
 80046fc:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004702:	f7fc fff7 	bl	80016f4 <HAL_GetTick>
 8004706:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8004708:	e010      	b.n	800472c <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004710:	d00c      	beq.n	800472c <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004712:	f7fc ffef 	bl	80016f4 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <FLASH_WaitForLastOperation+0x38>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e02d      	b.n	8004788 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800472c:	4b18      	ldr	r3, [pc, #96]	@ (8004790 <FLASH_WaitForLastOperation+0xa0>)
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	d0e7      	beq.n	800470a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d104      	bne.n	800474a <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8004740:	4b13      	ldr	r3, [pc, #76]	@ (8004790 <FLASH_WaitForLastOperation+0xa0>)
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	4b13      	ldr	r3, [pc, #76]	@ (8004794 <FLASH_WaitForLastOperation+0xa4>)
 8004746:	4013      	ands	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8004754:	4b10      	ldr	r3, [pc, #64]	@ (8004798 <FLASH_WaitForLastOperation+0xa8>)
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	4a0e      	ldr	r2, [pc, #56]	@ (8004798 <FLASH_WaitForLastOperation+0xa8>)
 800475e:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8004760:	4a0b      	ldr	r2, [pc, #44]	@ (8004790 <FLASH_WaitForLastOperation+0xa0>)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e00e      	b.n	8004788 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10a      	bne.n	8004786 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8004770:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <FLASH_WaitForLastOperation+0xa0>)
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800477c:	d103      	bne.n	8004786 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800477e:	4b04      	ldr	r3, [pc, #16]	@ (8004790 <FLASH_WaitForLastOperation+0xa0>)
 8004780:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004784:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	52002000 	.word	0x52002000
 8004794:	17ee0000 	.word	0x17ee0000
 8004798:	24000dd8 	.word	0x24000dd8

0800479c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047aa:	4b3f      	ldr	r3, [pc, #252]	@ (80048a8 <HAL_FLASHEx_Erase+0x10c>)
 80047ac:	7d1b      	ldrb	r3, [r3, #20]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_FLASHEx_Erase+0x1a>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e074      	b.n	80048a0 <HAL_FLASHEx_Erase+0x104>
 80047b6:	4b3c      	ldr	r3, [pc, #240]	@ (80048a8 <HAL_FLASHEx_Erase+0x10c>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047bc:	4b3a      	ldr	r3, [pc, #232]	@ (80048a8 <HAL_FLASHEx_Erase+0x10c>)
 80047be:	2200      	movs	r2, #0
 80047c0:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80047ce:	2101      	movs	r1, #1
 80047d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80047d4:	f7ff ff8c 	bl	80046f0 <FLASH_WaitForLastOperation>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d157      	bne.n	8004898 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d11e      	bne.n	800482e <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f000 f85a 	bl	80048b4 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d045      	beq.n	8004898 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800480c:	2101      	movs	r1, #1
 800480e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004812:	f7ff ff6d 	bl	80046f0 <FLASH_WaitForLastOperation>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8004820:	4b22      	ldr	r3, [pc, #136]	@ (80048ac <HAL_FLASHEx_Erase+0x110>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a21      	ldr	r2, [pc, #132]	@ (80048ac <HAL_FLASHEx_Erase+0x110>)
 8004826:	f023 0308 	bic.w	r3, r3, #8
 800482a:	60d3      	str	r3, [r2, #12]
 800482c:	e034      	b.n	8004898 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004834:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	e024      	b.n	8004888 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	461a      	mov	r2, r3
 8004848:	68b8      	ldr	r0, [r7, #8]
 800484a:	f000 f857 	bl	80048fc <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00c      	beq.n	8004874 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800485a:	2101      	movs	r1, #1
 800485c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004860:	f7ff ff46 	bl	80046f0 <FLASH_WaitForLastOperation>
 8004864:	4603      	mov	r3, r0
 8004866:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8004868:	4b10      	ldr	r3, [pc, #64]	@ (80048ac <HAL_FLASHEx_Erase+0x110>)
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	490f      	ldr	r1, [pc, #60]	@ (80048ac <HAL_FLASHEx_Erase+0x110>)
 800486e:	4b10      	ldr	r3, [pc, #64]	@ (80048b0 <HAL_FLASHEx_Erase+0x114>)
 8004870:	4013      	ands	r3, r2
 8004872:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	601a      	str	r2, [r3, #0]
          break;
 8004880:	e00a      	b.n	8004898 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	3301      	adds	r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4413      	add	r3, r2
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	429a      	cmp	r2, r3
 8004896:	d3d2      	bcc.n	800483e <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004898:	4b03      	ldr	r3, [pc, #12]	@ (80048a8 <HAL_FLASHEx_Erase+0x10c>)
 800489a:	2200      	movs	r2, #0
 800489c:	751a      	strb	r2, [r3, #20]

  return status;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	24000dd8 	.word	0x24000dd8
 80048ac:	52002000 	.word	0x52002000
 80048b0:	fffff8fb 	.word	0xfffff8fb

080048b4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d011      	beq.n	80048ec <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80048c8:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <FLASH_MassErase+0x44>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4a0a      	ldr	r2, [pc, #40]	@ (80048f8 <FLASH_MassErase+0x44>)
 80048ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80048d2:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 80048d4:	4b08      	ldr	r3, [pc, #32]	@ (80048f8 <FLASH_MassErase+0x44>)
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	4907      	ldr	r1, [pc, #28]	@ (80048f8 <FLASH_MassErase+0x44>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 80048e0:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <FLASH_MassErase+0x44>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4a04      	ldr	r2, [pc, #16]	@ (80048f8 <FLASH_MassErase+0x44>)
 80048e6:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 80048ea:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	52002000 	.word	0x52002000

080048fc <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d010      	beq.n	8004934 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8004912:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <FLASH_Erase_Sector+0x44>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	4a0a      	ldr	r2, [pc, #40]	@ (8004940 <FLASH_Erase_Sector+0x44>)
 8004918:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800491c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800491e:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <FLASH_Erase_Sector+0x44>)
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	0219      	lsls	r1, r3, #8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	430b      	orrs	r3, r1
 800492a:	4313      	orrs	r3, r2
 800492c:	4a04      	ldr	r2, [pc, #16]	@ (8004940 <FLASH_Erase_Sector+0x44>)
 800492e:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8004932:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	52002000 	.word	0x52002000

08004944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004944:	b480      	push	{r7}
 8004946:	b089      	sub	sp, #36	@ 0x24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004952:	4b86      	ldr	r3, [pc, #536]	@ (8004b6c <HAL_GPIO_Init+0x228>)
 8004954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004956:	e18c      	b.n	8004c72 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	2101      	movs	r1, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	4013      	ands	r3, r2
 8004966:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 817e 	beq.w	8004c6c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d005      	beq.n	8004988 <HAL_GPIO_Init+0x44>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d130      	bne.n	80049ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	2203      	movs	r2, #3
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	43db      	mvns	r3, r3
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4013      	ands	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049be:	2201      	movs	r2, #1
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 0201 	and.w	r2, r3, #1
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d017      	beq.n	8004a26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	2203      	movs	r2, #3
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d123      	bne.n	8004a7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	08da      	lsrs	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3208      	adds	r2, #8
 8004a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	220f      	movs	r2, #15
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4013      	ands	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	08da      	lsrs	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3208      	adds	r2, #8
 8004a74:	69b9      	ldr	r1, [r7, #24]
 8004a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	2203      	movs	r2, #3
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 0203 	and.w	r2, r3, #3
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80d8 	beq.w	8004c6c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004abc:	4b2c      	ldr	r3, [pc, #176]	@ (8004b70 <HAL_GPIO_Init+0x22c>)
 8004abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8004b70 <HAL_GPIO_Init+0x22c>)
 8004ac4:	f043 0302 	orr.w	r3, r3, #2
 8004ac8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004acc:	4b28      	ldr	r3, [pc, #160]	@ (8004b70 <HAL_GPIO_Init+0x22c>)
 8004ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ada:	4a26      	ldr	r2, [pc, #152]	@ (8004b74 <HAL_GPIO_Init+0x230>)
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	089b      	lsrs	r3, r3, #2
 8004ae0:	3302      	adds	r3, #2
 8004ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	220f      	movs	r2, #15
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4013      	ands	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a1d      	ldr	r2, [pc, #116]	@ (8004b78 <HAL_GPIO_Init+0x234>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d04a      	beq.n	8004b9c <HAL_GPIO_Init+0x258>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	@ (8004b7c <HAL_GPIO_Init+0x238>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d02b      	beq.n	8004b66 <HAL_GPIO_Init+0x222>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a1b      	ldr	r2, [pc, #108]	@ (8004b80 <HAL_GPIO_Init+0x23c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d025      	beq.n	8004b62 <HAL_GPIO_Init+0x21e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <HAL_GPIO_Init+0x240>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d01f      	beq.n	8004b5e <HAL_GPIO_Init+0x21a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a19      	ldr	r2, [pc, #100]	@ (8004b88 <HAL_GPIO_Init+0x244>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d019      	beq.n	8004b5a <HAL_GPIO_Init+0x216>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a18      	ldr	r2, [pc, #96]	@ (8004b8c <HAL_GPIO_Init+0x248>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <HAL_GPIO_Init+0x212>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a17      	ldr	r2, [pc, #92]	@ (8004b90 <HAL_GPIO_Init+0x24c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00d      	beq.n	8004b52 <HAL_GPIO_Init+0x20e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a16      	ldr	r2, [pc, #88]	@ (8004b94 <HAL_GPIO_Init+0x250>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d007      	beq.n	8004b4e <HAL_GPIO_Init+0x20a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a15      	ldr	r2, [pc, #84]	@ (8004b98 <HAL_GPIO_Init+0x254>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d101      	bne.n	8004b4a <HAL_GPIO_Init+0x206>
 8004b46:	2309      	movs	r3, #9
 8004b48:	e029      	b.n	8004b9e <HAL_GPIO_Init+0x25a>
 8004b4a:	230a      	movs	r3, #10
 8004b4c:	e027      	b.n	8004b9e <HAL_GPIO_Init+0x25a>
 8004b4e:	2307      	movs	r3, #7
 8004b50:	e025      	b.n	8004b9e <HAL_GPIO_Init+0x25a>
 8004b52:	2306      	movs	r3, #6
 8004b54:	e023      	b.n	8004b9e <HAL_GPIO_Init+0x25a>
 8004b56:	2305      	movs	r3, #5
 8004b58:	e021      	b.n	8004b9e <HAL_GPIO_Init+0x25a>
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	e01f      	b.n	8004b9e <HAL_GPIO_Init+0x25a>
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e01d      	b.n	8004b9e <HAL_GPIO_Init+0x25a>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e01b      	b.n	8004b9e <HAL_GPIO_Init+0x25a>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e019      	b.n	8004b9e <HAL_GPIO_Init+0x25a>
 8004b6a:	bf00      	nop
 8004b6c:	58000080 	.word	0x58000080
 8004b70:	58024400 	.word	0x58024400
 8004b74:	58000400 	.word	0x58000400
 8004b78:	58020000 	.word	0x58020000
 8004b7c:	58020400 	.word	0x58020400
 8004b80:	58020800 	.word	0x58020800
 8004b84:	58020c00 	.word	0x58020c00
 8004b88:	58021000 	.word	0x58021000
 8004b8c:	58021400 	.word	0x58021400
 8004b90:	58021800 	.word	0x58021800
 8004b94:	58021c00 	.word	0x58021c00
 8004b98:	58022400 	.word	0x58022400
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	f002 0203 	and.w	r2, r2, #3
 8004ba4:	0092      	lsls	r2, r2, #2
 8004ba6:	4093      	lsls	r3, r2
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bae:	4938      	ldr	r1, [pc, #224]	@ (8004c90 <HAL_GPIO_Init+0x34c>)
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004be2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f47f ae6b 	bne.w	8004958 <HAL_GPIO_Init+0x14>
  }
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	3724      	adds	r7, #36	@ 0x24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	58000400 	.word	0x58000400

08004c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	807b      	strh	r3, [r7, #2]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ca4:	787b      	ldrb	r3, [r7, #1]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004caa:	887a      	ldrh	r2, [r7, #2]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004cb0:	e003      	b.n	8004cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cb2:	887b      	ldrh	r3, [r7, #2]
 8004cb4:	041a      	lsls	r2, r3, #16
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	619a      	str	r2, [r3, #24]
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004cd0:	4b19      	ldr	r3, [pc, #100]	@ (8004d38 <HAL_PWREx_ConfigSupply+0x70>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d00a      	beq.n	8004cf2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004cdc:	4b16      	ldr	r3, [pc, #88]	@ (8004d38 <HAL_PWREx_ConfigSupply+0x70>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d001      	beq.n	8004cee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e01f      	b.n	8004d2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e01d      	b.n	8004d2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004cf2:	4b11      	ldr	r3, [pc, #68]	@ (8004d38 <HAL_PWREx_ConfigSupply+0x70>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f023 0207 	bic.w	r2, r3, #7
 8004cfa:	490f      	ldr	r1, [pc, #60]	@ (8004d38 <HAL_PWREx_ConfigSupply+0x70>)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004d02:	f7fc fcf7 	bl	80016f4 <HAL_GetTick>
 8004d06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d08:	e009      	b.n	8004d1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d0a:	f7fc fcf3 	bl	80016f4 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d18:	d901      	bls.n	8004d1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e007      	b.n	8004d2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d1e:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <HAL_PWREx_ConfigSupply+0x70>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d2a:	d1ee      	bne.n	8004d0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	58024800 	.word	0x58024800

08004d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08c      	sub	sp, #48	@ 0x30
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e3c8      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 8087 	beq.w	8004e6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5c:	4b88      	ldr	r3, [pc, #544]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d66:	4b86      	ldr	r3, [pc, #536]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d007      	beq.n	8004d82 <HAL_RCC_OscConfig+0x46>
 8004d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d74:	2b18      	cmp	r3, #24
 8004d76:	d110      	bne.n	8004d9a <HAL_RCC_OscConfig+0x5e>
 8004d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d10b      	bne.n	8004d9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d82:	4b7f      	ldr	r3, [pc, #508]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d06c      	beq.n	8004e68 <HAL_RCC_OscConfig+0x12c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d168      	bne.n	8004e68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e3a2      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da2:	d106      	bne.n	8004db2 <HAL_RCC_OscConfig+0x76>
 8004da4:	4b76      	ldr	r3, [pc, #472]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a75      	ldr	r2, [pc, #468]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	e02e      	b.n	8004e10 <HAL_RCC_OscConfig+0xd4>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x98>
 8004dba:	4b71      	ldr	r3, [pc, #452]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a70      	ldr	r2, [pc, #448]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	4b6e      	ldr	r3, [pc, #440]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a6d      	ldr	r2, [pc, #436]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004dcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e01d      	b.n	8004e10 <HAL_RCC_OscConfig+0xd4>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ddc:	d10c      	bne.n	8004df8 <HAL_RCC_OscConfig+0xbc>
 8004dde:	4b68      	ldr	r3, [pc, #416]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a67      	ldr	r2, [pc, #412]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	4b65      	ldr	r3, [pc, #404]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a64      	ldr	r2, [pc, #400]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e00b      	b.n	8004e10 <HAL_RCC_OscConfig+0xd4>
 8004df8:	4b61      	ldr	r3, [pc, #388]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a60      	ldr	r2, [pc, #384]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	4b5e      	ldr	r3, [pc, #376]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a5d      	ldr	r2, [pc, #372]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d013      	beq.n	8004e40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fc fc6c 	bl	80016f4 <HAL_GetTick>
 8004e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e20:	f7fc fc68 	bl	80016f4 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b64      	cmp	r3, #100	@ 0x64
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e356      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e32:	4b53      	ldr	r3, [pc, #332]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0xe4>
 8004e3e:	e014      	b.n	8004e6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fc fc58 	bl	80016f4 <HAL_GetTick>
 8004e44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e48:	f7fc fc54 	bl	80016f4 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	@ 0x64
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e342      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e5a:	4b49      	ldr	r3, [pc, #292]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x10c>
 8004e66:	e000      	b.n	8004e6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 808c 	beq.w	8004f90 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e78:	4b41      	ldr	r3, [pc, #260]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e82:	4b3f      	ldr	r3, [pc, #252]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_RCC_OscConfig+0x162>
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	2b18      	cmp	r3, #24
 8004e92:	d137      	bne.n	8004f04 <HAL_RCC_OscConfig+0x1c8>
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d132      	bne.n	8004f04 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9e:	4b38      	ldr	r3, [pc, #224]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x17a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e314      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004eb6:	4b32      	ldr	r3, [pc, #200]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 0219 	bic.w	r2, r3, #25
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	492f      	ldr	r1, [pc, #188]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fc fc14 	bl	80016f4 <HAL_GetTick>
 8004ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed0:	f7fc fc10 	bl	80016f4 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e2fe      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ee2:	4b27      	ldr	r3, [pc, #156]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eee:	4b24      	ldr	r3, [pc, #144]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	061b      	lsls	r3, r3, #24
 8004efc:	4920      	ldr	r1, [pc, #128]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f02:	e045      	b.n	8004f90 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d026      	beq.n	8004f5a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 0219 	bic.w	r2, r3, #25
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4919      	ldr	r1, [pc, #100]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7fc fbe9 	bl	80016f4 <HAL_GetTick>
 8004f22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f26:	f7fc fbe5 	bl	80016f4 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e2d3      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f38:	4b11      	ldr	r3, [pc, #68]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f44:	4b0e      	ldr	r3, [pc, #56]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	061b      	lsls	r3, r3, #24
 8004f52:	490b      	ldr	r1, [pc, #44]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
 8004f58:	e01a      	b.n	8004f90 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f5a:	4b09      	ldr	r3, [pc, #36]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a08      	ldr	r2, [pc, #32]	@ (8004f80 <HAL_RCC_OscConfig+0x244>)
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7fc fbc5 	bl	80016f4 <HAL_GetTick>
 8004f6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f6c:	e00a      	b.n	8004f84 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6e:	f7fc fbc1 	bl	80016f4 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d903      	bls.n	8004f84 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e2af      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
 8004f80:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f84:	4b96      	ldr	r3, [pc, #600]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ee      	bne.n	8004f6e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d06a      	beq.n	8005072 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9c:	4b90      	ldr	r3, [pc, #576]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fa4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fa6:	4b8e      	ldr	r3, [pc, #568]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004faa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d007      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x286>
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b18      	cmp	r3, #24
 8004fb6:	d11b      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x2b4>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d116      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fc2:	4b87      	ldr	r3, [pc, #540]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_RCC_OscConfig+0x29e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	2b80      	cmp	r3, #128	@ 0x80
 8004fd4:	d001      	beq.n	8004fda <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e282      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fda:	4b81      	ldr	r3, [pc, #516]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	061b      	lsls	r3, r3, #24
 8004fe8:	497d      	ldr	r1, [pc, #500]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fee:	e040      	b.n	8005072 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d023      	beq.n	8005040 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ff8:	4b79      	ldr	r3, [pc, #484]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a78      	ldr	r2, [pc, #480]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fc fb76 	bl	80016f4 <HAL_GetTick>
 8005008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800500c:	f7fc fb72 	bl	80016f4 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e260      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800501e:	4b70      	ldr	r3, [pc, #448]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800502a:	4b6d      	ldr	r3, [pc, #436]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	061b      	lsls	r3, r3, #24
 8005038:	4969      	ldr	r1, [pc, #420]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	60cb      	str	r3, [r1, #12]
 800503e:	e018      	b.n	8005072 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005040:	4b67      	ldr	r3, [pc, #412]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a66      	ldr	r2, [pc, #408]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8005046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800504a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fc fb52 	bl	80016f4 <HAL_GetTick>
 8005050:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005054:	f7fc fb4e 	bl	80016f4 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e23c      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005066:	4b5e      	ldr	r3, [pc, #376]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d036      	beq.n	80050ec <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d019      	beq.n	80050ba <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005086:	4b56      	ldr	r3, [pc, #344]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8005088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508a:	4a55      	ldr	r2, [pc, #340]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005092:	f7fc fb2f 	bl	80016f4 <HAL_GetTick>
 8005096:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800509a:	f7fc fb2b 	bl	80016f4 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e219      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050ac:	4b4c      	ldr	r3, [pc, #304]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 80050ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x35e>
 80050b8:	e018      	b.n	80050ec <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ba:	4b49      	ldr	r3, [pc, #292]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050be:	4a48      	ldr	r2, [pc, #288]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 80050c0:	f023 0301 	bic.w	r3, r3, #1
 80050c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c6:	f7fc fb15 	bl	80016f4 <HAL_GetTick>
 80050ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ce:	f7fc fb11 	bl	80016f4 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e1ff      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050e0:	4b3f      	ldr	r3, [pc, #252]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 80050e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1f0      	bne.n	80050ce <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d036      	beq.n	8005166 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d019      	beq.n	8005134 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005100:	4b37      	ldr	r3, [pc, #220]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a36      	ldr	r2, [pc, #216]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8005106:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800510a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800510c:	f7fc faf2 	bl	80016f4 <HAL_GetTick>
 8005110:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005114:	f7fc faee 	bl	80016f4 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e1dc      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005126:	4b2e      	ldr	r3, [pc, #184]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x3d8>
 8005132:	e018      	b.n	8005166 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005134:	4b2a      	ldr	r3, [pc, #168]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a29      	ldr	r2, [pc, #164]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 800513a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800513e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005140:	f7fc fad8 	bl	80016f4 <HAL_GetTick>
 8005144:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005148:	f7fc fad4 	bl	80016f4 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e1c2      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800515a:	4b21      	ldr	r3, [pc, #132]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8086 	beq.w	8005280 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005174:	4b1b      	ldr	r3, [pc, #108]	@ (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1a      	ldr	r2, [pc, #104]	@ (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 800517a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800517e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005180:	f7fc fab8 	bl	80016f4 <HAL_GetTick>
 8005184:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005188:	f7fc fab4 	bl	80016f4 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	@ 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e1a2      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800519a:	4b12      	ldr	r3, [pc, #72]	@ (80051e4 <HAL_RCC_OscConfig+0x4a8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d106      	bne.n	80051bc <HAL_RCC_OscConfig+0x480>
 80051ae:	4b0c      	ldr	r3, [pc, #48]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b2:	4a0b      	ldr	r2, [pc, #44]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ba:	e032      	b.n	8005222 <HAL_RCC_OscConfig+0x4e6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d111      	bne.n	80051e8 <HAL_RCC_OscConfig+0x4ac>
 80051c4:	4b06      	ldr	r3, [pc, #24]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c8:	4a05      	ldr	r2, [pc, #20]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d0:	4b03      	ldr	r3, [pc, #12]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 80051d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d4:	4a02      	ldr	r2, [pc, #8]	@ (80051e0 <HAL_RCC_OscConfig+0x4a4>)
 80051d6:	f023 0304 	bic.w	r3, r3, #4
 80051da:	6713      	str	r3, [r2, #112]	@ 0x70
 80051dc:	e021      	b.n	8005222 <HAL_RCC_OscConfig+0x4e6>
 80051de:	bf00      	nop
 80051e0:	58024400 	.word	0x58024400
 80051e4:	58024800 	.word	0x58024800
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	d10c      	bne.n	800520a <HAL_RCC_OscConfig+0x4ce>
 80051f0:	4b83      	ldr	r3, [pc, #524]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f4:	4a82      	ldr	r2, [pc, #520]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80051f6:	f043 0304 	orr.w	r3, r3, #4
 80051fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80051fc:	4b80      	ldr	r3, [pc, #512]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80051fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005200:	4a7f      	ldr	r2, [pc, #508]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6713      	str	r3, [r2, #112]	@ 0x70
 8005208:	e00b      	b.n	8005222 <HAL_RCC_OscConfig+0x4e6>
 800520a:	4b7d      	ldr	r3, [pc, #500]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520e:	4a7c      	ldr	r2, [pc, #496]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	6713      	str	r3, [r2, #112]	@ 0x70
 8005216:	4b7a      	ldr	r3, [pc, #488]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521a:	4a79      	ldr	r2, [pc, #484]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 800521c:	f023 0304 	bic.w	r3, r3, #4
 8005220:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d015      	beq.n	8005256 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522a:	f7fc fa63 	bl	80016f4 <HAL_GetTick>
 800522e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005230:	e00a      	b.n	8005248 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005232:	f7fc fa5f 	bl	80016f4 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005240:	4293      	cmp	r3, r2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e14b      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005248:	4b6d      	ldr	r3, [pc, #436]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 800524a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ee      	beq.n	8005232 <HAL_RCC_OscConfig+0x4f6>
 8005254:	e014      	b.n	8005280 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005256:	f7fc fa4d 	bl	80016f4 <HAL_GetTick>
 800525a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800525c:	e00a      	b.n	8005274 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525e:	f7fc fa49 	bl	80016f4 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e135      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005274:	4b62      	ldr	r3, [pc, #392]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1ee      	bne.n	800525e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 812a 	beq.w	80054de <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800528a:	4b5d      	ldr	r3, [pc, #372]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005292:	2b18      	cmp	r3, #24
 8005294:	f000 80ba 	beq.w	800540c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	2b02      	cmp	r3, #2
 800529e:	f040 8095 	bne.w	80053cc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a2:	4b57      	ldr	r3, [pc, #348]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a56      	ldr	r2, [pc, #344]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80052a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fc fa21 	bl	80016f4 <HAL_GetTick>
 80052b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b6:	f7fc fa1d 	bl	80016f4 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e10b      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f0      	bne.n	80052b6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80052d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052d8:	4b4a      	ldr	r3, [pc, #296]	@ (8005404 <HAL_RCC_OscConfig+0x6c8>)
 80052da:	4013      	ands	r3, r2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80052e4:	0112      	lsls	r2, r2, #4
 80052e6:	430a      	orrs	r2, r1
 80052e8:	4945      	ldr	r1, [pc, #276]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	628b      	str	r3, [r1, #40]	@ 0x28
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	3b01      	subs	r3, #1
 80052f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052fc:	3b01      	subs	r3, #1
 80052fe:	025b      	lsls	r3, r3, #9
 8005300:	b29b      	uxth	r3, r3
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	3b01      	subs	r3, #1
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005316:	3b01      	subs	r3, #1
 8005318:	061b      	lsls	r3, r3, #24
 800531a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800531e:	4938      	ldr	r1, [pc, #224]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005320:	4313      	orrs	r3, r2
 8005322:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005324:	4b36      	ldr	r3, [pc, #216]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005328:	4a35      	ldr	r2, [pc, #212]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005330:	4b33      	ldr	r3, [pc, #204]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005334:	4b34      	ldr	r3, [pc, #208]	@ (8005408 <HAL_RCC_OscConfig+0x6cc>)
 8005336:	4013      	ands	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800533c:	00d2      	lsls	r2, r2, #3
 800533e:	4930      	ldr	r1, [pc, #192]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005340:	4313      	orrs	r3, r2
 8005342:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005344:	4b2e      	ldr	r3, [pc, #184]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005348:	f023 020c 	bic.w	r2, r3, #12
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005350:	492b      	ldr	r1, [pc, #172]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005352:	4313      	orrs	r3, r2
 8005354:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005356:	4b2a      	ldr	r3, [pc, #168]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	f023 0202 	bic.w	r2, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005362:	4927      	ldr	r1, [pc, #156]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005364:	4313      	orrs	r3, r2
 8005366:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005368:	4b25      	ldr	r3, [pc, #148]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 800536a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536c:	4a24      	ldr	r2, [pc, #144]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 800536e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005374:	4b22      	ldr	r3, [pc, #136]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	4a21      	ldr	r2, [pc, #132]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 800537a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800537e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005380:	4b1f      	ldr	r3, [pc, #124]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	4a1e      	ldr	r2, [pc, #120]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800538a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800538c:	4b1c      	ldr	r3, [pc, #112]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	4a1b      	ldr	r2, [pc, #108]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 8005392:	f043 0301 	orr.w	r3, r3, #1
 8005396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005398:	4b19      	ldr	r3, [pc, #100]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a18      	ldr	r2, [pc, #96]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 800539e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fc f9a6 	bl	80016f4 <HAL_GetTick>
 80053a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ac:	f7fc f9a2 	bl	80016f4 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e090      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053be:	4b10      	ldr	r3, [pc, #64]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f0      	beq.n	80053ac <HAL_RCC_OscConfig+0x670>
 80053ca:	e088      	b.n	80054de <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80053d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fc f98c 	bl	80016f4 <HAL_GetTick>
 80053dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e0:	f7fc f988 	bl	80016f4 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e076      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053f2:	4b03      	ldr	r3, [pc, #12]	@ (8005400 <HAL_RCC_OscConfig+0x6c4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0x6a4>
 80053fe:	e06e      	b.n	80054de <HAL_RCC_OscConfig+0x7a2>
 8005400:	58024400 	.word	0x58024400
 8005404:	fffffc0c 	.word	0xfffffc0c
 8005408:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800540c:	4b36      	ldr	r3, [pc, #216]	@ (80054e8 <HAL_RCC_OscConfig+0x7ac>)
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005412:	4b35      	ldr	r3, [pc, #212]	@ (80054e8 <HAL_RCC_OscConfig+0x7ac>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005416:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541c:	2b01      	cmp	r3, #1
 800541e:	d031      	beq.n	8005484 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f003 0203 	and.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d12a      	bne.n	8005484 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	091b      	lsrs	r3, r3, #4
 8005432:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d122      	bne.n	8005484 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005448:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d11a      	bne.n	8005484 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	0a5b      	lsrs	r3, r3, #9
 8005452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d111      	bne.n	8005484 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d108      	bne.n	8005484 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	0e1b      	lsrs	r3, r3, #24
 8005476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005480:	429a      	cmp	r2, r3
 8005482:	d001      	beq.n	8005488 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e02b      	b.n	80054e0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005488:	4b17      	ldr	r3, [pc, #92]	@ (80054e8 <HAL_RCC_OscConfig+0x7ac>)
 800548a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800548c:	08db      	lsrs	r3, r3, #3
 800548e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005492:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	429a      	cmp	r2, r3
 800549c:	d01f      	beq.n	80054de <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800549e:	4b12      	ldr	r3, [pc, #72]	@ (80054e8 <HAL_RCC_OscConfig+0x7ac>)
 80054a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a2:	4a11      	ldr	r2, [pc, #68]	@ (80054e8 <HAL_RCC_OscConfig+0x7ac>)
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054aa:	f7fc f923 	bl	80016f4 <HAL_GetTick>
 80054ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80054b0:	bf00      	nop
 80054b2:	f7fc f91f 	bl	80016f4 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d0f9      	beq.n	80054b2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054be:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <HAL_RCC_OscConfig+0x7ac>)
 80054c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054c2:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <HAL_RCC_OscConfig+0x7b0>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80054ca:	00d2      	lsls	r2, r2, #3
 80054cc:	4906      	ldr	r1, [pc, #24]	@ (80054e8 <HAL_RCC_OscConfig+0x7ac>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80054d2:	4b05      	ldr	r3, [pc, #20]	@ (80054e8 <HAL_RCC_OscConfig+0x7ac>)
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	4a04      	ldr	r2, [pc, #16]	@ (80054e8 <HAL_RCC_OscConfig+0x7ac>)
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3730      	adds	r7, #48	@ 0x30
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	58024400 	.word	0x58024400
 80054ec:	ffff0007 	.word	0xffff0007

080054f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e19c      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005504:	4b8a      	ldr	r3, [pc, #552]	@ (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d910      	bls.n	8005534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005512:	4b87      	ldr	r3, [pc, #540]	@ (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f023 020f 	bic.w	r2, r3, #15
 800551a:	4985      	ldr	r1, [pc, #532]	@ (8005730 <HAL_RCC_ClockConfig+0x240>)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	4313      	orrs	r3, r2
 8005520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005522:	4b83      	ldr	r3, [pc, #524]	@ (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e184      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	4b7b      	ldr	r3, [pc, #492]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800554c:	429a      	cmp	r2, r3
 800554e:	d908      	bls.n	8005562 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005550:	4b78      	ldr	r3, [pc, #480]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	4975      	ldr	r1, [pc, #468]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 800555e:	4313      	orrs	r3, r2
 8005560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695a      	ldr	r2, [r3, #20]
 8005572:	4b70      	ldr	r3, [pc, #448]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800557a:	429a      	cmp	r2, r3
 800557c:	d908      	bls.n	8005590 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800557e:	4b6d      	ldr	r3, [pc, #436]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	496a      	ldr	r1, [pc, #424]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 800558c:	4313      	orrs	r3, r2
 800558e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	4b64      	ldr	r3, [pc, #400]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d908      	bls.n	80055be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055ac:	4b61      	ldr	r3, [pc, #388]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	495e      	ldr	r1, [pc, #376]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d010      	beq.n	80055ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	4b59      	ldr	r3, [pc, #356]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d908      	bls.n	80055ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055da:	4b56      	ldr	r3, [pc, #344]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	4953      	ldr	r1, [pc, #332]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d010      	beq.n	800561a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	429a      	cmp	r2, r3
 8005606:	d908      	bls.n	800561a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005608:	4b4a      	ldr	r3, [pc, #296]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f023 020f 	bic.w	r2, r3, #15
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4947      	ldr	r1, [pc, #284]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005616:	4313      	orrs	r3, r2
 8005618:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d055      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005626:	4b43      	ldr	r3, [pc, #268]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	4940      	ldr	r1, [pc, #256]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005634:	4313      	orrs	r3, r2
 8005636:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d107      	bne.n	8005650 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005640:	4b3c      	ldr	r3, [pc, #240]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d121      	bne.n	8005690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0f6      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b03      	cmp	r3, #3
 8005656:	d107      	bne.n	8005668 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005658:	4b36      	ldr	r3, [pc, #216]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d115      	bne.n	8005690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e0ea      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005670:	4b30      	ldr	r3, [pc, #192]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0de      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005680:	4b2c      	ldr	r3, [pc, #176]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0d6      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005690:	4b28      	ldr	r3, [pc, #160]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f023 0207 	bic.w	r2, r3, #7
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4925      	ldr	r1, [pc, #148]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a2:	f7fc f827 	bl	80016f4 <HAL_GetTick>
 80056a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a8:	e00a      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056aa:	f7fc f823 	bl	80016f4 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e0be      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d1eb      	bne.n	80056aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d010      	beq.n	8005700 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	4b14      	ldr	r3, [pc, #80]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d208      	bcs.n	8005700 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ee:	4b11      	ldr	r3, [pc, #68]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f023 020f 	bic.w	r2, r3, #15
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	490e      	ldr	r1, [pc, #56]	@ (8005734 <HAL_RCC_ClockConfig+0x244>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005700:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d214      	bcs.n	8005738 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4b08      	ldr	r3, [pc, #32]	@ (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 020f 	bic.w	r2, r3, #15
 8005716:	4906      	ldr	r1, [pc, #24]	@ (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b04      	ldr	r3, [pc, #16]	@ (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d005      	beq.n	8005738 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e086      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
 8005730:	52002000 	.word	0x52002000
 8005734:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d010      	beq.n	8005766 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	4b3f      	ldr	r3, [pc, #252]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005750:	429a      	cmp	r2, r3
 8005752:	d208      	bcs.n	8005766 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005754:	4b3c      	ldr	r3, [pc, #240]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	4939      	ldr	r1, [pc, #228]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005762:	4313      	orrs	r3, r2
 8005764:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d010      	beq.n	8005794 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	4b34      	ldr	r3, [pc, #208]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800577e:	429a      	cmp	r2, r3
 8005780:	d208      	bcs.n	8005794 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005782:	4b31      	ldr	r3, [pc, #196]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	492e      	ldr	r1, [pc, #184]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005790:	4313      	orrs	r3, r2
 8005792:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b00      	cmp	r3, #0
 800579e:	d010      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	4b28      	ldr	r3, [pc, #160]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d208      	bcs.n	80057c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057b0:	4b25      	ldr	r3, [pc, #148]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	4922      	ldr	r1, [pc, #136]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d010      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057da:	429a      	cmp	r2, r3
 80057dc:	d208      	bcs.n	80057f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057de:	4b1a      	ldr	r3, [pc, #104]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	4917      	ldr	r1, [pc, #92]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80057f0:	f000 f834 	bl	800585c <HAL_RCC_GetSysClockFreq>
 80057f4:	4602      	mov	r2, r0
 80057f6:	4b14      	ldr	r3, [pc, #80]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	0a1b      	lsrs	r3, r3, #8
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	4912      	ldr	r1, [pc, #72]	@ (800584c <HAL_RCC_ClockConfig+0x35c>)
 8005802:	5ccb      	ldrb	r3, [r1, r3]
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
 800580c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800580e:	4b0e      	ldr	r3, [pc, #56]	@ (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	4a0d      	ldr	r2, [pc, #52]	@ (800584c <HAL_RCC_ClockConfig+0x35c>)
 8005818:	5cd3      	ldrb	r3, [r2, r3]
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
 8005824:	4a0a      	ldr	r2, [pc, #40]	@ (8005850 <HAL_RCC_ClockConfig+0x360>)
 8005826:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005828:	4a0a      	ldr	r2, [pc, #40]	@ (8005854 <HAL_RCC_ClockConfig+0x364>)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800582e:	4b0a      	ldr	r3, [pc, #40]	@ (8005858 <HAL_RCC_ClockConfig+0x368>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fb fdb2 	bl	800139c <HAL_InitTick>
 8005838:	4603      	mov	r3, r0
 800583a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	58024400 	.word	0x58024400
 800584c:	0800a014 	.word	0x0800a014
 8005850:	24000004 	.word	0x24000004
 8005854:	24000000 	.word	0x24000000
 8005858:	24000008 	.word	0x24000008

0800585c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800585c:	b480      	push	{r7}
 800585e:	b089      	sub	sp, #36	@ 0x24
 8005860:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005862:	4bb3      	ldr	r3, [pc, #716]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800586a:	2b18      	cmp	r3, #24
 800586c:	f200 8155 	bhi.w	8005b1a <HAL_RCC_GetSysClockFreq+0x2be>
 8005870:	a201      	add	r2, pc, #4	@ (adr r2, 8005878 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058dd 	.word	0x080058dd
 800587c:	08005b1b 	.word	0x08005b1b
 8005880:	08005b1b 	.word	0x08005b1b
 8005884:	08005b1b 	.word	0x08005b1b
 8005888:	08005b1b 	.word	0x08005b1b
 800588c:	08005b1b 	.word	0x08005b1b
 8005890:	08005b1b 	.word	0x08005b1b
 8005894:	08005b1b 	.word	0x08005b1b
 8005898:	08005903 	.word	0x08005903
 800589c:	08005b1b 	.word	0x08005b1b
 80058a0:	08005b1b 	.word	0x08005b1b
 80058a4:	08005b1b 	.word	0x08005b1b
 80058a8:	08005b1b 	.word	0x08005b1b
 80058ac:	08005b1b 	.word	0x08005b1b
 80058b0:	08005b1b 	.word	0x08005b1b
 80058b4:	08005b1b 	.word	0x08005b1b
 80058b8:	08005909 	.word	0x08005909
 80058bc:	08005b1b 	.word	0x08005b1b
 80058c0:	08005b1b 	.word	0x08005b1b
 80058c4:	08005b1b 	.word	0x08005b1b
 80058c8:	08005b1b 	.word	0x08005b1b
 80058cc:	08005b1b 	.word	0x08005b1b
 80058d0:	08005b1b 	.word	0x08005b1b
 80058d4:	08005b1b 	.word	0x08005b1b
 80058d8:	0800590f 	.word	0x0800590f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058dc:	4b94      	ldr	r3, [pc, #592]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d009      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058e8:	4b91      	ldr	r3, [pc, #580]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	08db      	lsrs	r3, r3, #3
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	4a90      	ldr	r2, [pc, #576]	@ (8005b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
 80058f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80058fa:	e111      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80058fc:	4b8d      	ldr	r3, [pc, #564]	@ (8005b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058fe:	61bb      	str	r3, [r7, #24]
      break;
 8005900:	e10e      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005902:	4b8d      	ldr	r3, [pc, #564]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005904:	61bb      	str	r3, [r7, #24]
      break;
 8005906:	e10b      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005908:	4b8c      	ldr	r3, [pc, #560]	@ (8005b3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800590a:	61bb      	str	r3, [r7, #24]
      break;
 800590c:	e108      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800590e:	4b88      	ldr	r3, [pc, #544]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005918:	4b85      	ldr	r3, [pc, #532]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005922:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005924:	4b82      	ldr	r3, [pc, #520]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800592e:	4b80      	ldr	r3, [pc, #512]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005932:	08db      	lsrs	r3, r3, #3
 8005934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005946:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80e1 	beq.w	8005b14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b02      	cmp	r3, #2
 8005956:	f000 8083 	beq.w	8005a60 <HAL_RCC_GetSysClockFreq+0x204>
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b02      	cmp	r3, #2
 800595e:	f200 80a1 	bhi.w	8005aa4 <HAL_RCC_GetSysClockFreq+0x248>
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_RCC_GetSysClockFreq+0x114>
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d056      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x1c0>
 800596e:	e099      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005970:	4b6f      	ldr	r3, [pc, #444]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d02d      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800597c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	08db      	lsrs	r3, r3, #3
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	4a6b      	ldr	r2, [pc, #428]	@ (8005b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
 800598c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	ee07 3a90 	vmov	s15, r3
 8005994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a6:	4b62      	ldr	r3, [pc, #392]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80059d6:	e087      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005b44 <HAL_RCC_GetSysClockFreq+0x2e8>
 80059e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ea:	4b51      	ldr	r3, [pc, #324]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a1a:	e065      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005b48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2e:	4b40      	ldr	r3, [pc, #256]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a5e:	e043      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005b4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	4b2f      	ldr	r3, [pc, #188]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005aa2:	e021      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005b48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ae6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005ae8:	4b11      	ldr	r3, [pc, #68]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aec:	0a5b      	lsrs	r3, r3, #9
 8005aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005af2:	3301      	adds	r3, #1
 8005af4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	ee07 3a90 	vmov	s15, r3
 8005afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b0c:	ee17 3a90 	vmov	r3, s15
 8005b10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b12:	e005      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61bb      	str	r3, [r7, #24]
      break;
 8005b18:	e002      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b1a:	4b07      	ldr	r3, [pc, #28]	@ (8005b38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b1c:	61bb      	str	r3, [r7, #24]
      break;
 8005b1e:	bf00      	nop
  }

  return sysclockfreq;
 8005b20:	69bb      	ldr	r3, [r7, #24]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3724      	adds	r7, #36	@ 0x24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	58024400 	.word	0x58024400
 8005b34:	03d09000 	.word	0x03d09000
 8005b38:	003d0900 	.word	0x003d0900
 8005b3c:	007a1200 	.word	0x007a1200
 8005b40:	46000000 	.word	0x46000000
 8005b44:	4c742400 	.word	0x4c742400
 8005b48:	4a742400 	.word	0x4a742400
 8005b4c:	4af42400 	.word	0x4af42400

08005b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b56:	f7ff fe81 	bl	800585c <HAL_RCC_GetSysClockFreq>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	0a1b      	lsrs	r3, r3, #8
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	490f      	ldr	r1, [pc, #60]	@ (8005ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b68:	5ccb      	ldrb	r3, [r1, r3]
 8005b6a:	f003 031f 	and.w	r3, r3, #31
 8005b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	4a09      	ldr	r2, [pc, #36]	@ (8005ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b7e:	5cd3      	ldrb	r3, [r2, r3]
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8a:	4a07      	ldr	r2, [pc, #28]	@ (8005ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b8e:	4a07      	ldr	r2, [pc, #28]	@ (8005bac <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b94:	4b04      	ldr	r3, [pc, #16]	@ (8005ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b96:	681b      	ldr	r3, [r3, #0]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	0800a014 	.word	0x0800a014
 8005ba8:	24000004 	.word	0x24000004
 8005bac:	24000000 	.word	0x24000000

08005bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005bb4:	f7ff ffcc 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	4b06      	ldr	r3, [pc, #24]	@ (8005bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	4904      	ldr	r1, [pc, #16]	@ (8005bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bc6:	5ccb      	ldrb	r3, [r1, r3]
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	0800a014 	.word	0x0800a014

08005bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005be0:	f7ff ffb6 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005be4:	4602      	mov	r2, r0
 8005be6:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	4904      	ldr	r1, [pc, #16]	@ (8005c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bf2:	5ccb      	ldrb	r3, [r1, r3]
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	58024400 	.word	0x58024400
 8005c04:	0800a014 	.word	0x0800a014

08005c08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	223f      	movs	r2, #63	@ 0x3f
 8005c16:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c18:	4b1a      	ldr	r3, [pc, #104]	@ (8005c84 <HAL_RCC_GetClockConfig+0x7c>)
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0207 	and.w	r2, r3, #7
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005c24:	4b17      	ldr	r3, [pc, #92]	@ (8005c84 <HAL_RCC_GetClockConfig+0x7c>)
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005c30:	4b14      	ldr	r3, [pc, #80]	@ (8005c84 <HAL_RCC_GetClockConfig+0x7c>)
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f003 020f 	and.w	r2, r3, #15
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005c3c:	4b11      	ldr	r3, [pc, #68]	@ (8005c84 <HAL_RCC_GetClockConfig+0x7c>)
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005c48:	4b0e      	ldr	r3, [pc, #56]	@ (8005c84 <HAL_RCC_GetClockConfig+0x7c>)
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005c54:	4b0b      	ldr	r3, [pc, #44]	@ (8005c84 <HAL_RCC_GetClockConfig+0x7c>)
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005c60:	4b08      	ldr	r3, [pc, #32]	@ (8005c84 <HAL_RCC_GetClockConfig+0x7c>)
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c6c:	4b06      	ldr	r3, [pc, #24]	@ (8005c88 <HAL_RCC_GetClockConfig+0x80>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 020f 	and.w	r2, r3, #15
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	601a      	str	r2, [r3, #0]
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	58024400 	.word	0x58024400
 8005c88:	52002000 	.word	0x52002000

08005c8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c90:	b0c6      	sub	sp, #280	@ 0x118
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005cb0:	2500      	movs	r5, #0
 8005cb2:	ea54 0305 	orrs.w	r3, r4, r5
 8005cb6:	d049      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cc2:	d02f      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005cc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cc8:	d828      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005cca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cce:	d01a      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005cd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cd4:	d822      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cde:	d007      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ce0:	e01c      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce2:	4bab      	ldr	r3, [pc, #684]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce6:	4aaa      	ldr	r2, [pc, #680]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cee:	e01a      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	2102      	movs	r1, #2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f001 fc25 	bl	8007548 <RCCEx_PLL2_Config>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d04:	e00f      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0a:	3328      	adds	r3, #40	@ 0x28
 8005d0c:	2102      	movs	r1, #2
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 fccc 	bl	80076ac <RCCEx_PLL3_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d1a:	e004      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d22:	e000      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10a      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d2e:	4b98      	ldr	r3, [pc, #608]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d3c:	4a94      	ldr	r2, [pc, #592]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d42:	e003      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005d58:	f04f 0900 	mov.w	r9, #0
 8005d5c:	ea58 0309 	orrs.w	r3, r8, r9
 8005d60:	d047      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d82a      	bhi.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005d89 	.word	0x08005d89
 8005d78:	08005d97 	.word	0x08005d97
 8005d7c:	08005dad 	.word	0x08005dad
 8005d80:	08005dcb 	.word	0x08005dcb
 8005d84:	08005dcb 	.word	0x08005dcb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d88:	4b81      	ldr	r3, [pc, #516]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8c:	4a80      	ldr	r2, [pc, #512]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d94:	e01a      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 fbd2 	bl	8007548 <RCCEx_PLL2_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005daa:	e00f      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db0:	3328      	adds	r3, #40	@ 0x28
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 fc79 	bl	80076ac <RCCEx_PLL3_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dc0:	e004      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dc8:	e000      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dd4:	4b6e      	ldr	r3, [pc, #440]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd8:	f023 0107 	bic.w	r1, r3, #7
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de2:	4a6b      	ldr	r2, [pc, #428]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005de4:	430b      	orrs	r3, r1
 8005de6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005de8:	e003      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005dfe:	f04f 0b00 	mov.w	fp, #0
 8005e02:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e06:	d05b      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e10:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005e14:	d03b      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005e16:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005e1a:	d834      	bhi.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e20:	d037      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005e22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e26:	d82e      	bhi.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e2c:	d033      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005e2e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e32:	d828      	bhi.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e38:	d01a      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005e3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e3e:	d822      	bhi.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005e44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e48:	d007      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005e4a:	e01c      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e4c:	4b50      	ldr	r3, [pc, #320]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e50:	4a4f      	ldr	r2, [pc, #316]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e58:	e01e      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5e:	3308      	adds	r3, #8
 8005e60:	2100      	movs	r1, #0
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 fb70 	bl	8007548 <RCCEx_PLL2_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e6e:	e013      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e74:	3328      	adds	r3, #40	@ 0x28
 8005e76:	2100      	movs	r1, #0
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 fc17 	bl	80076ac <RCCEx_PLL3_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e84:	e008      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e8c:	e004      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e8e:	bf00      	nop
 8005e90:	e002      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e92:	bf00      	nop
 8005e94:	e000      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10b      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005eb0:	4a37      	ldr	r2, [pc, #220]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eb6:	e003      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ebc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ed6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005eda:	460b      	mov	r3, r1
 8005edc:	4313      	orrs	r3, r2
 8005ede:	d05d      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ee8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005eec:	d03b      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005eee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005ef2:	d834      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ef4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ef8:	d037      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005efa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005efe:	d82e      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f04:	d033      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005f06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f0a:	d828      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f10:	d01a      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005f12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f16:	d822      	bhi.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005f1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f20:	d007      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005f22:	e01c      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f24:	4b1a      	ldr	r3, [pc, #104]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f28:	4a19      	ldr	r2, [pc, #100]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f30:	e01e      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f36:	3308      	adds	r3, #8
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fb04 	bl	8007548 <RCCEx_PLL2_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f46:	e013      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4c:	3328      	adds	r3, #40	@ 0x28
 8005f4e:	2100      	movs	r1, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 fbab 	bl	80076ac <RCCEx_PLL3_Config>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f5c:	e008      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f64:	e004      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f66:	bf00      	nop
 8005f68:	e002      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f6a:	bf00      	nop
 8005f6c:	e000      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10d      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f78:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f7c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f88:	4a01      	ldr	r2, [pc, #4]	@ (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f8e:	e005      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005fa8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005fac:	2300      	movs	r3, #0
 8005fae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005fb2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	d03a      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fc2:	2b30      	cmp	r3, #48	@ 0x30
 8005fc4:	d01f      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005fc6:	2b30      	cmp	r3, #48	@ 0x30
 8005fc8:	d819      	bhi.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d00c      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d815      	bhi.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d019      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005fd6:	2b10      	cmp	r3, #16
 8005fd8:	d111      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fda:	4baa      	ldr	r3, [pc, #680]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fde:	4aa9      	ldr	r2, [pc, #676]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005fe6:	e011      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fec:	3308      	adds	r3, #8
 8005fee:	2102      	movs	r1, #2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 faa9 	bl	8007548 <RCCEx_PLL2_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005ffc:	e006      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006004:	e002      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800600a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006014:	4b9b      	ldr	r3, [pc, #620]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006018:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006022:	4a98      	ldr	r2, [pc, #608]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006024:	430b      	orrs	r3, r1
 8006026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006028:	e003      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800602e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800603e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006042:	2300      	movs	r3, #0
 8006044:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006048:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800604c:	460b      	mov	r3, r1
 800604e:	4313      	orrs	r3, r2
 8006050:	d051      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800605c:	d035      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800605e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006062:	d82e      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006064:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006068:	d031      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x442>
 800606a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800606e:	d828      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006074:	d01a      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800607a:	d822      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006084:	d007      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006086:	e01c      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006088:	4b7e      	ldr	r3, [pc, #504]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800608a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608c:	4a7d      	ldr	r2, [pc, #500]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800608e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006094:	e01c      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609a:	3308      	adds	r3, #8
 800609c:	2100      	movs	r1, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 fa52 	bl	8007548 <RCCEx_PLL2_Config>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060aa:	e011      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b0:	3328      	adds	r3, #40	@ 0x28
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 faf9 	bl	80076ac <RCCEx_PLL3_Config>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060c0:	e006      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060c8:	e002      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80060ca:	bf00      	nop
 80060cc:	e000      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80060ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80060d8:	4b6a      	ldr	r3, [pc, #424]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80060e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e6:	4a67      	ldr	r2, [pc, #412]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80060ec:	e003      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80060f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006102:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006106:	2300      	movs	r3, #0
 8006108:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800610c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006110:	460b      	mov	r3, r1
 8006112:	4313      	orrs	r3, r2
 8006114:	d053      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800611c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006120:	d033      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006122:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006126:	d82c      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006128:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800612c:	d02f      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800612e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006132:	d826      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006134:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006138:	d02b      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800613a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800613e:	d820      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006144:	d012      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800614a:	d81a      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d022      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006154:	d115      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615a:	3308      	adds	r3, #8
 800615c:	2101      	movs	r1, #1
 800615e:	4618      	mov	r0, r3
 8006160:	f001 f9f2 	bl	8007548 <RCCEx_PLL2_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800616a:	e015      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006170:	3328      	adds	r3, #40	@ 0x28
 8006172:	2101      	movs	r1, #1
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fa99 	bl	80076ac <RCCEx_PLL3_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006180:	e00a      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006188:	e006      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800618a:	bf00      	nop
 800618c:	e004      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800618e:	bf00      	nop
 8006190:	e002      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006192:	bf00      	nop
 8006194:	e000      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80061a0:	4b38      	ldr	r3, [pc, #224]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80061a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ae:	4a35      	ldr	r2, [pc, #212]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061b0:	430b      	orrs	r3, r1
 80061b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80061b4:	e003      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80061ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061ce:	2300      	movs	r3, #0
 80061d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061d4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061d8:	460b      	mov	r3, r1
 80061da:	4313      	orrs	r3, r2
 80061dc:	d058      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80061de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061ea:	d033      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80061ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061f0:	d82c      	bhi.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f6:	d02f      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80061f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061fc:	d826      	bhi.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006202:	d02b      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006204:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006208:	d820      	bhi.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800620a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800620e:	d012      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006214:	d81a      	bhi.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d022      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800621a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800621e:	d115      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006224:	3308      	adds	r3, #8
 8006226:	2101      	movs	r1, #1
 8006228:	4618      	mov	r0, r3
 800622a:	f001 f98d 	bl	8007548 <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006234:	e015      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623a:	3328      	adds	r3, #40	@ 0x28
 800623c:	2101      	movs	r1, #1
 800623e:	4618      	mov	r0, r3
 8006240:	f001 fa34 	bl	80076ac <RCCEx_PLL3_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800624a:	e00a      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006252:	e006      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006254:	bf00      	nop
 8006256:	e004      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006258:	bf00      	nop
 800625a:	e002      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800625c:	bf00      	nop
 800625e:	e000      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006262:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10e      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800626a:	4b06      	ldr	r3, [pc, #24]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800626c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006276:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800627a:	4a02      	ldr	r2, [pc, #8]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800627c:	430b      	orrs	r3, r1
 800627e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006280:	e006      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006282:	bf00      	nop
 8006284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800628c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800629c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062a0:	2300      	movs	r3, #0
 80062a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80062a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4313      	orrs	r3, r2
 80062ae:	d037      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80062b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062ba:	d00e      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80062bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062c0:	d816      	bhi.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d018      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80062c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062ca:	d111      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062cc:	4bc4      	ldr	r3, [pc, #784]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d0:	4ac3      	ldr	r2, [pc, #780]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062d8:	e00f      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062de:	3308      	adds	r3, #8
 80062e0:	2101      	movs	r1, #1
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 f930 	bl	8007548 <RCCEx_PLL2_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062ee:	e004      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062f6:	e000      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80062f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006302:	4bb7      	ldr	r3, [pc, #732]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006306:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006310:	4ab3      	ldr	r2, [pc, #716]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006312:	430b      	orrs	r3, r1
 8006314:	6513      	str	r3, [r2, #80]	@ 0x50
 8006316:	e003      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800631c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800632c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006330:	2300      	movs	r3, #0
 8006332:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006336:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800633a:	460b      	mov	r3, r1
 800633c:	4313      	orrs	r3, r2
 800633e:	d039      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006346:	2b03      	cmp	r3, #3
 8006348:	d81c      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800634a:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	0800638d 	.word	0x0800638d
 8006354:	08006361 	.word	0x08006361
 8006358:	0800636f 	.word	0x0800636f
 800635c:	0800638d 	.word	0x0800638d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006360:	4b9f      	ldr	r3, [pc, #636]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006364:	4a9e      	ldr	r2, [pc, #632]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800636a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800636c:	e00f      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800636e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006372:	3308      	adds	r3, #8
 8006374:	2102      	movs	r1, #2
 8006376:	4618      	mov	r0, r3
 8006378:	f001 f8e6 	bl	8007548 <RCCEx_PLL2_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006382:	e004      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800638a:	e000      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800638c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10a      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006396:	4b92      	ldr	r3, [pc, #584]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800639a:	f023 0103 	bic.w	r1, r3, #3
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063a4:	4a8e      	ldr	r2, [pc, #568]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a6:	430b      	orrs	r3, r1
 80063a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063aa:	e003      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80063c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063c4:	2300      	movs	r3, #0
 80063c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f000 8099 	beq.w	8006508 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063d6:	4b83      	ldr	r3, [pc, #524]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a82      	ldr	r2, [pc, #520]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063e2:	f7fb f987 	bl	80016f4 <HAL_GetTick>
 80063e6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ea:	e00b      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ec:	f7fb f982 	bl	80016f4 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b64      	cmp	r3, #100	@ 0x64
 80063fa:	d903      	bls.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006402:	e005      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006404:	4b77      	ldr	r3, [pc, #476]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0ed      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006414:	2b00      	cmp	r3, #0
 8006416:	d173      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006418:	4b71      	ldr	r3, [pc, #452]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800641a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006420:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006424:	4053      	eors	r3, r2
 8006426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800642a:	2b00      	cmp	r3, #0
 800642c:	d015      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800642e:	4b6c      	ldr	r3, [pc, #432]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006436:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800643a:	4b69      	ldr	r3, [pc, #420]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800643c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643e:	4a68      	ldr	r2, [pc, #416]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006444:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006446:	4b66      	ldr	r3, [pc, #408]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800644a:	4a65      	ldr	r2, [pc, #404]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800644c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006450:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006452:	4a63      	ldr	r2, [pc, #396]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006458:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800645a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006466:	d118      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006468:	f7fb f944 	bl	80016f4 <HAL_GetTick>
 800646c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006470:	e00d      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006472:	f7fb f93f 	bl	80016f4 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800647c:	1ad2      	subs	r2, r2, r3
 800647e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006482:	429a      	cmp	r2, r3
 8006484:	d903      	bls.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800648c:	e005      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800648e:	4b54      	ldr	r3, [pc, #336]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0eb      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800649a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d129      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064b2:	d10e      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80064b4:	4b4a      	ldr	r3, [pc, #296]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064c4:	091a      	lsrs	r2, r3, #4
 80064c6:	4b48      	ldr	r3, [pc, #288]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	4a45      	ldr	r2, [pc, #276]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064cc:	430b      	orrs	r3, r1
 80064ce:	6113      	str	r3, [r2, #16]
 80064d0:	e005      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x852>
 80064d2:	4b43      	ldr	r3, [pc, #268]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	4a42      	ldr	r2, [pc, #264]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80064dc:	6113      	str	r3, [r2, #16]
 80064de:	4b40      	ldr	r3, [pc, #256]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ee:	4a3c      	ldr	r2, [pc, #240]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064f0:	430b      	orrs	r3, r1
 80064f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f4:	e008      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80064fe:	e003      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f002 0301 	and.w	r3, r2, #1
 8006514:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006518:	2300      	movs	r3, #0
 800651a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800651e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006522:	460b      	mov	r3, r1
 8006524:	4313      	orrs	r3, r2
 8006526:	f000 808f 	beq.w	8006648 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006530:	2b28      	cmp	r3, #40	@ 0x28
 8006532:	d871      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006534:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	08006621 	.word	0x08006621
 8006540:	08006619 	.word	0x08006619
 8006544:	08006619 	.word	0x08006619
 8006548:	08006619 	.word	0x08006619
 800654c:	08006619 	.word	0x08006619
 8006550:	08006619 	.word	0x08006619
 8006554:	08006619 	.word	0x08006619
 8006558:	08006619 	.word	0x08006619
 800655c:	080065ed 	.word	0x080065ed
 8006560:	08006619 	.word	0x08006619
 8006564:	08006619 	.word	0x08006619
 8006568:	08006619 	.word	0x08006619
 800656c:	08006619 	.word	0x08006619
 8006570:	08006619 	.word	0x08006619
 8006574:	08006619 	.word	0x08006619
 8006578:	08006619 	.word	0x08006619
 800657c:	08006603 	.word	0x08006603
 8006580:	08006619 	.word	0x08006619
 8006584:	08006619 	.word	0x08006619
 8006588:	08006619 	.word	0x08006619
 800658c:	08006619 	.word	0x08006619
 8006590:	08006619 	.word	0x08006619
 8006594:	08006619 	.word	0x08006619
 8006598:	08006619 	.word	0x08006619
 800659c:	08006621 	.word	0x08006621
 80065a0:	08006619 	.word	0x08006619
 80065a4:	08006619 	.word	0x08006619
 80065a8:	08006619 	.word	0x08006619
 80065ac:	08006619 	.word	0x08006619
 80065b0:	08006619 	.word	0x08006619
 80065b4:	08006619 	.word	0x08006619
 80065b8:	08006619 	.word	0x08006619
 80065bc:	08006621 	.word	0x08006621
 80065c0:	08006619 	.word	0x08006619
 80065c4:	08006619 	.word	0x08006619
 80065c8:	08006619 	.word	0x08006619
 80065cc:	08006619 	.word	0x08006619
 80065d0:	08006619 	.word	0x08006619
 80065d4:	08006619 	.word	0x08006619
 80065d8:	08006619 	.word	0x08006619
 80065dc:	08006621 	.word	0x08006621
 80065e0:	58024400 	.word	0x58024400
 80065e4:	58024800 	.word	0x58024800
 80065e8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f0:	3308      	adds	r3, #8
 80065f2:	2101      	movs	r1, #1
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 ffa7 	bl	8007548 <RCCEx_PLL2_Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006600:	e00f      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006606:	3328      	adds	r3, #40	@ 0x28
 8006608:	2101      	movs	r1, #1
 800660a:	4618      	mov	r0, r3
 800660c:	f001 f84e 	bl	80076ac <RCCEx_PLL3_Config>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006616:	e004      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800661e:	e000      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006622:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800662a:	4bbf      	ldr	r3, [pc, #764]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800662c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006638:	4abb      	ldr	r2, [pc, #748]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800663a:	430b      	orrs	r3, r1
 800663c:	6553      	str	r3, [r2, #84]	@ 0x54
 800663e:	e003      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006644:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f002 0302 	and.w	r3, r2, #2
 8006654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006658:	2300      	movs	r3, #0
 800665a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800665e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006662:	460b      	mov	r3, r1
 8006664:	4313      	orrs	r3, r2
 8006666:	d041      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800666e:	2b05      	cmp	r3, #5
 8006670:	d824      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006672:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	080066c5 	.word	0x080066c5
 800667c:	08006691 	.word	0x08006691
 8006680:	080066a7 	.word	0x080066a7
 8006684:	080066c5 	.word	0x080066c5
 8006688:	080066c5 	.word	0x080066c5
 800668c:	080066c5 	.word	0x080066c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006694:	3308      	adds	r3, #8
 8006696:	2101      	movs	r1, #1
 8006698:	4618      	mov	r0, r3
 800669a:	f000 ff55 	bl	8007548 <RCCEx_PLL2_Config>
 800669e:	4603      	mov	r3, r0
 80066a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066a4:	e00f      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066aa:	3328      	adds	r3, #40	@ 0x28
 80066ac:	2101      	movs	r1, #1
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fffc 	bl	80076ac <RCCEx_PLL3_Config>
 80066b4:	4603      	mov	r3, r0
 80066b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066ba:	e004      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066c2:	e000      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80066c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80066ce:	4b96      	ldr	r3, [pc, #600]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d2:	f023 0107 	bic.w	r1, r3, #7
 80066d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066dc:	4a92      	ldr	r2, [pc, #584]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066de:	430b      	orrs	r3, r1
 80066e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80066e2:	e003      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f002 0304 	and.w	r3, r2, #4
 80066f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066fc:	2300      	movs	r3, #0
 80066fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006702:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006706:	460b      	mov	r3, r1
 8006708:	4313      	orrs	r3, r2
 800670a:	d044      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006714:	2b05      	cmp	r3, #5
 8006716:	d825      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006718:	a201      	add	r2, pc, #4	@ (adr r2, 8006720 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	0800676d 	.word	0x0800676d
 8006724:	08006739 	.word	0x08006739
 8006728:	0800674f 	.word	0x0800674f
 800672c:	0800676d 	.word	0x0800676d
 8006730:	0800676d 	.word	0x0800676d
 8006734:	0800676d 	.word	0x0800676d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673c:	3308      	adds	r3, #8
 800673e:	2101      	movs	r1, #1
 8006740:	4618      	mov	r0, r3
 8006742:	f000 ff01 	bl	8007548 <RCCEx_PLL2_Config>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800674c:	e00f      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800674e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006752:	3328      	adds	r3, #40	@ 0x28
 8006754:	2101      	movs	r1, #1
 8006756:	4618      	mov	r0, r3
 8006758:	f000 ffa8 	bl	80076ac <RCCEx_PLL3_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006762:	e004      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800676c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10b      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006776:	4b6c      	ldr	r3, [pc, #432]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677a:	f023 0107 	bic.w	r1, r3, #7
 800677e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006786:	4a68      	ldr	r2, [pc, #416]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006788:	430b      	orrs	r3, r1
 800678a:	6593      	str	r3, [r2, #88]	@ 0x58
 800678c:	e003      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006792:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	f002 0320 	and.w	r3, r2, #32
 80067a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067a6:	2300      	movs	r3, #0
 80067a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80067ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4313      	orrs	r3, r2
 80067b4:	d055      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80067b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067c2:	d033      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80067c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067c8:	d82c      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ce:	d02f      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d4:	d826      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067da:	d02b      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80067dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067e0:	d820      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e6:	d012      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80067e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067ec:	d81a      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d022      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80067f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067f6:	d115      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fc:	3308      	adds	r3, #8
 80067fe:	2100      	movs	r1, #0
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fea1 	bl	8007548 <RCCEx_PLL2_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800680c:	e015      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006812:	3328      	adds	r3, #40	@ 0x28
 8006814:	2102      	movs	r1, #2
 8006816:	4618      	mov	r0, r3
 8006818:	f000 ff48 	bl	80076ac <RCCEx_PLL3_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006822:	e00a      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800682a:	e006      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800682c:	bf00      	nop
 800682e:	e004      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006830:	bf00      	nop
 8006832:	e002      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006834:	bf00      	nop
 8006836:	e000      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800683a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10b      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006842:	4b39      	ldr	r3, [pc, #228]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006846:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006852:	4a35      	ldr	r2, [pc, #212]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006854:	430b      	orrs	r3, r1
 8006856:	6553      	str	r3, [r2, #84]	@ 0x54
 8006858:	e003      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800685e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800686e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006872:	2300      	movs	r3, #0
 8006874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006878:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d058      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800688a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800688e:	d033      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006890:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006894:	d82c      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800689a:	d02f      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800689c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a0:	d826      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80068a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068a6:	d02b      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80068a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068ac:	d820      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80068ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b2:	d012      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80068b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b8:	d81a      	bhi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d022      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80068be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c2:	d115      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c8:	3308      	adds	r3, #8
 80068ca:	2100      	movs	r1, #0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fe3b 	bl	8007548 <RCCEx_PLL2_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068d8:	e015      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068de:	3328      	adds	r3, #40	@ 0x28
 80068e0:	2102      	movs	r1, #2
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fee2 	bl	80076ac <RCCEx_PLL3_Config>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068ee:	e00a      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068f6:	e006      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068f8:	bf00      	nop
 80068fa:	e004      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068fc:	bf00      	nop
 80068fe:	e002      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006900:	bf00      	nop
 8006902:	e000      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006906:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10e      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800690e:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006912:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800691e:	4a02      	ldr	r2, [pc, #8]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006920:	430b      	orrs	r3, r1
 8006922:	6593      	str	r3, [r2, #88]	@ 0x58
 8006924:	e006      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006926:	bf00      	nop
 8006928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006930:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006940:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006944:	2300      	movs	r3, #0
 8006946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800694a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800694e:	460b      	mov	r3, r1
 8006950:	4313      	orrs	r3, r2
 8006952:	d055      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006958:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800695c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006960:	d033      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006962:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006966:	d82c      	bhi.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800696c:	d02f      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800696e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006972:	d826      	bhi.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006974:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006978:	d02b      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800697a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800697e:	d820      	bhi.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006984:	d012      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006986:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800698a:	d81a      	bhi.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d022      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006994:	d115      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699a:	3308      	adds	r3, #8
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fdd2 	bl	8007548 <RCCEx_PLL2_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069aa:	e015      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b0:	3328      	adds	r3, #40	@ 0x28
 80069b2:	2102      	movs	r1, #2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 fe79 	bl	80076ac <RCCEx_PLL3_Config>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069c0:	e00a      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069c8:	e006      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069ca:	bf00      	nop
 80069cc:	e004      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069ce:	bf00      	nop
 80069d0:	e002      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069d2:	bf00      	nop
 80069d4:	e000      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10b      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80069e0:	4ba0      	ldr	r3, [pc, #640]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80069e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069f0:	4a9c      	ldr	r2, [pc, #624]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069f2:	430b      	orrs	r3, r1
 80069f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80069f6:	e003      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	f002 0308 	and.w	r3, r2, #8
 8006a0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a16:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	d01e      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a32:	3328      	adds	r3, #40	@ 0x28
 8006a34:	2102      	movs	r1, #2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fe38 	bl	80076ac <RCCEx_PLL3_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006a48:	4b86      	ldr	r3, [pc, #536]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a58:	4a82      	ldr	r2, [pc, #520]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f002 0310 	and.w	r3, r2, #16
 8006a6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a74:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	d01e      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a90:	3328      	adds	r3, #40	@ 0x28
 8006a92:	2102      	movs	r1, #2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fe09 	bl	80076ac <RCCEx_PLL3_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ab6:	4a6b      	ldr	r2, [pc, #428]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006aca:	2300      	movs	r3, #0
 8006acc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ace:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	d03e      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006adc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ae4:	d022      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aea:	d81b      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af4:	d00b      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006af6:	e015      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afc:	3308      	adds	r3, #8
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fd21 	bl	8007548 <RCCEx_PLL2_Config>
 8006b06:	4603      	mov	r3, r0
 8006b08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b0c:	e00f      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b12:	3328      	adds	r3, #40	@ 0x28
 8006b14:	2102      	movs	r1, #2
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 fdc8 	bl	80076ac <RCCEx_PLL3_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b22:	e004      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b2a:	e000      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10b      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b36:	4b4b      	ldr	r3, [pc, #300]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b46:	4a47      	ldr	r2, [pc, #284]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b4c:	e003      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b62:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b64:	2300      	movs	r3, #0
 8006b66:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	d03b      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b7e:	d01f      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006b80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b84:	d818      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b8a:	d003      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006b8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b90:	d007      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006b92:	e011      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b94:	4b33      	ldr	r3, [pc, #204]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b98:	4a32      	ldr	r2, [pc, #200]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ba0:	e00f      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba6:	3328      	adds	r3, #40	@ 0x28
 8006ba8:	2101      	movs	r1, #1
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fd7e 	bl	80076ac <RCCEx_PLL3_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10b      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bca:	4b26      	ldr	r3, [pc, #152]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bda:	4a22      	ldr	r2, [pc, #136]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6553      	str	r3, [r2, #84]	@ 0x54
 8006be0:	e003      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006bf6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006bfc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006c00:	460b      	mov	r3, r1
 8006c02:	4313      	orrs	r3, r2
 8006c04:	d034      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c14:	d007      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006c16:	e011      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c18:	4b12      	ldr	r3, [pc, #72]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1c:	4a11      	ldr	r2, [pc, #68]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c24:	e00e      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	2102      	movs	r1, #2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fc8a 	bl	8007548 <RCCEx_PLL2_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c3a:	e003      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10d      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c4c:	4b05      	ldr	r3, [pc, #20]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c5a:	4a02      	ldr	r2, [pc, #8]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c60:	e006      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006c62:	bf00      	nop
 8006c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006c7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c7e:	2300      	movs	r3, #0
 8006c80:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c82:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006c86:	460b      	mov	r3, r1
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	d00c      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c90:	3328      	adds	r3, #40	@ 0x28
 8006c92:	2102      	movs	r1, #2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fd09 	bl	80076ac <RCCEx_PLL3_Config>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cb8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	d036      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ccc:	d018      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cd2:	d811      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd8:	d014      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cde:	d80b      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d011      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ce8:	d106      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cea:	4bb7      	ldr	r3, [pc, #732]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	4ab6      	ldr	r2, [pc, #728]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006cf6:	e008      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cfe:	e004      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006d00:	bf00      	nop
 8006d02:	e002      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006d04:	bf00      	nop
 8006d06:	e000      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d12:	4bad      	ldr	r3, [pc, #692]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d20:	4aa9      	ldr	r2, [pc, #676]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d22:	430b      	orrs	r3, r1
 8006d24:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d26:	e003      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006d3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d3e:	2300      	movs	r3, #0
 8006d40:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006d46:	460b      	mov	r3, r1
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	d009      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d4c:	4b9e      	ldr	r3, [pc, #632]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d5a:	4a9b      	ldr	r2, [pc, #620]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d6e:	2300      	movs	r3, #0
 8006d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d72:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006d76:	460b      	mov	r3, r1
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	d009      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d7c:	4b92      	ldr	r3, [pc, #584]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d80:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d8a:	4a8f      	ldr	r2, [pc, #572]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d9e:	2300      	movs	r3, #0
 8006da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006da2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006da6:	460b      	mov	r3, r1
 8006da8:	4313      	orrs	r3, r2
 8006daa:	d00e      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dac:	4b86      	ldr	r3, [pc, #536]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	4a85      	ldr	r2, [pc, #532]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006db2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006db6:	6113      	str	r3, [r2, #16]
 8006db8:	4b83      	ldr	r3, [pc, #524]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dba:	6919      	ldr	r1, [r3, #16]
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dc4:	4a80      	ldr	r2, [pc, #512]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dd8:	2300      	movs	r3, #0
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ddc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006de0:	460b      	mov	r3, r1
 8006de2:	4313      	orrs	r3, r2
 8006de4:	d009      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006de6:	4b78      	ldr	r3, [pc, #480]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006df4:	4a74      	ldr	r2, [pc, #464]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006df6:	430b      	orrs	r3, r1
 8006df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e08:	2300      	movs	r3, #0
 8006e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e0c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006e10:	460b      	mov	r3, r1
 8006e12:	4313      	orrs	r3, r2
 8006e14:	d00a      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e16:	4b6c      	ldr	r3, [pc, #432]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e26:	4a68      	ldr	r2, [pc, #416]	@ (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	2100      	movs	r1, #0
 8006e36:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e3e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006e42:	460b      	mov	r3, r1
 8006e44:	4313      	orrs	r3, r2
 8006e46:	d011      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	2100      	movs	r1, #0
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fb79 	bl	8007548 <RCCEx_PLL2_Config>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	2100      	movs	r1, #0
 8006e76:	6239      	str	r1, [r7, #32]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e82:	460b      	mov	r3, r1
 8006e84:	4313      	orrs	r3, r2
 8006e86:	d011      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	2101      	movs	r1, #1
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fb59 	bl	8007548 <RCCEx_PLL2_Config>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ea8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	61b9      	str	r1, [r7, #24]
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	61fb      	str	r3, [r7, #28]
 8006ebe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	d011      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ecc:	3308      	adds	r3, #8
 8006ece:	2102      	movs	r1, #2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fb39 	bl	8007548 <RCCEx_PLL2_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006edc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ee8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	6139      	str	r1, [r7, #16]
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f02:	460b      	mov	r3, r1
 8006f04:	4313      	orrs	r3, r2
 8006f06:	d011      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0c:	3328      	adds	r3, #40	@ 0x28
 8006f0e:	2100      	movs	r1, #0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fbcb 	bl	80076ac <RCCEx_PLL3_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006f1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	2100      	movs	r1, #0
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	f003 0310 	and.w	r3, r3, #16
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f42:	460b      	mov	r3, r1
 8006f44:	4313      	orrs	r3, r2
 8006f46:	d011      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4c:	3328      	adds	r3, #40	@ 0x28
 8006f4e:	2101      	movs	r1, #1
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fbab 	bl	80076ac <RCCEx_PLL3_Config>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	2100      	movs	r1, #0
 8006f76:	6039      	str	r1, [r7, #0]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	607b      	str	r3, [r7, #4]
 8006f7e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f82:	460b      	mov	r3, r1
 8006f84:	4313      	orrs	r3, r2
 8006f86:	d011      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8c:	3328      	adds	r3, #40	@ 0x28
 8006f8e:	2102      	movs	r1, #2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fb8b 	bl	80076ac <RCCEx_PLL3_Config>
 8006f96:	4603      	mov	r3, r0
 8006f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006fac:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e000      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc6:	bf00      	nop
 8006fc8:	58024400 	.word	0x58024400

08006fcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fd0:	f7fe fdbe 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	4b06      	ldr	r3, [pc, #24]	@ (8006ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	091b      	lsrs	r3, r3, #4
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	4904      	ldr	r1, [pc, #16]	@ (8006ff4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fe2:	5ccb      	ldrb	r3, [r1, r3]
 8006fe4:	f003 031f 	and.w	r3, r3, #31
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	58024400 	.word	0x58024400
 8006ff4:	0800a014 	.word	0x0800a014

08006ff8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b089      	sub	sp, #36	@ 0x24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007000:	4ba1      	ldr	r3, [pc, #644]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800700a:	4b9f      	ldr	r3, [pc, #636]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700e:	0b1b      	lsrs	r3, r3, #12
 8007010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007014:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007016:	4b9c      	ldr	r3, [pc, #624]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701a:	091b      	lsrs	r3, r3, #4
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007022:	4b99      	ldr	r3, [pc, #612]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007026:	08db      	lsrs	r3, r3, #3
 8007028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 8111 	beq.w	8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b02      	cmp	r3, #2
 800704a:	f000 8083 	beq.w	8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b02      	cmp	r3, #2
 8007052:	f200 80a1 	bhi.w	8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d056      	beq.n	8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007062:	e099      	b.n	8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007064:	4b88      	ldr	r3, [pc, #544]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d02d      	beq.n	80070cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007070:	4b85      	ldr	r3, [pc, #532]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	08db      	lsrs	r3, r3, #3
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	4a84      	ldr	r2, [pc, #528]	@ (800728c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
 8007080:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709a:	4b7b      	ldr	r3, [pc, #492]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070ca:	e087      	b.n	80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007294 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	4b6a      	ldr	r3, [pc, #424]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80070f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800710e:	e065      	b.n	80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800711e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007122:	4b59      	ldr	r3, [pc, #356]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007132:	ed97 6a03 	vldr	s12, [r7, #12]
 8007136:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800713a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007152:	e043      	b.n	80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800729c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007166:	4b48      	ldr	r3, [pc, #288]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a03 	vldr	s12, [r7, #12]
 800717a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007196:	e021      	b.n	80071dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071aa:	4b37      	ldr	r3, [pc, #220]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80071be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e0:	0a5b      	lsrs	r3, r3, #9
 80071e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007202:	ee17 2a90 	vmov	r2, s15
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800720a:	4b1f      	ldr	r3, [pc, #124]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800720c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720e:	0c1b      	lsrs	r3, r3, #16
 8007210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007214:	ee07 3a90 	vmov	s15, r3
 8007218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007224:	edd7 6a07 	vldr	s13, [r7, #28]
 8007228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800722c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007230:	ee17 2a90 	vmov	r2, s15
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007238:	4b13      	ldr	r3, [pc, #76]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800723a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723c:	0e1b      	lsrs	r3, r3, #24
 800723e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800724e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007252:	edd7 6a07 	vldr	s13, [r7, #28]
 8007256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725e:	ee17 2a90 	vmov	r2, s15
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007266:	e008      	b.n	800727a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	609a      	str	r2, [r3, #8]
}
 800727a:	bf00      	nop
 800727c:	3724      	adds	r7, #36	@ 0x24
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	58024400 	.word	0x58024400
 800728c:	03d09000 	.word	0x03d09000
 8007290:	46000000 	.word	0x46000000
 8007294:	4c742400 	.word	0x4c742400
 8007298:	4a742400 	.word	0x4a742400
 800729c:	4af42400 	.word	0x4af42400

080072a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b089      	sub	sp, #36	@ 0x24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072a8:	4ba1      	ldr	r3, [pc, #644]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ac:	f003 0303 	and.w	r3, r3, #3
 80072b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80072b2:	4b9f      	ldr	r3, [pc, #636]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b6:	0d1b      	lsrs	r3, r3, #20
 80072b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072be:	4b9c      	ldr	r3, [pc, #624]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c2:	0a1b      	lsrs	r3, r3, #8
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072ca:	4b99      	ldr	r3, [pc, #612]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ce:	08db      	lsrs	r3, r3, #3
 80072d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8111 	beq.w	8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	f000 8083 	beq.w	80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	f200 80a1 	bhi.w	8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d056      	beq.n	80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800730a:	e099      	b.n	8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800730c:	4b88      	ldr	r3, [pc, #544]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	d02d      	beq.n	8007374 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007318:	4b85      	ldr	r3, [pc, #532]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	08db      	lsrs	r3, r3, #3
 800731e:	f003 0303 	and.w	r3, r3, #3
 8007322:	4a84      	ldr	r2, [pc, #528]	@ (8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007324:	fa22 f303 	lsr.w	r3, r2, r3
 8007328:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	ee07 3a90 	vmov	s15, r3
 8007330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007342:	4b7b      	ldr	r3, [pc, #492]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007352:	ed97 6a03 	vldr	s12, [r7, #12]
 8007356:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800735a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007372:	e087      	b.n	8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800753c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007386:	4b6a      	ldr	r3, [pc, #424]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007396:	ed97 6a03 	vldr	s12, [r7, #12]
 800739a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800739e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b6:	e065      	b.n	8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ca:	4b59      	ldr	r3, [pc, #356]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073da:	ed97 6a03 	vldr	s12, [r7, #12]
 80073de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073fa:	e043      	b.n	8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800740a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740e:	4b48      	ldr	r3, [pc, #288]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007422:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800743e:	e021      	b.n	8007484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800744e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007452:	4b37      	ldr	r3, [pc, #220]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007462:	ed97 6a03 	vldr	s12, [r7, #12]
 8007466:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800746a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007482:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007484:	4b2a      	ldr	r3, [pc, #168]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007488:	0a5b      	lsrs	r3, r3, #9
 800748a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800749a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800749e:	edd7 6a07 	vldr	s13, [r7, #28]
 80074a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074aa:	ee17 2a90 	vmov	r2, s15
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80074b2:	4b1f      	ldr	r3, [pc, #124]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b6:	0c1b      	lsrs	r3, r3, #16
 80074b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074bc:	ee07 3a90 	vmov	s15, r3
 80074c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80074d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074d8:	ee17 2a90 	vmov	r2, s15
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074e0:	4b13      	ldr	r3, [pc, #76]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e4:	0e1b      	lsrs	r3, r3, #24
 80074e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80074fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007506:	ee17 2a90 	vmov	r2, s15
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800750e:	e008      	b.n	8007522 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	609a      	str	r2, [r3, #8]
}
 8007522:	bf00      	nop
 8007524:	3724      	adds	r7, #36	@ 0x24
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	58024400 	.word	0x58024400
 8007534:	03d09000 	.word	0x03d09000
 8007538:	46000000 	.word	0x46000000
 800753c:	4c742400 	.word	0x4c742400
 8007540:	4a742400 	.word	0x4a742400
 8007544:	4af42400 	.word	0x4af42400

08007548 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007556:	4b53      	ldr	r3, [pc, #332]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 8007558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	2b03      	cmp	r3, #3
 8007560:	d101      	bne.n	8007566 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e099      	b.n	800769a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007566:	4b4f      	ldr	r3, [pc, #316]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a4e      	ldr	r2, [pc, #312]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 800756c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007572:	f7fa f8bf 	bl	80016f4 <HAL_GetTick>
 8007576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007578:	e008      	b.n	800758c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800757a:	f7fa f8bb 	bl	80016f4 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d901      	bls.n	800758c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e086      	b.n	800769a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800758c:	4b45      	ldr	r3, [pc, #276]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1f0      	bne.n	800757a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007598:	4b42      	ldr	r3, [pc, #264]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 800759a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	031b      	lsls	r3, r3, #12
 80075a6:	493f      	ldr	r1, [pc, #252]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	025b      	lsls	r3, r3, #9
 80075be:	b29b      	uxth	r3, r3
 80075c0:	431a      	orrs	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	041b      	lsls	r3, r3, #16
 80075ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	061b      	lsls	r3, r3, #24
 80075d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075dc:	4931      	ldr	r1, [pc, #196]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80075e2:	4b30      	ldr	r3, [pc, #192]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	492d      	ldr	r1, [pc, #180]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80075f4:	4b2b      	ldr	r3, [pc, #172]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 80075f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f8:	f023 0220 	bic.w	r2, r3, #32
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	4928      	ldr	r1, [pc, #160]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 8007602:	4313      	orrs	r3, r2
 8007604:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007606:	4b27      	ldr	r3, [pc, #156]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	4a26      	ldr	r2, [pc, #152]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 800760c:	f023 0310 	bic.w	r3, r3, #16
 8007610:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007612:	4b24      	ldr	r3, [pc, #144]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 8007614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007616:	4b24      	ldr	r3, [pc, #144]	@ (80076a8 <RCCEx_PLL2_Config+0x160>)
 8007618:	4013      	ands	r3, r2
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	69d2      	ldr	r2, [r2, #28]
 800761e:	00d2      	lsls	r2, r2, #3
 8007620:	4920      	ldr	r1, [pc, #128]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 8007622:	4313      	orrs	r3, r2
 8007624:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007626:	4b1f      	ldr	r3, [pc, #124]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 8007628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762a:	4a1e      	ldr	r2, [pc, #120]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 800762c:	f043 0310 	orr.w	r3, r3, #16
 8007630:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d106      	bne.n	8007646 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007638:	4b1a      	ldr	r3, [pc, #104]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 800763a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763c:	4a19      	ldr	r2, [pc, #100]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 800763e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007644:	e00f      	b.n	8007666 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d106      	bne.n	800765a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800764c:	4b15      	ldr	r3, [pc, #84]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 800764e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007650:	4a14      	ldr	r2, [pc, #80]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 8007652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007656:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007658:	e005      	b.n	8007666 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800765a:	4b12      	ldr	r3, [pc, #72]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 800765c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765e:	4a11      	ldr	r2, [pc, #68]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 8007660:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007664:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007666:	4b0f      	ldr	r3, [pc, #60]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a0e      	ldr	r2, [pc, #56]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 800766c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007672:	f7fa f83f 	bl	80016f4 <HAL_GetTick>
 8007676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007678:	e008      	b.n	800768c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800767a:	f7fa f83b 	bl	80016f4 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e006      	b.n	800769a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800768c:	4b05      	ldr	r3, [pc, #20]	@ (80076a4 <RCCEx_PLL2_Config+0x15c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d0f0      	beq.n	800767a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	58024400 	.word	0x58024400
 80076a8:	ffff0007 	.word	0xffff0007

080076ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076ba:	4b53      	ldr	r3, [pc, #332]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80076bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d101      	bne.n	80076ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e099      	b.n	80077fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076ca:	4b4f      	ldr	r3, [pc, #316]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a4e      	ldr	r2, [pc, #312]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80076d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d6:	f7fa f80d 	bl	80016f4 <HAL_GetTick>
 80076da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076dc:	e008      	b.n	80076f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076de:	f7fa f809 	bl	80016f4 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d901      	bls.n	80076f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e086      	b.n	80077fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076f0:	4b45      	ldr	r3, [pc, #276]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1f0      	bne.n	80076de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80076fc:	4b42      	ldr	r3, [pc, #264]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80076fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007700:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	051b      	lsls	r3, r3, #20
 800770a:	493f      	ldr	r1, [pc, #252]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 800770c:	4313      	orrs	r3, r2
 800770e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	3b01      	subs	r3, #1
 8007716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	3b01      	subs	r3, #1
 8007720:	025b      	lsls	r3, r3, #9
 8007722:	b29b      	uxth	r3, r3
 8007724:	431a      	orrs	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	3b01      	subs	r3, #1
 800772c:	041b      	lsls	r3, r3, #16
 800772e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	3b01      	subs	r3, #1
 800773a:	061b      	lsls	r3, r3, #24
 800773c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007740:	4931      	ldr	r1, [pc, #196]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 8007742:	4313      	orrs	r3, r2
 8007744:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007746:	4b30      	ldr	r3, [pc, #192]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 8007748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	492d      	ldr	r1, [pc, #180]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 8007754:	4313      	orrs	r3, r2
 8007756:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007758:	4b2b      	ldr	r3, [pc, #172]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 800775a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	4928      	ldr	r1, [pc, #160]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 8007766:	4313      	orrs	r3, r2
 8007768:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800776a:	4b27      	ldr	r3, [pc, #156]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 800776c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776e:	4a26      	ldr	r2, [pc, #152]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 8007770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007774:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007776:	4b24      	ldr	r3, [pc, #144]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 8007778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800777a:	4b24      	ldr	r3, [pc, #144]	@ (800780c <RCCEx_PLL3_Config+0x160>)
 800777c:	4013      	ands	r3, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	69d2      	ldr	r2, [r2, #28]
 8007782:	00d2      	lsls	r2, r2, #3
 8007784:	4920      	ldr	r1, [pc, #128]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 8007786:	4313      	orrs	r3, r2
 8007788:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800778a:	4b1f      	ldr	r3, [pc, #124]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 800778c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778e:	4a1e      	ldr	r2, [pc, #120]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 8007790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007794:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d106      	bne.n	80077aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800779c:	4b1a      	ldr	r3, [pc, #104]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 800779e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a0:	4a19      	ldr	r2, [pc, #100]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80077a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80077a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077a8:	e00f      	b.n	80077ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d106      	bne.n	80077be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077b0:	4b15      	ldr	r3, [pc, #84]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	4a14      	ldr	r2, [pc, #80]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80077b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80077ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077bc:	e005      	b.n	80077ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077be:	4b12      	ldr	r3, [pc, #72]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c2:	4a11      	ldr	r2, [pc, #68]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80077c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a0e      	ldr	r2, [pc, #56]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80077d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d6:	f7f9 ff8d 	bl	80016f4 <HAL_GetTick>
 80077da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077dc:	e008      	b.n	80077f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077de:	f7f9 ff89 	bl	80016f4 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d901      	bls.n	80077f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e006      	b.n	80077fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077f0:	4b05      	ldr	r3, [pc, #20]	@ (8007808 <RCCEx_PLL3_Config+0x15c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d0f0      	beq.n	80077de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	58024400 	.word	0x58024400
 800780c:	ffff0007 	.word	0xffff0007

08007810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e049      	b.n	80078b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d106      	bne.n	800783c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f841 	bl	80078be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3304      	adds	r3, #4
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f000 f9f6 	bl	8007c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
	...

080078d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d001      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e05e      	b.n	80079aa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a2b      	ldr	r2, [pc, #172]	@ (80079b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d02c      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x94>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007916:	d027      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x94>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a27      	ldr	r2, [pc, #156]	@ (80079bc <HAL_TIM_Base_Start_IT+0xe8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d022      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x94>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a26      	ldr	r2, [pc, #152]	@ (80079c0 <HAL_TIM_Base_Start_IT+0xec>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d01d      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x94>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a24      	ldr	r2, [pc, #144]	@ (80079c4 <HAL_TIM_Base_Start_IT+0xf0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d018      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x94>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a23      	ldr	r2, [pc, #140]	@ (80079c8 <HAL_TIM_Base_Start_IT+0xf4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d013      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x94>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a21      	ldr	r2, [pc, #132]	@ (80079cc <HAL_TIM_Base_Start_IT+0xf8>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00e      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x94>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a20      	ldr	r2, [pc, #128]	@ (80079d0 <HAL_TIM_Base_Start_IT+0xfc>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d009      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x94>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1e      	ldr	r2, [pc, #120]	@ (80079d4 <HAL_TIM_Base_Start_IT+0x100>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d004      	beq.n	8007968 <HAL_TIM_Base_Start_IT+0x94>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1d      	ldr	r2, [pc, #116]	@ (80079d8 <HAL_TIM_Base_Start_IT+0x104>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d115      	bne.n	8007994 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	4b1b      	ldr	r3, [pc, #108]	@ (80079dc <HAL_TIM_Base_Start_IT+0x108>)
 8007970:	4013      	ands	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b06      	cmp	r3, #6
 8007978:	d015      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0xd2>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007980:	d011      	beq.n	80079a6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f042 0201 	orr.w	r2, r2, #1
 8007990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007992:	e008      	b.n	80079a6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0201 	orr.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e000      	b.n	80079a8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	40010000 	.word	0x40010000
 80079bc:	40000400 	.word	0x40000400
 80079c0:	40000800 	.word	0x40000800
 80079c4:	40000c00 	.word	0x40000c00
 80079c8:	40010400 	.word	0x40010400
 80079cc:	40001800 	.word	0x40001800
 80079d0:	40014000 	.word	0x40014000
 80079d4:	4000e000 	.word	0x4000e000
 80079d8:	4000e400 	.word	0x4000e400
 80079dc:	00010007 	.word	0x00010007

080079e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d020      	beq.n	8007a44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01b      	beq.n	8007a44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f06f 0202 	mvn.w	r2, #2
 8007a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f8e9 	bl	8007c02 <HAL_TIM_IC_CaptureCallback>
 8007a30:	e005      	b.n	8007a3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f8db 	bl	8007bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f8ec 	bl	8007c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	f003 0304 	and.w	r3, r3, #4
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d020      	beq.n	8007a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01b      	beq.n	8007a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f06f 0204 	mvn.w	r2, #4
 8007a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2202      	movs	r2, #2
 8007a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f8c3 	bl	8007c02 <HAL_TIM_IC_CaptureCallback>
 8007a7c:	e005      	b.n	8007a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f8b5 	bl	8007bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f8c6 	bl	8007c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d020      	beq.n	8007adc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f003 0308 	and.w	r3, r3, #8
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01b      	beq.n	8007adc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f06f 0208 	mvn.w	r2, #8
 8007aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2204      	movs	r2, #4
 8007ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f003 0303 	and.w	r3, r3, #3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f89d 	bl	8007c02 <HAL_TIM_IC_CaptureCallback>
 8007ac8:	e005      	b.n	8007ad6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f88f 	bl	8007bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f8a0 	bl	8007c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d020      	beq.n	8007b28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f003 0310 	and.w	r3, r3, #16
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d01b      	beq.n	8007b28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f06f 0210 	mvn.w	r2, #16
 8007af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2208      	movs	r2, #8
 8007afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f877 	bl	8007c02 <HAL_TIM_IC_CaptureCallback>
 8007b14:	e005      	b.n	8007b22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f869 	bl	8007bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f87a 	bl	8007c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00c      	beq.n	8007b4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f06f 0201 	mvn.w	r2, #1
 8007b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7f9 fb52 	bl	80011f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d104      	bne.n	8007b60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00c      	beq.n	8007b7a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f91f 	bl	8007db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00c      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d007      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f917 	bl	8007dcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00c      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f834 	bl	8007c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f003 0320 	and.w	r3, r3, #32
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00c      	beq.n	8007be6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f06f 0220 	mvn.w	r2, #32
 8007bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f8df 	bl	8007da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
	...

08007c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a4a      	ldr	r2, [pc, #296]	@ (8007d7c <TIM_Base_SetConfig+0x13c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d013      	beq.n	8007c80 <TIM_Base_SetConfig+0x40>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c5e:	d00f      	beq.n	8007c80 <TIM_Base_SetConfig+0x40>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a47      	ldr	r2, [pc, #284]	@ (8007d80 <TIM_Base_SetConfig+0x140>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00b      	beq.n	8007c80 <TIM_Base_SetConfig+0x40>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a46      	ldr	r2, [pc, #280]	@ (8007d84 <TIM_Base_SetConfig+0x144>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d007      	beq.n	8007c80 <TIM_Base_SetConfig+0x40>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a45      	ldr	r2, [pc, #276]	@ (8007d88 <TIM_Base_SetConfig+0x148>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d003      	beq.n	8007c80 <TIM_Base_SetConfig+0x40>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a44      	ldr	r2, [pc, #272]	@ (8007d8c <TIM_Base_SetConfig+0x14c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d108      	bne.n	8007c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a39      	ldr	r2, [pc, #228]	@ (8007d7c <TIM_Base_SetConfig+0x13c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d027      	beq.n	8007cea <TIM_Base_SetConfig+0xaa>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca0:	d023      	beq.n	8007cea <TIM_Base_SetConfig+0xaa>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a36      	ldr	r2, [pc, #216]	@ (8007d80 <TIM_Base_SetConfig+0x140>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d01f      	beq.n	8007cea <TIM_Base_SetConfig+0xaa>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a35      	ldr	r2, [pc, #212]	@ (8007d84 <TIM_Base_SetConfig+0x144>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d01b      	beq.n	8007cea <TIM_Base_SetConfig+0xaa>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a34      	ldr	r2, [pc, #208]	@ (8007d88 <TIM_Base_SetConfig+0x148>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d017      	beq.n	8007cea <TIM_Base_SetConfig+0xaa>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a33      	ldr	r2, [pc, #204]	@ (8007d8c <TIM_Base_SetConfig+0x14c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d013      	beq.n	8007cea <TIM_Base_SetConfig+0xaa>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a32      	ldr	r2, [pc, #200]	@ (8007d90 <TIM_Base_SetConfig+0x150>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00f      	beq.n	8007cea <TIM_Base_SetConfig+0xaa>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a31      	ldr	r2, [pc, #196]	@ (8007d94 <TIM_Base_SetConfig+0x154>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d00b      	beq.n	8007cea <TIM_Base_SetConfig+0xaa>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a30      	ldr	r2, [pc, #192]	@ (8007d98 <TIM_Base_SetConfig+0x158>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d007      	beq.n	8007cea <TIM_Base_SetConfig+0xaa>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8007d9c <TIM_Base_SetConfig+0x15c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d003      	beq.n	8007cea <TIM_Base_SetConfig+0xaa>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8007da0 <TIM_Base_SetConfig+0x160>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d108      	bne.n	8007cfc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a16      	ldr	r2, [pc, #88]	@ (8007d7c <TIM_Base_SetConfig+0x13c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d00f      	beq.n	8007d48 <TIM_Base_SetConfig+0x108>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a18      	ldr	r2, [pc, #96]	@ (8007d8c <TIM_Base_SetConfig+0x14c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00b      	beq.n	8007d48 <TIM_Base_SetConfig+0x108>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a17      	ldr	r2, [pc, #92]	@ (8007d90 <TIM_Base_SetConfig+0x150>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d007      	beq.n	8007d48 <TIM_Base_SetConfig+0x108>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a16      	ldr	r2, [pc, #88]	@ (8007d94 <TIM_Base_SetConfig+0x154>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d003      	beq.n	8007d48 <TIM_Base_SetConfig+0x108>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a15      	ldr	r2, [pc, #84]	@ (8007d98 <TIM_Base_SetConfig+0x158>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d103      	bne.n	8007d50 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	691a      	ldr	r2, [r3, #16]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d105      	bne.n	8007d6e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	f023 0201 	bic.w	r2, r3, #1
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	611a      	str	r2, [r3, #16]
  }
}
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	40010000 	.word	0x40010000
 8007d80:	40000400 	.word	0x40000400
 8007d84:	40000800 	.word	0x40000800
 8007d88:	40000c00 	.word	0x40000c00
 8007d8c:	40010400 	.word	0x40010400
 8007d90:	40014000 	.word	0x40014000
 8007d94:	40014400 	.word	0x40014400
 8007d98:	40014800 	.word	0x40014800
 8007d9c:	4000e000 	.word	0x4000e000
 8007da0:	4000e400 	.word	0x4000e400

08007da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e042      	b.n	8007e78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d106      	bne.n	8007e0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7f9 fa25 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2224      	movs	r2, #36	@ 0x24
 8007e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0201 	bic.w	r2, r2, #1
 8007e20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f001 fb04 	bl	8009438 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fc95 	bl	8008760 <UART_SetConfig>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e01b      	b.n	8007e78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0201 	orr.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 fb83 	bl	800957c <UART_CheckIdleState>
 8007e76:	4603      	mov	r3, r0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08a      	sub	sp, #40	@ 0x28
 8007e84:	af02      	add	r7, sp, #8
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	d17b      	bne.n	8007f92 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <HAL_UART_Transmit+0x26>
 8007ea0:	88fb      	ldrh	r3, [r7, #6]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e074      	b.n	8007f94 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2221      	movs	r2, #33	@ 0x21
 8007eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007eba:	f7f9 fc1b 	bl	80016f4 <HAL_GetTick>
 8007ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	88fa      	ldrh	r2, [r7, #6]
 8007ec4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	88fa      	ldrh	r2, [r7, #6]
 8007ecc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed8:	d108      	bne.n	8007eec <HAL_UART_Transmit+0x6c>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d104      	bne.n	8007eec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	e003      	b.n	8007ef4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ef4:	e030      	b.n	8007f58 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2200      	movs	r2, #0
 8007efe:	2180      	movs	r1, #128	@ 0x80
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f001 fbe5 	bl	80096d0 <UART_WaitOnFlagUntilTimeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d005      	beq.n	8007f18 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e03d      	b.n	8007f94 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10b      	bne.n	8007f36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	3302      	adds	r3, #2
 8007f32:	61bb      	str	r3, [r7, #24]
 8007f34:	e007      	b.n	8007f46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	781a      	ldrb	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	3301      	adds	r3, #1
 8007f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1c8      	bne.n	8007ef6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2140      	movs	r1, #64	@ 0x40
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f001 fbae 	bl	80096d0 <UART_WaitOnFlagUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d005      	beq.n	8007f86 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e006      	b.n	8007f94 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e000      	b.n	8007f94 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007f92:	2302      	movs	r3, #2
  }
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3720      	adds	r7, #32
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b0ba      	sub	sp, #232	@ 0xe8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007fc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007fc6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007fca:	4013      	ands	r3, r2
 8007fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d11b      	bne.n	8008010 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fdc:	f003 0320 	and.w	r3, r3, #32
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d015      	beq.n	8008010 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fe8:	f003 0320 	and.w	r3, r3, #32
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d105      	bne.n	8007ffc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d009      	beq.n	8008010 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 8377 	beq.w	80086f4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
      }
      return;
 800800e:	e371      	b.n	80086f4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 8123 	beq.w	8008260 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800801a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800801e:	4b8d      	ldr	r3, [pc, #564]	@ (8008254 <HAL_UART_IRQHandler+0x2b8>)
 8008020:	4013      	ands	r3, r2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008026:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800802a:	4b8b      	ldr	r3, [pc, #556]	@ (8008258 <HAL_UART_IRQHandler+0x2bc>)
 800802c:	4013      	ands	r3, r2
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 8116 	beq.w	8008260 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b00      	cmp	r3, #0
 800803e:	d011      	beq.n	8008064 <HAL_UART_IRQHandler+0xc8>
 8008040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00b      	beq.n	8008064 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2201      	movs	r2, #1
 8008052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800805a:	f043 0201 	orr.w	r2, r3, #1
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d011      	beq.n	8008094 <HAL_UART_IRQHandler+0xf8>
 8008070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2202      	movs	r2, #2
 8008082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808a:	f043 0204 	orr.w	r2, r3, #4
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d011      	beq.n	80080c4 <HAL_UART_IRQHandler+0x128>
 80080a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00b      	beq.n	80080c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2204      	movs	r2, #4
 80080b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ba:	f043 0202 	orr.w	r2, r3, #2
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c8:	f003 0308 	and.w	r3, r3, #8
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d017      	beq.n	8008100 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d105      	bne.n	80080e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80080dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080e0:	4b5c      	ldr	r3, [pc, #368]	@ (8008254 <HAL_UART_IRQHandler+0x2b8>)
 80080e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00b      	beq.n	8008100 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2208      	movs	r2, #8
 80080ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f6:	f043 0208 	orr.w	r2, r3, #8
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008108:	2b00      	cmp	r3, #0
 800810a:	d012      	beq.n	8008132 <HAL_UART_IRQHandler+0x196>
 800810c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008110:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00c      	beq.n	8008132 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008120:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008128:	f043 0220 	orr.w	r2, r3, #32
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 82dd 	beq.w	80086f8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800813e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d013      	beq.n	8008172 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800814a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d105      	bne.n	8008162 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800815a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d007      	beq.n	8008172 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008178:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008186:	2b40      	cmp	r3, #64	@ 0x40
 8008188:	d005      	beq.n	8008196 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800818a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800818e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008192:	2b00      	cmp	r3, #0
 8008194:	d054      	beq.n	8008240 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 fbf0 	bl	800997c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a6:	2b40      	cmp	r3, #64	@ 0x40
 80081a8:	d146      	bne.n	8008238 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3308      	adds	r3, #8
 80081b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3308      	adds	r3, #8
 80081d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1d9      	bne.n	80081aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d017      	beq.n	8008230 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008206:	4a15      	ldr	r2, [pc, #84]	@ (800825c <HAL_UART_IRQHandler+0x2c0>)
 8008208:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008210:	4618      	mov	r0, r3
 8008212:	f7fa fc5f 	bl	8002ad4 <HAL_DMA_Abort_IT>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d019      	beq.n	8008250 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800822a:	4610      	mov	r0, r2
 800822c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822e:	e00f      	b.n	8008250 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fa8b 	bl	800874c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008236:	e00b      	b.n	8008250 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fa87 	bl	800874c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823e:	e007      	b.n	8008250 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fa83 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800824e:	e253      	b.n	80086f8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008250:	bf00      	nop
    return;
 8008252:	e251      	b.n	80086f8 <HAL_UART_IRQHandler+0x75c>
 8008254:	10000001 	.word	0x10000001
 8008258:	04000120 	.word	0x04000120
 800825c:	08009c2f 	.word	0x08009c2f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008264:	2b01      	cmp	r3, #1
 8008266:	f040 81e7 	bne.w	8008638 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800826a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800826e:	f003 0310 	and.w	r3, r3, #16
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 81e0 	beq.w	8008638 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 81d9 	beq.w	8008638 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2210      	movs	r2, #16
 800828c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	2b40      	cmp	r3, #64	@ 0x40
 800829a:	f040 8151 	bne.w	8008540 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a96      	ldr	r2, [pc, #600]	@ (8008500 <HAL_UART_IRQHandler+0x564>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d068      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a93      	ldr	r2, [pc, #588]	@ (8008504 <HAL_UART_IRQHandler+0x568>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d061      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a91      	ldr	r2, [pc, #580]	@ (8008508 <HAL_UART_IRQHandler+0x56c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d05a      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a8e      	ldr	r2, [pc, #568]	@ (800850c <HAL_UART_IRQHandler+0x570>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d053      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a8c      	ldr	r2, [pc, #560]	@ (8008510 <HAL_UART_IRQHandler+0x574>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d04c      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a89      	ldr	r2, [pc, #548]	@ (8008514 <HAL_UART_IRQHandler+0x578>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d045      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a87      	ldr	r2, [pc, #540]	@ (8008518 <HAL_UART_IRQHandler+0x57c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d03e      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a84      	ldr	r2, [pc, #528]	@ (800851c <HAL_UART_IRQHandler+0x580>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d037      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a82      	ldr	r2, [pc, #520]	@ (8008520 <HAL_UART_IRQHandler+0x584>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d030      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a7f      	ldr	r2, [pc, #508]	@ (8008524 <HAL_UART_IRQHandler+0x588>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d029      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a7d      	ldr	r2, [pc, #500]	@ (8008528 <HAL_UART_IRQHandler+0x58c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d022      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a7a      	ldr	r2, [pc, #488]	@ (800852c <HAL_UART_IRQHandler+0x590>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d01b      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a78      	ldr	r2, [pc, #480]	@ (8008530 <HAL_UART_IRQHandler+0x594>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d014      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a75      	ldr	r2, [pc, #468]	@ (8008534 <HAL_UART_IRQHandler+0x598>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00d      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a73      	ldr	r2, [pc, #460]	@ (8008538 <HAL_UART_IRQHandler+0x59c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d006      	beq.n	800837e <HAL_UART_IRQHandler+0x3e2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a70      	ldr	r2, [pc, #448]	@ (800853c <HAL_UART_IRQHandler+0x5a0>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d106      	bne.n	800838c <HAL_UART_IRQHandler+0x3f0>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	b29b      	uxth	r3, r3
 800838a:	e005      	b.n	8008398 <HAL_UART_IRQHandler+0x3fc>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	b29b      	uxth	r3, r3
 8008398:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800839c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 81ab 	beq.w	80086fc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083b0:	429a      	cmp	r2, r3
 80083b2:	f080 81a3 	bcs.w	80086fc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083cc:	f000 8087 	beq.w	80084de <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	461a      	mov	r2, r3
 80083f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80083fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008406:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1da      	bne.n	80083d0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3308      	adds	r3, #8
 8008420:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800842a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800842c:	f023 0301 	bic.w	r3, r3, #1
 8008430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800843e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008442:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008446:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e1      	bne.n	800841a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3308      	adds	r3, #8
 800845c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800846c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3308      	adds	r3, #8
 8008476:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800847a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800847c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008480:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e3      	bne.n	8008456 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084ac:	f023 0310 	bic.w	r3, r3, #16
 80084b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1e4      	bne.n	800849c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084d8:	4618      	mov	r0, r3
 80084da:	f7f9 ffdd 	bl	8002498 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2202      	movs	r2, #2
 80084e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7f8 f9ab 	bl	8000854 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084fe:	e0fd      	b.n	80086fc <HAL_UART_IRQHandler+0x760>
 8008500:	40020010 	.word	0x40020010
 8008504:	40020028 	.word	0x40020028
 8008508:	40020040 	.word	0x40020040
 800850c:	40020058 	.word	0x40020058
 8008510:	40020070 	.word	0x40020070
 8008514:	40020088 	.word	0x40020088
 8008518:	400200a0 	.word	0x400200a0
 800851c:	400200b8 	.word	0x400200b8
 8008520:	40020410 	.word	0x40020410
 8008524:	40020428 	.word	0x40020428
 8008528:	40020440 	.word	0x40020440
 800852c:	40020458 	.word	0x40020458
 8008530:	40020470 	.word	0x40020470
 8008534:	40020488 	.word	0x40020488
 8008538:	400204a0 	.word	0x400204a0
 800853c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800854c:	b29b      	uxth	r3, r3
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800855a:	b29b      	uxth	r3, r3
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 80cf 	beq.w	8008700 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008562:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 80ca 	beq.w	8008700 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800857a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008580:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800858e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008590:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008594:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800859c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e4      	bne.n	800856c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3308      	adds	r3, #8
 80085a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	623b      	str	r3, [r7, #32]
   return(result);
 80085b2:	6a3a      	ldr	r2, [r7, #32]
 80085b4:	4b55      	ldr	r3, [pc, #340]	@ (800870c <HAL_UART_IRQHandler+0x770>)
 80085b6:	4013      	ands	r3, r2
 80085b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3308      	adds	r3, #8
 80085c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80085c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80085c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e3      	bne.n	80085a2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2220      	movs	r2, #32
 80085de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0310 	bic.w	r3, r3, #16
 8008602:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	69b9      	ldr	r1, [r7, #24]
 8008616:	69fa      	ldr	r2, [r7, #28]
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	617b      	str	r3, [r7, #20]
   return(result);
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e4      	bne.n	80085ee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2202      	movs	r2, #2
 8008628:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800862a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7f8 f90f 	bl	8000854 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008636:	e063      	b.n	8008700 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800863c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00e      	beq.n	8008662 <HAL_UART_IRQHandler+0x6c6>
 8008644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d008      	beq.n	8008662 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008658:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 fb28 	bl	8009cb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008660:	e051      	b.n	8008706 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800866a:	2b00      	cmp	r3, #0
 800866c:	d014      	beq.n	8008698 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800866e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008676:	2b00      	cmp	r3, #0
 8008678:	d105      	bne.n	8008686 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800867a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800867e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d008      	beq.n	8008698 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800868a:	2b00      	cmp	r3, #0
 800868c:	d03a      	beq.n	8008704 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	4798      	blx	r3
    }
    return;
 8008696:	e035      	b.n	8008704 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800869c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d009      	beq.n	80086b8 <HAL_UART_IRQHandler+0x71c>
 80086a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 fad2 	bl	8009c5a <UART_EndTransmit_IT>
    return;
 80086b6:	e026      	b.n	8008706 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d009      	beq.n	80086d8 <HAL_UART_IRQHandler+0x73c>
 80086c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f001 fb01 	bl	8009cd8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086d6:	e016      	b.n	8008706 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d010      	beq.n	8008706 <HAL_UART_IRQHandler+0x76a>
 80086e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da0c      	bge.n	8008706 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 fae9 	bl	8009cc4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086f2:	e008      	b.n	8008706 <HAL_UART_IRQHandler+0x76a>
      return;
 80086f4:	bf00      	nop
 80086f6:	e006      	b.n	8008706 <HAL_UART_IRQHandler+0x76a>
    return;
 80086f8:	bf00      	nop
 80086fa:	e004      	b.n	8008706 <HAL_UART_IRQHandler+0x76a>
      return;
 80086fc:	bf00      	nop
 80086fe:	e002      	b.n	8008706 <HAL_UART_IRQHandler+0x76a>
      return;
 8008700:	bf00      	nop
 8008702:	e000      	b.n	8008706 <HAL_UART_IRQHandler+0x76a>
    return;
 8008704:	bf00      	nop
  }
}
 8008706:	37e8      	adds	r7, #232	@ 0xe8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	effffffe 	.word	0xeffffffe

08008710 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008764:	b092      	sub	sp, #72	@ 0x48
 8008766:	af00      	add	r7, sp, #0
 8008768:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	689a      	ldr	r2, [r3, #8]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	431a      	orrs	r2, r3
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	431a      	orrs	r2, r3
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	4313      	orrs	r3, r2
 8008786:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	4bbe      	ldr	r3, [pc, #760]	@ (8008a88 <UART_SetConfig+0x328>)
 8008790:	4013      	ands	r3, r2
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008798:	430b      	orrs	r3, r1
 800879a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4ab3      	ldr	r2, [pc, #716]	@ (8008a8c <UART_SetConfig+0x32c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d004      	beq.n	80087cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087c8:	4313      	orrs	r3, r2
 80087ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	4baf      	ldr	r3, [pc, #700]	@ (8008a90 <UART_SetConfig+0x330>)
 80087d4:	4013      	ands	r3, r2
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	6812      	ldr	r2, [r2, #0]
 80087da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087dc:	430b      	orrs	r3, r1
 80087de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e6:	f023 010f 	bic.w	r1, r3, #15
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	430a      	orrs	r2, r1
 80087f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4aa6      	ldr	r2, [pc, #664]	@ (8008a94 <UART_SetConfig+0x334>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d177      	bne.n	80088f0 <UART_SetConfig+0x190>
 8008800:	4ba5      	ldr	r3, [pc, #660]	@ (8008a98 <UART_SetConfig+0x338>)
 8008802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008804:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008808:	2b28      	cmp	r3, #40	@ 0x28
 800880a:	d86d      	bhi.n	80088e8 <UART_SetConfig+0x188>
 800880c:	a201      	add	r2, pc, #4	@ (adr r2, 8008814 <UART_SetConfig+0xb4>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	080088b9 	.word	0x080088b9
 8008818:	080088e9 	.word	0x080088e9
 800881c:	080088e9 	.word	0x080088e9
 8008820:	080088e9 	.word	0x080088e9
 8008824:	080088e9 	.word	0x080088e9
 8008828:	080088e9 	.word	0x080088e9
 800882c:	080088e9 	.word	0x080088e9
 8008830:	080088e9 	.word	0x080088e9
 8008834:	080088c1 	.word	0x080088c1
 8008838:	080088e9 	.word	0x080088e9
 800883c:	080088e9 	.word	0x080088e9
 8008840:	080088e9 	.word	0x080088e9
 8008844:	080088e9 	.word	0x080088e9
 8008848:	080088e9 	.word	0x080088e9
 800884c:	080088e9 	.word	0x080088e9
 8008850:	080088e9 	.word	0x080088e9
 8008854:	080088c9 	.word	0x080088c9
 8008858:	080088e9 	.word	0x080088e9
 800885c:	080088e9 	.word	0x080088e9
 8008860:	080088e9 	.word	0x080088e9
 8008864:	080088e9 	.word	0x080088e9
 8008868:	080088e9 	.word	0x080088e9
 800886c:	080088e9 	.word	0x080088e9
 8008870:	080088e9 	.word	0x080088e9
 8008874:	080088d1 	.word	0x080088d1
 8008878:	080088e9 	.word	0x080088e9
 800887c:	080088e9 	.word	0x080088e9
 8008880:	080088e9 	.word	0x080088e9
 8008884:	080088e9 	.word	0x080088e9
 8008888:	080088e9 	.word	0x080088e9
 800888c:	080088e9 	.word	0x080088e9
 8008890:	080088e9 	.word	0x080088e9
 8008894:	080088d9 	.word	0x080088d9
 8008898:	080088e9 	.word	0x080088e9
 800889c:	080088e9 	.word	0x080088e9
 80088a0:	080088e9 	.word	0x080088e9
 80088a4:	080088e9 	.word	0x080088e9
 80088a8:	080088e9 	.word	0x080088e9
 80088ac:	080088e9 	.word	0x080088e9
 80088b0:	080088e9 	.word	0x080088e9
 80088b4:	080088e1 	.word	0x080088e1
 80088b8:	2301      	movs	r3, #1
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088be:	e326      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80088c0:	2304      	movs	r3, #4
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c6:	e322      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80088c8:	2308      	movs	r3, #8
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e31e      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80088d0:	2310      	movs	r3, #16
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e31a      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80088d8:	2320      	movs	r3, #32
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e316      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80088e0:	2340      	movs	r3, #64	@ 0x40
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e312      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80088e8:	2380      	movs	r3, #128	@ 0x80
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e30e      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a69      	ldr	r2, [pc, #420]	@ (8008a9c <UART_SetConfig+0x33c>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d130      	bne.n	800895c <UART_SetConfig+0x1fc>
 80088fa:	4b67      	ldr	r3, [pc, #412]	@ (8008a98 <UART_SetConfig+0x338>)
 80088fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	2b05      	cmp	r3, #5
 8008904:	d826      	bhi.n	8008954 <UART_SetConfig+0x1f4>
 8008906:	a201      	add	r2, pc, #4	@ (adr r2, 800890c <UART_SetConfig+0x1ac>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	08008925 	.word	0x08008925
 8008910:	0800892d 	.word	0x0800892d
 8008914:	08008935 	.word	0x08008935
 8008918:	0800893d 	.word	0x0800893d
 800891c:	08008945 	.word	0x08008945
 8008920:	0800894d 	.word	0x0800894d
 8008924:	2300      	movs	r3, #0
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892a:	e2f0      	b.n	8008f0e <UART_SetConfig+0x7ae>
 800892c:	2304      	movs	r3, #4
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008932:	e2ec      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008934:	2308      	movs	r3, #8
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e2e8      	b.n	8008f0e <UART_SetConfig+0x7ae>
 800893c:	2310      	movs	r3, #16
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008942:	e2e4      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008944:	2320      	movs	r3, #32
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894a:	e2e0      	b.n	8008f0e <UART_SetConfig+0x7ae>
 800894c:	2340      	movs	r3, #64	@ 0x40
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008952:	e2dc      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008954:	2380      	movs	r3, #128	@ 0x80
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895a:	e2d8      	b.n	8008f0e <UART_SetConfig+0x7ae>
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a4f      	ldr	r2, [pc, #316]	@ (8008aa0 <UART_SetConfig+0x340>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d130      	bne.n	80089c8 <UART_SetConfig+0x268>
 8008966:	4b4c      	ldr	r3, [pc, #304]	@ (8008a98 <UART_SetConfig+0x338>)
 8008968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	2b05      	cmp	r3, #5
 8008970:	d826      	bhi.n	80089c0 <UART_SetConfig+0x260>
 8008972:	a201      	add	r2, pc, #4	@ (adr r2, 8008978 <UART_SetConfig+0x218>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	08008991 	.word	0x08008991
 800897c:	08008999 	.word	0x08008999
 8008980:	080089a1 	.word	0x080089a1
 8008984:	080089a9 	.word	0x080089a9
 8008988:	080089b1 	.word	0x080089b1
 800898c:	080089b9 	.word	0x080089b9
 8008990:	2300      	movs	r3, #0
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e2ba      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008998:	2304      	movs	r3, #4
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899e:	e2b6      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80089a0:	2308      	movs	r3, #8
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e2b2      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80089a8:	2310      	movs	r3, #16
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ae:	e2ae      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80089b0:	2320      	movs	r3, #32
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b6:	e2aa      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80089b8:	2340      	movs	r3, #64	@ 0x40
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089be:	e2a6      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80089c0:	2380      	movs	r3, #128	@ 0x80
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c6:	e2a2      	b.n	8008f0e <UART_SetConfig+0x7ae>
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a35      	ldr	r2, [pc, #212]	@ (8008aa4 <UART_SetConfig+0x344>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d130      	bne.n	8008a34 <UART_SetConfig+0x2d4>
 80089d2:	4b31      	ldr	r3, [pc, #196]	@ (8008a98 <UART_SetConfig+0x338>)
 80089d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	2b05      	cmp	r3, #5
 80089dc:	d826      	bhi.n	8008a2c <UART_SetConfig+0x2cc>
 80089de:	a201      	add	r2, pc, #4	@ (adr r2, 80089e4 <UART_SetConfig+0x284>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	080089fd 	.word	0x080089fd
 80089e8:	08008a05 	.word	0x08008a05
 80089ec:	08008a0d 	.word	0x08008a0d
 80089f0:	08008a15 	.word	0x08008a15
 80089f4:	08008a1d 	.word	0x08008a1d
 80089f8:	08008a25 	.word	0x08008a25
 80089fc:	2300      	movs	r3, #0
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e284      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008a04:	2304      	movs	r3, #4
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	e280      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008a0c:	2308      	movs	r3, #8
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e27c      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008a14:	2310      	movs	r3, #16
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1a:	e278      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008a1c:	2320      	movs	r3, #32
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a22:	e274      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008a24:	2340      	movs	r3, #64	@ 0x40
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2a:	e270      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008a2c:	2380      	movs	r3, #128	@ 0x80
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a32:	e26c      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa8 <UART_SetConfig+0x348>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d142      	bne.n	8008ac4 <UART_SetConfig+0x364>
 8008a3e:	4b16      	ldr	r3, [pc, #88]	@ (8008a98 <UART_SetConfig+0x338>)
 8008a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a42:	f003 0307 	and.w	r3, r3, #7
 8008a46:	2b05      	cmp	r3, #5
 8008a48:	d838      	bhi.n	8008abc <UART_SetConfig+0x35c>
 8008a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a50 <UART_SetConfig+0x2f0>)
 8008a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a50:	08008a69 	.word	0x08008a69
 8008a54:	08008a71 	.word	0x08008a71
 8008a58:	08008a79 	.word	0x08008a79
 8008a5c:	08008a81 	.word	0x08008a81
 8008a60:	08008aad 	.word	0x08008aad
 8008a64:	08008ab5 	.word	0x08008ab5
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e24e      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008a70:	2304      	movs	r3, #4
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e24a      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008a78:	2308      	movs	r3, #8
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e246      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008a80:	2310      	movs	r3, #16
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a86:	e242      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008a88:	cfff69f3 	.word	0xcfff69f3
 8008a8c:	58000c00 	.word	0x58000c00
 8008a90:	11fff4ff 	.word	0x11fff4ff
 8008a94:	40011000 	.word	0x40011000
 8008a98:	58024400 	.word	0x58024400
 8008a9c:	40004400 	.word	0x40004400
 8008aa0:	40004800 	.word	0x40004800
 8008aa4:	40004c00 	.word	0x40004c00
 8008aa8:	40005000 	.word	0x40005000
 8008aac:	2320      	movs	r3, #32
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ab2:	e22c      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008ab4:	2340      	movs	r3, #64	@ 0x40
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aba:	e228      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008abc:	2380      	movs	r3, #128	@ 0x80
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac2:	e224      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4ab1      	ldr	r2, [pc, #708]	@ (8008d90 <UART_SetConfig+0x630>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d176      	bne.n	8008bbc <UART_SetConfig+0x45c>
 8008ace:	4bb1      	ldr	r3, [pc, #708]	@ (8008d94 <UART_SetConfig+0x634>)
 8008ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ad6:	2b28      	cmp	r3, #40	@ 0x28
 8008ad8:	d86c      	bhi.n	8008bb4 <UART_SetConfig+0x454>
 8008ada:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae0 <UART_SetConfig+0x380>)
 8008adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae0:	08008b85 	.word	0x08008b85
 8008ae4:	08008bb5 	.word	0x08008bb5
 8008ae8:	08008bb5 	.word	0x08008bb5
 8008aec:	08008bb5 	.word	0x08008bb5
 8008af0:	08008bb5 	.word	0x08008bb5
 8008af4:	08008bb5 	.word	0x08008bb5
 8008af8:	08008bb5 	.word	0x08008bb5
 8008afc:	08008bb5 	.word	0x08008bb5
 8008b00:	08008b8d 	.word	0x08008b8d
 8008b04:	08008bb5 	.word	0x08008bb5
 8008b08:	08008bb5 	.word	0x08008bb5
 8008b0c:	08008bb5 	.word	0x08008bb5
 8008b10:	08008bb5 	.word	0x08008bb5
 8008b14:	08008bb5 	.word	0x08008bb5
 8008b18:	08008bb5 	.word	0x08008bb5
 8008b1c:	08008bb5 	.word	0x08008bb5
 8008b20:	08008b95 	.word	0x08008b95
 8008b24:	08008bb5 	.word	0x08008bb5
 8008b28:	08008bb5 	.word	0x08008bb5
 8008b2c:	08008bb5 	.word	0x08008bb5
 8008b30:	08008bb5 	.word	0x08008bb5
 8008b34:	08008bb5 	.word	0x08008bb5
 8008b38:	08008bb5 	.word	0x08008bb5
 8008b3c:	08008bb5 	.word	0x08008bb5
 8008b40:	08008b9d 	.word	0x08008b9d
 8008b44:	08008bb5 	.word	0x08008bb5
 8008b48:	08008bb5 	.word	0x08008bb5
 8008b4c:	08008bb5 	.word	0x08008bb5
 8008b50:	08008bb5 	.word	0x08008bb5
 8008b54:	08008bb5 	.word	0x08008bb5
 8008b58:	08008bb5 	.word	0x08008bb5
 8008b5c:	08008bb5 	.word	0x08008bb5
 8008b60:	08008ba5 	.word	0x08008ba5
 8008b64:	08008bb5 	.word	0x08008bb5
 8008b68:	08008bb5 	.word	0x08008bb5
 8008b6c:	08008bb5 	.word	0x08008bb5
 8008b70:	08008bb5 	.word	0x08008bb5
 8008b74:	08008bb5 	.word	0x08008bb5
 8008b78:	08008bb5 	.word	0x08008bb5
 8008b7c:	08008bb5 	.word	0x08008bb5
 8008b80:	08008bad 	.word	0x08008bad
 8008b84:	2301      	movs	r3, #1
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8a:	e1c0      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008b8c:	2304      	movs	r3, #4
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b92:	e1bc      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008b94:	2308      	movs	r3, #8
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9a:	e1b8      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008b9c:	2310      	movs	r3, #16
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba2:	e1b4      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008ba4:	2320      	movs	r3, #32
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008baa:	e1b0      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008bac:	2340      	movs	r3, #64	@ 0x40
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb2:	e1ac      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008bb4:	2380      	movs	r3, #128	@ 0x80
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bba:	e1a8      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a75      	ldr	r2, [pc, #468]	@ (8008d98 <UART_SetConfig+0x638>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d130      	bne.n	8008c28 <UART_SetConfig+0x4c8>
 8008bc6:	4b73      	ldr	r3, [pc, #460]	@ (8008d94 <UART_SetConfig+0x634>)
 8008bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bca:	f003 0307 	and.w	r3, r3, #7
 8008bce:	2b05      	cmp	r3, #5
 8008bd0:	d826      	bhi.n	8008c20 <UART_SetConfig+0x4c0>
 8008bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd8 <UART_SetConfig+0x478>)
 8008bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd8:	08008bf1 	.word	0x08008bf1
 8008bdc:	08008bf9 	.word	0x08008bf9
 8008be0:	08008c01 	.word	0x08008c01
 8008be4:	08008c09 	.word	0x08008c09
 8008be8:	08008c11 	.word	0x08008c11
 8008bec:	08008c19 	.word	0x08008c19
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e18a      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008bf8:	2304      	movs	r3, #4
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfe:	e186      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c00:	2308      	movs	r3, #8
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c06:	e182      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c08:	2310      	movs	r3, #16
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0e:	e17e      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c10:	2320      	movs	r3, #32
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c16:	e17a      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c18:	2340      	movs	r3, #64	@ 0x40
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1e:	e176      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c20:	2380      	movs	r3, #128	@ 0x80
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c26:	e172      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a5b      	ldr	r2, [pc, #364]	@ (8008d9c <UART_SetConfig+0x63c>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d130      	bne.n	8008c94 <UART_SetConfig+0x534>
 8008c32:	4b58      	ldr	r3, [pc, #352]	@ (8008d94 <UART_SetConfig+0x634>)
 8008c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c36:	f003 0307 	and.w	r3, r3, #7
 8008c3a:	2b05      	cmp	r3, #5
 8008c3c:	d826      	bhi.n	8008c8c <UART_SetConfig+0x52c>
 8008c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c44 <UART_SetConfig+0x4e4>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008c5d 	.word	0x08008c5d
 8008c48:	08008c65 	.word	0x08008c65
 8008c4c:	08008c6d 	.word	0x08008c6d
 8008c50:	08008c75 	.word	0x08008c75
 8008c54:	08008c7d 	.word	0x08008c7d
 8008c58:	08008c85 	.word	0x08008c85
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e154      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c64:	2304      	movs	r3, #4
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6a:	e150      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c6c:	2308      	movs	r3, #8
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c72:	e14c      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c74:	2310      	movs	r3, #16
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7a:	e148      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c7c:	2320      	movs	r3, #32
 8008c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c82:	e144      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c84:	2340      	movs	r3, #64	@ 0x40
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8a:	e140      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c8c:	2380      	movs	r3, #128	@ 0x80
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c92:	e13c      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a41      	ldr	r2, [pc, #260]	@ (8008da0 <UART_SetConfig+0x640>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	f040 8082 	bne.w	8008da4 <UART_SetConfig+0x644>
 8008ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8008d94 <UART_SetConfig+0x634>)
 8008ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ca8:	2b28      	cmp	r3, #40	@ 0x28
 8008caa:	d86d      	bhi.n	8008d88 <UART_SetConfig+0x628>
 8008cac:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb4 <UART_SetConfig+0x554>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008d59 	.word	0x08008d59
 8008cb8:	08008d89 	.word	0x08008d89
 8008cbc:	08008d89 	.word	0x08008d89
 8008cc0:	08008d89 	.word	0x08008d89
 8008cc4:	08008d89 	.word	0x08008d89
 8008cc8:	08008d89 	.word	0x08008d89
 8008ccc:	08008d89 	.word	0x08008d89
 8008cd0:	08008d89 	.word	0x08008d89
 8008cd4:	08008d61 	.word	0x08008d61
 8008cd8:	08008d89 	.word	0x08008d89
 8008cdc:	08008d89 	.word	0x08008d89
 8008ce0:	08008d89 	.word	0x08008d89
 8008ce4:	08008d89 	.word	0x08008d89
 8008ce8:	08008d89 	.word	0x08008d89
 8008cec:	08008d89 	.word	0x08008d89
 8008cf0:	08008d89 	.word	0x08008d89
 8008cf4:	08008d69 	.word	0x08008d69
 8008cf8:	08008d89 	.word	0x08008d89
 8008cfc:	08008d89 	.word	0x08008d89
 8008d00:	08008d89 	.word	0x08008d89
 8008d04:	08008d89 	.word	0x08008d89
 8008d08:	08008d89 	.word	0x08008d89
 8008d0c:	08008d89 	.word	0x08008d89
 8008d10:	08008d89 	.word	0x08008d89
 8008d14:	08008d71 	.word	0x08008d71
 8008d18:	08008d89 	.word	0x08008d89
 8008d1c:	08008d89 	.word	0x08008d89
 8008d20:	08008d89 	.word	0x08008d89
 8008d24:	08008d89 	.word	0x08008d89
 8008d28:	08008d89 	.word	0x08008d89
 8008d2c:	08008d89 	.word	0x08008d89
 8008d30:	08008d89 	.word	0x08008d89
 8008d34:	08008d79 	.word	0x08008d79
 8008d38:	08008d89 	.word	0x08008d89
 8008d3c:	08008d89 	.word	0x08008d89
 8008d40:	08008d89 	.word	0x08008d89
 8008d44:	08008d89 	.word	0x08008d89
 8008d48:	08008d89 	.word	0x08008d89
 8008d4c:	08008d89 	.word	0x08008d89
 8008d50:	08008d89 	.word	0x08008d89
 8008d54:	08008d81 	.word	0x08008d81
 8008d58:	2301      	movs	r3, #1
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5e:	e0d6      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008d60:	2304      	movs	r3, #4
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d66:	e0d2      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008d68:	2308      	movs	r3, #8
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6e:	e0ce      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008d70:	2310      	movs	r3, #16
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d76:	e0ca      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008d78:	2320      	movs	r3, #32
 8008d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7e:	e0c6      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008d80:	2340      	movs	r3, #64	@ 0x40
 8008d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d86:	e0c2      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008d88:	2380      	movs	r3, #128	@ 0x80
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8e:	e0be      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008d90:	40011400 	.word	0x40011400
 8008d94:	58024400 	.word	0x58024400
 8008d98:	40007800 	.word	0x40007800
 8008d9c:	40007c00 	.word	0x40007c00
 8008da0:	40011800 	.word	0x40011800
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4aad      	ldr	r2, [pc, #692]	@ (8009060 <UART_SetConfig+0x900>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d176      	bne.n	8008e9c <UART_SetConfig+0x73c>
 8008dae:	4bad      	ldr	r3, [pc, #692]	@ (8009064 <UART_SetConfig+0x904>)
 8008db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008db2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008db6:	2b28      	cmp	r3, #40	@ 0x28
 8008db8:	d86c      	bhi.n	8008e94 <UART_SetConfig+0x734>
 8008dba:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc0 <UART_SetConfig+0x660>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008e65 	.word	0x08008e65
 8008dc4:	08008e95 	.word	0x08008e95
 8008dc8:	08008e95 	.word	0x08008e95
 8008dcc:	08008e95 	.word	0x08008e95
 8008dd0:	08008e95 	.word	0x08008e95
 8008dd4:	08008e95 	.word	0x08008e95
 8008dd8:	08008e95 	.word	0x08008e95
 8008ddc:	08008e95 	.word	0x08008e95
 8008de0:	08008e6d 	.word	0x08008e6d
 8008de4:	08008e95 	.word	0x08008e95
 8008de8:	08008e95 	.word	0x08008e95
 8008dec:	08008e95 	.word	0x08008e95
 8008df0:	08008e95 	.word	0x08008e95
 8008df4:	08008e95 	.word	0x08008e95
 8008df8:	08008e95 	.word	0x08008e95
 8008dfc:	08008e95 	.word	0x08008e95
 8008e00:	08008e75 	.word	0x08008e75
 8008e04:	08008e95 	.word	0x08008e95
 8008e08:	08008e95 	.word	0x08008e95
 8008e0c:	08008e95 	.word	0x08008e95
 8008e10:	08008e95 	.word	0x08008e95
 8008e14:	08008e95 	.word	0x08008e95
 8008e18:	08008e95 	.word	0x08008e95
 8008e1c:	08008e95 	.word	0x08008e95
 8008e20:	08008e7d 	.word	0x08008e7d
 8008e24:	08008e95 	.word	0x08008e95
 8008e28:	08008e95 	.word	0x08008e95
 8008e2c:	08008e95 	.word	0x08008e95
 8008e30:	08008e95 	.word	0x08008e95
 8008e34:	08008e95 	.word	0x08008e95
 8008e38:	08008e95 	.word	0x08008e95
 8008e3c:	08008e95 	.word	0x08008e95
 8008e40:	08008e85 	.word	0x08008e85
 8008e44:	08008e95 	.word	0x08008e95
 8008e48:	08008e95 	.word	0x08008e95
 8008e4c:	08008e95 	.word	0x08008e95
 8008e50:	08008e95 	.word	0x08008e95
 8008e54:	08008e95 	.word	0x08008e95
 8008e58:	08008e95 	.word	0x08008e95
 8008e5c:	08008e95 	.word	0x08008e95
 8008e60:	08008e8d 	.word	0x08008e8d
 8008e64:	2301      	movs	r3, #1
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e050      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008e6c:	2304      	movs	r3, #4
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e04c      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008e74:	2308      	movs	r3, #8
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e048      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008e7c:	2310      	movs	r3, #16
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e82:	e044      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008e84:	2320      	movs	r3, #32
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8a:	e040      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008e8c:	2340      	movs	r3, #64	@ 0x40
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e92:	e03c      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008e94:	2380      	movs	r3, #128	@ 0x80
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9a:	e038      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a71      	ldr	r2, [pc, #452]	@ (8009068 <UART_SetConfig+0x908>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d130      	bne.n	8008f08 <UART_SetConfig+0x7a8>
 8008ea6:	4b6f      	ldr	r3, [pc, #444]	@ (8009064 <UART_SetConfig+0x904>)
 8008ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	2b05      	cmp	r3, #5
 8008eb0:	d826      	bhi.n	8008f00 <UART_SetConfig+0x7a0>
 8008eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb8 <UART_SetConfig+0x758>)
 8008eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb8:	08008ed1 	.word	0x08008ed1
 8008ebc:	08008ed9 	.word	0x08008ed9
 8008ec0:	08008ee1 	.word	0x08008ee1
 8008ec4:	08008ee9 	.word	0x08008ee9
 8008ec8:	08008ef1 	.word	0x08008ef1
 8008ecc:	08008ef9 	.word	0x08008ef9
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed6:	e01a      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008ed8:	2304      	movs	r3, #4
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e016      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008ee0:	2308      	movs	r3, #8
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee6:	e012      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008ee8:	2310      	movs	r3, #16
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eee:	e00e      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008ef0:	2320      	movs	r3, #32
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef6:	e00a      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008ef8:	2340      	movs	r3, #64	@ 0x40
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e006      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008f00:	2380      	movs	r3, #128	@ 0x80
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e002      	b.n	8008f0e <UART_SetConfig+0x7ae>
 8008f08:	2380      	movs	r3, #128	@ 0x80
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a55      	ldr	r2, [pc, #340]	@ (8009068 <UART_SetConfig+0x908>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	f040 80f8 	bne.w	800910a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f1e:	2b20      	cmp	r3, #32
 8008f20:	dc46      	bgt.n	8008fb0 <UART_SetConfig+0x850>
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	db75      	blt.n	8009012 <UART_SetConfig+0x8b2>
 8008f26:	3b02      	subs	r3, #2
 8008f28:	2b1e      	cmp	r3, #30
 8008f2a:	d872      	bhi.n	8009012 <UART_SetConfig+0x8b2>
 8008f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f34 <UART_SetConfig+0x7d4>)
 8008f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f32:	bf00      	nop
 8008f34:	08008fb7 	.word	0x08008fb7
 8008f38:	08009013 	.word	0x08009013
 8008f3c:	08008fbf 	.word	0x08008fbf
 8008f40:	08009013 	.word	0x08009013
 8008f44:	08009013 	.word	0x08009013
 8008f48:	08009013 	.word	0x08009013
 8008f4c:	08008fcf 	.word	0x08008fcf
 8008f50:	08009013 	.word	0x08009013
 8008f54:	08009013 	.word	0x08009013
 8008f58:	08009013 	.word	0x08009013
 8008f5c:	08009013 	.word	0x08009013
 8008f60:	08009013 	.word	0x08009013
 8008f64:	08009013 	.word	0x08009013
 8008f68:	08009013 	.word	0x08009013
 8008f6c:	08008fdf 	.word	0x08008fdf
 8008f70:	08009013 	.word	0x08009013
 8008f74:	08009013 	.word	0x08009013
 8008f78:	08009013 	.word	0x08009013
 8008f7c:	08009013 	.word	0x08009013
 8008f80:	08009013 	.word	0x08009013
 8008f84:	08009013 	.word	0x08009013
 8008f88:	08009013 	.word	0x08009013
 8008f8c:	08009013 	.word	0x08009013
 8008f90:	08009013 	.word	0x08009013
 8008f94:	08009013 	.word	0x08009013
 8008f98:	08009013 	.word	0x08009013
 8008f9c:	08009013 	.word	0x08009013
 8008fa0:	08009013 	.word	0x08009013
 8008fa4:	08009013 	.word	0x08009013
 8008fa8:	08009013 	.word	0x08009013
 8008fac:	08009005 	.word	0x08009005
 8008fb0:	2b40      	cmp	r3, #64	@ 0x40
 8008fb2:	d02a      	beq.n	800900a <UART_SetConfig+0x8aa>
 8008fb4:	e02d      	b.n	8009012 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008fb6:	f7fe f809 	bl	8006fcc <HAL_RCCEx_GetD3PCLK1Freq>
 8008fba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fbc:	e02f      	b.n	800901e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fe f818 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fcc:	e027      	b.n	800901e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fce:	f107 0318 	add.w	r3, r7, #24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe f964 	bl	80072a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fdc:	e01f      	b.n	800901e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fde:	4b21      	ldr	r3, [pc, #132]	@ (8009064 <UART_SetConfig+0x904>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0320 	and.w	r3, r3, #32
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d009      	beq.n	8008ffe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fea:	4b1e      	ldr	r3, [pc, #120]	@ (8009064 <UART_SetConfig+0x904>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	08db      	lsrs	r3, r3, #3
 8008ff0:	f003 0303 	and.w	r3, r3, #3
 8008ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800906c <UART_SetConfig+0x90c>)
 8008ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8008ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ffc:	e00f      	b.n	800901e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800906c <UART_SetConfig+0x90c>)
 8009000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009002:	e00c      	b.n	800901e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009004:	4b1a      	ldr	r3, [pc, #104]	@ (8009070 <UART_SetConfig+0x910>)
 8009006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009008:	e009      	b.n	800901e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800900a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800900e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009010:	e005      	b.n	800901e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009012:	2300      	movs	r3, #0
 8009014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800901c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800901e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 81ee 	beq.w	8009402 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902a:	4a12      	ldr	r2, [pc, #72]	@ (8009074 <UART_SetConfig+0x914>)
 800902c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009030:	461a      	mov	r2, r3
 8009032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009034:	fbb3 f3f2 	udiv	r3, r3, r2
 8009038:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	4613      	mov	r3, r2
 8009040:	005b      	lsls	r3, r3, #1
 8009042:	4413      	add	r3, r2
 8009044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009046:	429a      	cmp	r2, r3
 8009048:	d305      	bcc.n	8009056 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009052:	429a      	cmp	r2, r3
 8009054:	d910      	bls.n	8009078 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800905c:	e1d1      	b.n	8009402 <UART_SetConfig+0xca2>
 800905e:	bf00      	nop
 8009060:	40011c00 	.word	0x40011c00
 8009064:	58024400 	.word	0x58024400
 8009068:	58000c00 	.word	0x58000c00
 800906c:	03d09000 	.word	0x03d09000
 8009070:	003d0900 	.word	0x003d0900
 8009074:	0800a02c 	.word	0x0800a02c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800907a:	2200      	movs	r2, #0
 800907c:	60bb      	str	r3, [r7, #8]
 800907e:	60fa      	str	r2, [r7, #12]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009084:	4ac0      	ldr	r2, [pc, #768]	@ (8009388 <UART_SetConfig+0xc28>)
 8009086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800908a:	b29b      	uxth	r3, r3
 800908c:	2200      	movs	r2, #0
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	607a      	str	r2, [r7, #4]
 8009092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009096:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800909a:	f7f7 f937 	bl	800030c <__aeabi_uldivmod>
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4610      	mov	r0, r2
 80090a4:	4619      	mov	r1, r3
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	f04f 0300 	mov.w	r3, #0
 80090ae:	020b      	lsls	r3, r1, #8
 80090b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090b4:	0202      	lsls	r2, r0, #8
 80090b6:	6979      	ldr	r1, [r7, #20]
 80090b8:	6849      	ldr	r1, [r1, #4]
 80090ba:	0849      	lsrs	r1, r1, #1
 80090bc:	2000      	movs	r0, #0
 80090be:	460c      	mov	r4, r1
 80090c0:	4605      	mov	r5, r0
 80090c2:	eb12 0804 	adds.w	r8, r2, r4
 80090c6:	eb43 0905 	adc.w	r9, r3, r5
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	469a      	mov	sl, r3
 80090d2:	4693      	mov	fp, r2
 80090d4:	4652      	mov	r2, sl
 80090d6:	465b      	mov	r3, fp
 80090d8:	4640      	mov	r0, r8
 80090da:	4649      	mov	r1, r9
 80090dc:	f7f7 f916 	bl	800030c <__aeabi_uldivmod>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	4613      	mov	r3, r2
 80090e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090ee:	d308      	bcc.n	8009102 <UART_SetConfig+0x9a2>
 80090f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090f6:	d204      	bcs.n	8009102 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090fe:	60da      	str	r2, [r3, #12]
 8009100:	e17f      	b.n	8009402 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009108:	e17b      	b.n	8009402 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009112:	f040 80bd 	bne.w	8009290 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009116:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800911a:	2b20      	cmp	r3, #32
 800911c:	dc48      	bgt.n	80091b0 <UART_SetConfig+0xa50>
 800911e:	2b00      	cmp	r3, #0
 8009120:	db7b      	blt.n	800921a <UART_SetConfig+0xaba>
 8009122:	2b20      	cmp	r3, #32
 8009124:	d879      	bhi.n	800921a <UART_SetConfig+0xaba>
 8009126:	a201      	add	r2, pc, #4	@ (adr r2, 800912c <UART_SetConfig+0x9cc>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	080091b7 	.word	0x080091b7
 8009130:	080091bf 	.word	0x080091bf
 8009134:	0800921b 	.word	0x0800921b
 8009138:	0800921b 	.word	0x0800921b
 800913c:	080091c7 	.word	0x080091c7
 8009140:	0800921b 	.word	0x0800921b
 8009144:	0800921b 	.word	0x0800921b
 8009148:	0800921b 	.word	0x0800921b
 800914c:	080091d7 	.word	0x080091d7
 8009150:	0800921b 	.word	0x0800921b
 8009154:	0800921b 	.word	0x0800921b
 8009158:	0800921b 	.word	0x0800921b
 800915c:	0800921b 	.word	0x0800921b
 8009160:	0800921b 	.word	0x0800921b
 8009164:	0800921b 	.word	0x0800921b
 8009168:	0800921b 	.word	0x0800921b
 800916c:	080091e7 	.word	0x080091e7
 8009170:	0800921b 	.word	0x0800921b
 8009174:	0800921b 	.word	0x0800921b
 8009178:	0800921b 	.word	0x0800921b
 800917c:	0800921b 	.word	0x0800921b
 8009180:	0800921b 	.word	0x0800921b
 8009184:	0800921b 	.word	0x0800921b
 8009188:	0800921b 	.word	0x0800921b
 800918c:	0800921b 	.word	0x0800921b
 8009190:	0800921b 	.word	0x0800921b
 8009194:	0800921b 	.word	0x0800921b
 8009198:	0800921b 	.word	0x0800921b
 800919c:	0800921b 	.word	0x0800921b
 80091a0:	0800921b 	.word	0x0800921b
 80091a4:	0800921b 	.word	0x0800921b
 80091a8:	0800921b 	.word	0x0800921b
 80091ac:	0800920d 	.word	0x0800920d
 80091b0:	2b40      	cmp	r3, #64	@ 0x40
 80091b2:	d02e      	beq.n	8009212 <UART_SetConfig+0xab2>
 80091b4:	e031      	b.n	800921a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091b6:	f7fc fcfb 	bl	8005bb0 <HAL_RCC_GetPCLK1Freq>
 80091ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091bc:	e033      	b.n	8009226 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091be:	f7fc fd0d 	bl	8005bdc <HAL_RCC_GetPCLK2Freq>
 80091c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091c4:	e02f      	b.n	8009226 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fd ff14 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d4:	e027      	b.n	8009226 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091d6:	f107 0318 	add.w	r3, r7, #24
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe f860 	bl	80072a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091e4:	e01f      	b.n	8009226 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091e6:	4b69      	ldr	r3, [pc, #420]	@ (800938c <UART_SetConfig+0xc2c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d009      	beq.n	8009206 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091f2:	4b66      	ldr	r3, [pc, #408]	@ (800938c <UART_SetConfig+0xc2c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	08db      	lsrs	r3, r3, #3
 80091f8:	f003 0303 	and.w	r3, r3, #3
 80091fc:	4a64      	ldr	r2, [pc, #400]	@ (8009390 <UART_SetConfig+0xc30>)
 80091fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009204:	e00f      	b.n	8009226 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009206:	4b62      	ldr	r3, [pc, #392]	@ (8009390 <UART_SetConfig+0xc30>)
 8009208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800920a:	e00c      	b.n	8009226 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800920c:	4b61      	ldr	r3, [pc, #388]	@ (8009394 <UART_SetConfig+0xc34>)
 800920e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009210:	e009      	b.n	8009226 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009218:	e005      	b.n	8009226 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800921a:	2300      	movs	r3, #0
 800921c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 80ea 	beq.w	8009402 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009232:	4a55      	ldr	r2, [pc, #340]	@ (8009388 <UART_SetConfig+0xc28>)
 8009234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009238:	461a      	mov	r2, r3
 800923a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800923c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009240:	005a      	lsls	r2, r3, #1
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	085b      	lsrs	r3, r3, #1
 8009248:	441a      	add	r2, r3
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009252:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	2b0f      	cmp	r3, #15
 8009258:	d916      	bls.n	8009288 <UART_SetConfig+0xb28>
 800925a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009260:	d212      	bcs.n	8009288 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009264:	b29b      	uxth	r3, r3
 8009266:	f023 030f 	bic.w	r3, r3, #15
 800926a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800926c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926e:	085b      	lsrs	r3, r3, #1
 8009270:	b29b      	uxth	r3, r3
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	b29a      	uxth	r2, r3
 8009278:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800927a:	4313      	orrs	r3, r2
 800927c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009284:	60da      	str	r2, [r3, #12]
 8009286:	e0bc      	b.n	8009402 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800928e:	e0b8      	b.n	8009402 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009290:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009294:	2b20      	cmp	r3, #32
 8009296:	dc4b      	bgt.n	8009330 <UART_SetConfig+0xbd0>
 8009298:	2b00      	cmp	r3, #0
 800929a:	f2c0 8087 	blt.w	80093ac <UART_SetConfig+0xc4c>
 800929e:	2b20      	cmp	r3, #32
 80092a0:	f200 8084 	bhi.w	80093ac <UART_SetConfig+0xc4c>
 80092a4:	a201      	add	r2, pc, #4	@ (adr r2, 80092ac <UART_SetConfig+0xb4c>)
 80092a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092aa:	bf00      	nop
 80092ac:	08009337 	.word	0x08009337
 80092b0:	0800933f 	.word	0x0800933f
 80092b4:	080093ad 	.word	0x080093ad
 80092b8:	080093ad 	.word	0x080093ad
 80092bc:	08009347 	.word	0x08009347
 80092c0:	080093ad 	.word	0x080093ad
 80092c4:	080093ad 	.word	0x080093ad
 80092c8:	080093ad 	.word	0x080093ad
 80092cc:	08009357 	.word	0x08009357
 80092d0:	080093ad 	.word	0x080093ad
 80092d4:	080093ad 	.word	0x080093ad
 80092d8:	080093ad 	.word	0x080093ad
 80092dc:	080093ad 	.word	0x080093ad
 80092e0:	080093ad 	.word	0x080093ad
 80092e4:	080093ad 	.word	0x080093ad
 80092e8:	080093ad 	.word	0x080093ad
 80092ec:	08009367 	.word	0x08009367
 80092f0:	080093ad 	.word	0x080093ad
 80092f4:	080093ad 	.word	0x080093ad
 80092f8:	080093ad 	.word	0x080093ad
 80092fc:	080093ad 	.word	0x080093ad
 8009300:	080093ad 	.word	0x080093ad
 8009304:	080093ad 	.word	0x080093ad
 8009308:	080093ad 	.word	0x080093ad
 800930c:	080093ad 	.word	0x080093ad
 8009310:	080093ad 	.word	0x080093ad
 8009314:	080093ad 	.word	0x080093ad
 8009318:	080093ad 	.word	0x080093ad
 800931c:	080093ad 	.word	0x080093ad
 8009320:	080093ad 	.word	0x080093ad
 8009324:	080093ad 	.word	0x080093ad
 8009328:	080093ad 	.word	0x080093ad
 800932c:	0800939f 	.word	0x0800939f
 8009330:	2b40      	cmp	r3, #64	@ 0x40
 8009332:	d037      	beq.n	80093a4 <UART_SetConfig+0xc44>
 8009334:	e03a      	b.n	80093ac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009336:	f7fc fc3b 	bl	8005bb0 <HAL_RCC_GetPCLK1Freq>
 800933a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800933c:	e03c      	b.n	80093b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800933e:	f7fc fc4d 	bl	8005bdc <HAL_RCC_GetPCLK2Freq>
 8009342:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009344:	e038      	b.n	80093b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800934a:	4618      	mov	r0, r3
 800934c:	f7fd fe54 	bl	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009354:	e030      	b.n	80093b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009356:	f107 0318 	add.w	r3, r7, #24
 800935a:	4618      	mov	r0, r3
 800935c:	f7fd ffa0 	bl	80072a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009364:	e028      	b.n	80093b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009366:	4b09      	ldr	r3, [pc, #36]	@ (800938c <UART_SetConfig+0xc2c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0320 	and.w	r3, r3, #32
 800936e:	2b00      	cmp	r3, #0
 8009370:	d012      	beq.n	8009398 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009372:	4b06      	ldr	r3, [pc, #24]	@ (800938c <UART_SetConfig+0xc2c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	08db      	lsrs	r3, r3, #3
 8009378:	f003 0303 	and.w	r3, r3, #3
 800937c:	4a04      	ldr	r2, [pc, #16]	@ (8009390 <UART_SetConfig+0xc30>)
 800937e:	fa22 f303 	lsr.w	r3, r2, r3
 8009382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009384:	e018      	b.n	80093b8 <UART_SetConfig+0xc58>
 8009386:	bf00      	nop
 8009388:	0800a02c 	.word	0x0800a02c
 800938c:	58024400 	.word	0x58024400
 8009390:	03d09000 	.word	0x03d09000
 8009394:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009398:	4b24      	ldr	r3, [pc, #144]	@ (800942c <UART_SetConfig+0xccc>)
 800939a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800939c:	e00c      	b.n	80093b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800939e:	4b24      	ldr	r3, [pc, #144]	@ (8009430 <UART_SetConfig+0xcd0>)
 80093a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093a2:	e009      	b.n	80093b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093aa:	e005      	b.n	80093b8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093b6:	bf00      	nop
    }

    if (pclk != 0U)
 80093b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d021      	beq.n	8009402 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009434 <UART_SetConfig+0xcd4>)
 80093c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093c8:	461a      	mov	r2, r3
 80093ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	085b      	lsrs	r3, r3, #1
 80093d6:	441a      	add	r2, r3
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e4:	2b0f      	cmp	r3, #15
 80093e6:	d909      	bls.n	80093fc <UART_SetConfig+0xc9c>
 80093e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093ee:	d205      	bcs.n	80093fc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	60da      	str	r2, [r3, #12]
 80093fa:	e002      	b.n	8009402 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2201      	movs	r2, #1
 8009406:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2201      	movs	r2, #1
 800940e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2200      	movs	r2, #0
 8009416:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	2200      	movs	r2, #0
 800941c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800941e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009422:	4618      	mov	r0, r3
 8009424:	3748      	adds	r7, #72	@ 0x48
 8009426:	46bd      	mov	sp, r7
 8009428:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800942c:	03d09000 	.word	0x03d09000
 8009430:	003d0900 	.word	0x003d0900
 8009434:	0800a02c 	.word	0x0800a02c

08009438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009444:	f003 0308 	and.w	r3, r3, #8
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00a      	beq.n	8009462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00a      	beq.n	8009484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00a      	beq.n	80094a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094aa:	f003 0304 	and.w	r3, r3, #4
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00a      	beq.n	80094c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094cc:	f003 0310 	and.w	r3, r3, #16
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00a      	beq.n	80094ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ee:	f003 0320 	and.w	r3, r3, #32
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00a      	beq.n	800950c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009514:	2b00      	cmp	r3, #0
 8009516:	d01a      	beq.n	800954e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	430a      	orrs	r2, r1
 800952c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009536:	d10a      	bne.n	800954e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	605a      	str	r2, [r3, #4]
  }
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b098      	sub	sp, #96	@ 0x60
 8009580:	af02      	add	r7, sp, #8
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800958c:	f7f8 f8b2 	bl	80016f4 <HAL_GetTick>
 8009590:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0308 	and.w	r3, r3, #8
 800959c:	2b08      	cmp	r3, #8
 800959e:	d12f      	bne.n	8009600 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095a8:	2200      	movs	r2, #0
 80095aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f88e 	bl	80096d0 <UART_WaitOnFlagUntilTimeout>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d022      	beq.n	8009600 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e6      	bne.n	80095ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e063      	b.n	80096c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b04      	cmp	r3, #4
 800960c:	d149      	bne.n	80096a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800960e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009616:	2200      	movs	r2, #0
 8009618:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f857 	bl	80096d0 <UART_WaitOnFlagUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d03c      	beq.n	80096a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	623b      	str	r3, [r7, #32]
   return(result);
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800963c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009646:	633b      	str	r3, [r7, #48]	@ 0x30
 8009648:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800964c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e6      	bne.n	8009628 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3308      	adds	r3, #8
 8009660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	e853 3f00 	ldrex	r3, [r3]
 8009668:	60fb      	str	r3, [r7, #12]
   return(result);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f023 0301 	bic.w	r3, r3, #1
 8009670:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800967a:	61fa      	str	r2, [r7, #28]
 800967c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	69b9      	ldr	r1, [r7, #24]
 8009680:	69fa      	ldr	r2, [r7, #28]
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	617b      	str	r3, [r7, #20]
   return(result);
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1e5      	bne.n	800965a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2220      	movs	r2, #32
 8009692:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e012      	b.n	80096c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3758      	adds	r7, #88	@ 0x58
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	4613      	mov	r3, r2
 80096de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096e0:	e04f      	b.n	8009782 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096e8:	d04b      	beq.n	8009782 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ea:	f7f8 f803 	bl	80016f4 <HAL_GetTick>
 80096ee:	4602      	mov	r2, r0
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d302      	bcc.n	8009700 <UART_WaitOnFlagUntilTimeout+0x30>
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e04e      	b.n	80097a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b00      	cmp	r3, #0
 8009710:	d037      	beq.n	8009782 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	2b80      	cmp	r3, #128	@ 0x80
 8009716:	d034      	beq.n	8009782 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	2b40      	cmp	r3, #64	@ 0x40
 800971c:	d031      	beq.n	8009782 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	f003 0308 	and.w	r3, r3, #8
 8009728:	2b08      	cmp	r3, #8
 800972a:	d110      	bne.n	800974e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2208      	movs	r2, #8
 8009732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f000 f921 	bl	800997c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2208      	movs	r2, #8
 800973e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e029      	b.n	80097a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800975c:	d111      	bne.n	8009782 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009766:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 f907 	bl	800997c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2220      	movs	r2, #32
 8009772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e00f      	b.n	80097a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	69da      	ldr	r2, [r3, #28]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4013      	ands	r3, r2
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	429a      	cmp	r2, r3
 8009790:	bf0c      	ite	eq
 8009792:	2301      	moveq	r3, #1
 8009794:	2300      	movne	r3, #0
 8009796:	b2db      	uxtb	r3, r3
 8009798:	461a      	mov	r2, r3
 800979a:	79fb      	ldrb	r3, [r7, #7]
 800979c:	429a      	cmp	r2, r3
 800979e:	d0a0      	beq.n	80096e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b096      	sub	sp, #88	@ 0x58
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	4613      	mov	r3, r2
 80097b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	88fa      	ldrh	r2, [r7, #6]
 80097c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2222      	movs	r2, #34	@ 0x22
 80097d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d02d      	beq.n	800983e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097e8:	4a40      	ldr	r2, [pc, #256]	@ (80098ec <UART_Start_Receive_DMA+0x140>)
 80097ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097f2:	4a3f      	ldr	r2, [pc, #252]	@ (80098f0 <UART_Start_Receive_DMA+0x144>)
 80097f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097fc:	4a3d      	ldr	r2, [pc, #244]	@ (80098f4 <UART_Start_Receive_DMA+0x148>)
 80097fe:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009806:	2200      	movs	r2, #0
 8009808:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3324      	adds	r3, #36	@ 0x24
 8009816:	4619      	mov	r1, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800981c:	461a      	mov	r2, r3
 800981e:	88fb      	ldrh	r3, [r7, #6]
 8009820:	f7f8 fbd0 	bl	8001fc4 <HAL_DMA_Start_IT>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d009      	beq.n	800983e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2210      	movs	r2, #16
 800982e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2220      	movs	r2, #32
 8009836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e051      	b.n	80098e2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d018      	beq.n	8009878 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800984e:	e853 3f00 	ldrex	r3, [r3]
 8009852:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800985a:	657b      	str	r3, [r7, #84]	@ 0x54
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	461a      	mov	r2, r3
 8009862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009866:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009868:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800986a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800986c:	e841 2300 	strex	r3, r2, [r1]
 8009870:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1e6      	bne.n	8009846 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3308      	adds	r3, #8
 800987e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988a:	f043 0301 	orr.w	r3, r3, #1
 800988e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	3308      	adds	r3, #8
 8009896:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009898:	637a      	str	r2, [r7, #52]	@ 0x34
 800989a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800989e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098a0:	e841 2300 	strex	r3, r2, [r1]
 80098a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80098a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1e5      	bne.n	8009878 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3308      	adds	r3, #8
 80098b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	613b      	str	r3, [r7, #16]
   return(result);
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3308      	adds	r3, #8
 80098ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098cc:	623a      	str	r2, [r7, #32]
 80098ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	69f9      	ldr	r1, [r7, #28]
 80098d2:	6a3a      	ldr	r2, [r7, #32]
 80098d4:	e841 2300 	strex	r3, r2, [r1]
 80098d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e5      	bne.n	80098ac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3758      	adds	r7, #88	@ 0x58
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	08009a49 	.word	0x08009a49
 80098f0:	08009b71 	.word	0x08009b71
 80098f4:	08009baf 	.word	0x08009baf

080098f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b08f      	sub	sp, #60	@ 0x3c
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	e853 3f00 	ldrex	r3, [r3]
 800990c:	61fb      	str	r3, [r7, #28]
   return(result);
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009914:	637b      	str	r3, [r7, #52]	@ 0x34
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	461a      	mov	r2, r3
 800991c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800991e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009920:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009926:	e841 2300 	strex	r3, r2, [r1]
 800992a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800992c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1e6      	bne.n	8009900 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3308      	adds	r3, #8
 8009938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	60bb      	str	r3, [r7, #8]
   return(result);
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009948:	633b      	str	r3, [r7, #48]	@ 0x30
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3308      	adds	r3, #8
 8009950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009952:	61ba      	str	r2, [r7, #24]
 8009954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	6979      	ldr	r1, [r7, #20]
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	e841 2300 	strex	r3, r2, [r1]
 800995e:	613b      	str	r3, [r7, #16]
   return(result);
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e5      	bne.n	8009932 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2220      	movs	r2, #32
 800996a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800996e:	bf00      	nop
 8009970:	373c      	adds	r7, #60	@ 0x3c
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
	...

0800997c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800997c:	b480      	push	{r7}
 800997e:	b095      	sub	sp, #84	@ 0x54
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009998:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80099a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099aa:	e841 2300 	strex	r3, r2, [r1]
 80099ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1e6      	bne.n	8009984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3308      	adds	r3, #8
 80099bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099be:	6a3b      	ldr	r3, [r7, #32]
 80099c0:	e853 3f00 	ldrex	r3, [r3]
 80099c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009a44 <UART_EndRxTransfer+0xc8>)
 80099ca:	4013      	ands	r3, r2
 80099cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3308      	adds	r3, #8
 80099d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099de:	e841 2300 	strex	r3, r2, [r1]
 80099e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1e5      	bne.n	80099b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d118      	bne.n	8009a24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	e853 3f00 	ldrex	r3, [r3]
 80099fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	f023 0310 	bic.w	r3, r3, #16
 8009a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a10:	61bb      	str	r3, [r7, #24]
 8009a12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	6979      	ldr	r1, [r7, #20]
 8009a16:	69ba      	ldr	r2, [r7, #24]
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e6      	bne.n	80099f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2220      	movs	r2, #32
 8009a28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a38:	bf00      	nop
 8009a3a:	3754      	adds	r7, #84	@ 0x54
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	effffffe 	.word	0xeffffffe

08009a48 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b09c      	sub	sp, #112	@ 0x70
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a54:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a5e:	d071      	beq.n	8009b44 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e6      	bne.n	8009a68 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3308      	adds	r3, #8
 8009aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aac:	f023 0301 	bic.w	r3, r3, #1
 8009ab0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3308      	adds	r3, #8
 8009ab8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009aba:	647a      	str	r2, [r7, #68]	@ 0x44
 8009abc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ac0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e5      	bne.n	8009a9a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3308      	adds	r3, #8
 8009ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ae4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3308      	adds	r3, #8
 8009aec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8009af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e5      	bne.n	8009ace <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b04:	2220      	movs	r2, #32
 8009b06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d118      	bne.n	8009b44 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	e853 3f00 	ldrex	r3, [r3]
 8009b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f023 0310 	bic.w	r3, r3, #16
 8009b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b30:	61fb      	str	r3, [r7, #28]
 8009b32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b34:	69b9      	ldr	r1, [r7, #24]
 8009b36:	69fa      	ldr	r2, [r7, #28]
 8009b38:	e841 2300 	strex	r3, r2, [r1]
 8009b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1e6      	bne.n	8009b12 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b46:	2200      	movs	r2, #0
 8009b48:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d107      	bne.n	8009b62 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b5c:	f7f6 fe7a 	bl	8000854 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b60:	e002      	b.n	8009b68 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009b62:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b64:	f7fe fdde 	bl	8008724 <HAL_UART_RxCpltCallback>
}
 8009b68:	bf00      	nop
 8009b6a:	3770      	adds	r7, #112	@ 0x70
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d109      	bne.n	8009ba0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b92:	085b      	lsrs	r3, r3, #1
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	4619      	mov	r1, r3
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7f6 fe5b 	bl	8000854 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b9e:	e002      	b.n	8009ba6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7fe fdc9 	bl	8008738 <HAL_UART_RxHalfCpltCallback>
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b086      	sub	sp, #24
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bc2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd6:	2b80      	cmp	r3, #128	@ 0x80
 8009bd8:	d109      	bne.n	8009bee <UART_DMAError+0x40>
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	2b21      	cmp	r3, #33	@ 0x21
 8009bde:	d106      	bne.n	8009bee <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009be8:	6978      	ldr	r0, [r7, #20]
 8009bea:	f7ff fe85 	bl	80098f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf8:	2b40      	cmp	r3, #64	@ 0x40
 8009bfa:	d109      	bne.n	8009c10 <UART_DMAError+0x62>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b22      	cmp	r3, #34	@ 0x22
 8009c00:	d106      	bne.n	8009c10 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009c0a:	6978      	ldr	r0, [r7, #20]
 8009c0c:	f7ff feb6 	bl	800997c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c16:	f043 0210 	orr.w	r2, r3, #16
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c20:	6978      	ldr	r0, [r7, #20]
 8009c22:	f7fe fd93 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c26:	bf00      	nop
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f7fe fd7d 	bl	800874c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c52:	bf00      	nop
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b088      	sub	sp, #32
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c76:	61fb      	str	r3, [r7, #28]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	61bb      	str	r3, [r7, #24]
 8009c82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c84:	6979      	ldr	r1, [r7, #20]
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	e841 2300 	strex	r3, r2, [r1]
 8009c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1e6      	bne.n	8009c62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2220      	movs	r2, #32
 8009c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7fe fd34 	bl	8008710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ca8:	bf00      	nop
 8009caa:	3720      	adds	r7, #32
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d101      	bne.n	8009d02 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cfe:	2302      	movs	r3, #2
 8009d00:	e027      	b.n	8009d52 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2224      	movs	r2, #36	@ 0x24
 8009d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f022 0201 	bic.w	r2, r2, #1
 8009d28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009d30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d101      	bne.n	8009d76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d72:	2302      	movs	r3, #2
 8009d74:	e02d      	b.n	8009dd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2224      	movs	r2, #36	@ 0x24
 8009d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f022 0201 	bic.w	r2, r2, #1
 8009d9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f8a4 	bl	8009f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e02d      	b.n	8009e4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2224      	movs	r2, #36	@ 0x24
 8009dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0201 	bic.w	r2, r2, #1
 8009e18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f866 	bl	8009f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b08c      	sub	sp, #48	@ 0x30
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	60f8      	str	r0, [r7, #12]
 8009e5e:	60b9      	str	r1, [r7, #8]
 8009e60:	4613      	mov	r3, r2
 8009e62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e6a:	2b20      	cmp	r3, #32
 8009e6c:	d142      	bne.n	8009ef4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009e74:	88fb      	ldrh	r3, [r7, #6]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e03b      	b.n	8009ef6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2201      	movs	r2, #1
 8009e82:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009e8a:	88fb      	ldrh	r3, [r7, #6]
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f7ff fc8b 	bl	80097ac <UART_Start_Receive_DMA>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d124      	bne.n	8009eee <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d11d      	bne.n	8009ee8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2210      	movs	r2, #16
 8009eb2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f043 0310 	orr.w	r3, r3, #16
 8009ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ed4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed6:	6a39      	ldr	r1, [r7, #32]
 8009ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e6      	bne.n	8009eb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009ee6:	e002      	b.n	8009eee <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009eee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009ef2:	e000      	b.n	8009ef6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009ef4:	2302      	movs	r3, #2
  }
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3730      	adds	r7, #48	@ 0x30
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
	...

08009f00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d108      	bne.n	8009f22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f20:	e031      	b.n	8009f86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f22:	2310      	movs	r3, #16
 8009f24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f26:	2310      	movs	r3, #16
 8009f28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	0e5b      	lsrs	r3, r3, #25
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	f003 0307 	and.w	r3, r3, #7
 8009f38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	0f5b      	lsrs	r3, r3, #29
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	f003 0307 	and.w	r3, r3, #7
 8009f48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f4a:	7bbb      	ldrb	r3, [r7, #14]
 8009f4c:	7b3a      	ldrb	r2, [r7, #12]
 8009f4e:	4911      	ldr	r1, [pc, #68]	@ (8009f94 <UARTEx_SetNbDataToProcess+0x94>)
 8009f50:	5c8a      	ldrb	r2, [r1, r2]
 8009f52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f56:	7b3a      	ldrb	r2, [r7, #12]
 8009f58:	490f      	ldr	r1, [pc, #60]	@ (8009f98 <UARTEx_SetNbDataToProcess+0x98>)
 8009f5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	7b7a      	ldrb	r2, [r7, #13]
 8009f6c:	4909      	ldr	r1, [pc, #36]	@ (8009f94 <UARTEx_SetNbDataToProcess+0x94>)
 8009f6e:	5c8a      	ldrb	r2, [r1, r2]
 8009f70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f74:	7b7a      	ldrb	r2, [r7, #13]
 8009f76:	4908      	ldr	r1, [pc, #32]	@ (8009f98 <UARTEx_SetNbDataToProcess+0x98>)
 8009f78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009f86:	bf00      	nop
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	0800a044 	.word	0x0800a044
 8009f98:	0800a04c 	.word	0x0800a04c

08009f9c <memset>:
 8009f9c:	4402      	add	r2, r0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d100      	bne.n	8009fa6 <memset+0xa>
 8009fa4:	4770      	bx	lr
 8009fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8009faa:	e7f9      	b.n	8009fa0 <memset+0x4>

08009fac <__libc_init_array>:
 8009fac:	b570      	push	{r4, r5, r6, lr}
 8009fae:	4d0d      	ldr	r5, [pc, #52]	@ (8009fe4 <__libc_init_array+0x38>)
 8009fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8009fe8 <__libc_init_array+0x3c>)
 8009fb2:	1b64      	subs	r4, r4, r5
 8009fb4:	10a4      	asrs	r4, r4, #2
 8009fb6:	2600      	movs	r6, #0
 8009fb8:	42a6      	cmp	r6, r4
 8009fba:	d109      	bne.n	8009fd0 <__libc_init_array+0x24>
 8009fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8009fec <__libc_init_array+0x40>)
 8009fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8009ff0 <__libc_init_array+0x44>)
 8009fc0:	f000 f818 	bl	8009ff4 <_init>
 8009fc4:	1b64      	subs	r4, r4, r5
 8009fc6:	10a4      	asrs	r4, r4, #2
 8009fc8:	2600      	movs	r6, #0
 8009fca:	42a6      	cmp	r6, r4
 8009fcc:	d105      	bne.n	8009fda <__libc_init_array+0x2e>
 8009fce:	bd70      	pop	{r4, r5, r6, pc}
 8009fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fd4:	4798      	blx	r3
 8009fd6:	3601      	adds	r6, #1
 8009fd8:	e7ee      	b.n	8009fb8 <__libc_init_array+0xc>
 8009fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fde:	4798      	blx	r3
 8009fe0:	3601      	adds	r6, #1
 8009fe2:	e7f2      	b.n	8009fca <__libc_init_array+0x1e>
 8009fe4:	0800a05c 	.word	0x0800a05c
 8009fe8:	0800a05c 	.word	0x0800a05c
 8009fec:	0800a05c 	.word	0x0800a05c
 8009ff0:	0800a060 	.word	0x0800a060

08009ff4 <_init>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	bf00      	nop
 8009ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffa:	bc08      	pop	{r3}
 8009ffc:	469e      	mov	lr, r3
 8009ffe:	4770      	bx	lr

0800a000 <_fini>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	bf00      	nop
 800a004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a006:	bc08      	pop	{r3}
 800a008:	469e      	mov	lr, r3
 800a00a:	4770      	bx	lr
